var schema = require('@tsed/schema');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

class Exception extends Error {
  constructor(status = 500, message = "", origin) {
    super(message);
    /**
     * Exception base name
     * @type {string}
     */

    this.name = "HTTP_EXCEPTION";
    /**
     * Exception type
     * @type {string}
     */

    this.type = "HTTP_EXCEPTION";
    /**
     * Headers must be sent to the response
     */

    this.headers = {};
    this.status = status;
    this.message = message;
    this.name = schema.getStatusConstant(status);
    this.setOrigin(origin);
  }

  setHeaders(headers) {
    this.headers = _extends({}, this.headers, headers);
    return this;
  }

  setHeader(key, value) {
    this.headers[key] = value;
    return this;
  }

  setOrigin(origin) {
    if (origin) {
      if (origin instanceof Error) {
        this.origin = origin;
        this.message = `${this.message}, innerException: ${this.origin.message}`.trim();
      } else if (typeof origin === "string") {
        this.origin = new Error(origin);
        this.message = `${this.message}, innerException: ${this.origin.message}`.trim();
      } else {
        this.body = origin;
      }
    }
  }

  toString() {
    return `${this.name}(${this.status}): ${this.message} `.trim();
  }

}
class HTTPException extends Exception {}

/**
 *
 */

const HTTP_STATUSES = schema.HTTP_STATUS_MESSAGES;

class BadMapping extends Exception {
  constructor(message, origin) {
    super(BadMapping.STATUS, message, origin);
    this.name = "BAD_MAPPING";
  }

}
BadMapping.STATUS = 421;

class BadRequest extends Exception {
  constructor(message, origin) {
    super(BadRequest.STATUS, message, origin);
  }

}
BadRequest.STATUS = 400;

class Conflict extends Exception {
  constructor(message, origin) {
    super(Conflict.STATUS, message, origin);
  }

}
Conflict.STATUS = 409;

class ExpectationFailed extends Exception {
  constructor(message, origin) {
    super(ExpectationFailed.STATUS, message, origin);
  }

}
ExpectationFailed.STATUS = 417;

class Forbidden extends Exception {
  constructor(message, origin) {
    super(Forbidden.STATUS, message, origin);
  }

}
Forbidden.STATUS = 403;

class Gone extends Exception {
  constructor(message, origin) {
    super(Gone.STATUS, message, origin);
  }

}
Gone.STATUS = 410;

class ImATeapot extends Exception {
  constructor(message, origin) {
    super(ImATeapot.STATUS, message, origin);
    this.name = "IM_A_TEAPOT";
  }

}
ImATeapot.STATUS = 418;

class LengthRequired extends Exception {
  constructor(message, origin) {
    super(LengthRequired.STATUS, message, origin);
  }

}
LengthRequired.STATUS = 411;

class MethodNotAllowed extends Exception {
  constructor(message, origin) {
    super(MethodNotAllowed.STATUS, message, origin);
  }

}
MethodNotAllowed.STATUS = 405;

class MisdirectedRequest extends Exception {
  constructor(message, origin) {
    super(MisdirectedRequest.STATUS, message, origin);
  }

}
MisdirectedRequest.STATUS = 421;

class NotAcceptable extends Exception {
  constructor(message, origin = "You must accept content-type " + message) {
    super(NotAcceptable.STATUS, origin);
  }

}
NotAcceptable.STATUS = 406;

class NotFound extends Exception {
  constructor(message, origin) {
    super(NotFound.STATUS, message, origin);
  }

}
NotFound.STATUS = 404;

class PaymentRequired extends Exception {
  constructor(message, origin) {
    super(PaymentRequired.STATUS, message, origin);
  }

}
PaymentRequired.STATUS = 402;

class PreconditionFailed extends Exception {
  constructor(message, origin) {
    super(PreconditionFailed.STATUS, message, origin);
  }

}
PreconditionFailed.STATUS = 412;

class PreconditionRequired extends Exception {
  constructor(message, origin) {
    super(PreconditionRequired.STATUS, message, origin);
  }

}
PreconditionRequired.STATUS = 428;

class ProxyAuthentificationRequired extends Exception {
  constructor(message, origin) {
    super(ProxyAuthentificationRequired.STATUS, message, origin);
  }

}
ProxyAuthentificationRequired.STATUS = 407;

class RequestRangeUnsatisfiable extends Exception {
  constructor(message, origin) {
    super(RequestRangeUnsatisfiable.STATUS, message, origin);
  }

}
RequestRangeUnsatisfiable.STATUS = 416;

class RequestEntityTooLarge extends Exception {
  constructor(message, origin) {
    super(RequestEntityTooLarge.STATUS, message, origin);
  }

}
RequestEntityTooLarge.STATUS = 413;

class RequestHeaderFieldsTooLarge extends Exception {
  constructor(message, origin) {
    super(RequestHeaderFieldsTooLarge.STATUS, message, origin);
  }

}
RequestHeaderFieldsTooLarge.STATUS = 431;

class RequestTimeout extends Exception {
  constructor(message, origin) {
    super(RequestTimeout.STATUS, message, origin);
  }

}
RequestTimeout.STATUS = 408;

class RequestURITooLong extends Exception {
  constructor(message, origin) {
    super(RequestURITooLong.STATUS, message, origin);
  }

}
RequestURITooLong.STATUS = 414;

class TooManyRequests extends Exception {
  constructor(message, origin) {
    super(TooManyRequests.STATUS, message, origin);
  }

}
TooManyRequests.STATUS = 429;

class Unauthorized extends Exception {
  constructor(message, origin) {
    super(Unauthorized.STATUS, message, origin);
  }

}
Unauthorized.STATUS = 401;

class UnsupportedMediaType extends Exception {
  constructor(message, origin) {
    super(UnsupportedMediaType.STATUS, message, origin);
  }

}
UnsupportedMediaType.STATUS = 415;

class UpgradeRequired extends Exception {
  constructor(message, origin) {
    super(UpgradeRequired.STATUS, message, origin);
  }

}
UpgradeRequired.STATUS = 426;

class UnavailableForLegalReasons extends Exception {
  constructor(message, origin) {
    super(UnavailableForLegalReasons.STATUS, message, origin);
  }

}
UnavailableForLegalReasons.STATUS = 451;

class UnprocessableEntity extends Exception {
  constructor(message, origin) {
    super(UnprocessableEntity.STATUS, message, origin);
  }

}
UnprocessableEntity.STATUS = 422;

class MovedPermanently extends Exception {
  constructor(message, origin) {
    super(MovedPermanently.STATUS, message, origin);
  }

}
MovedPermanently.STATUS = 301;

class MovedTemporarily extends Exception {
  constructor(message, origin) {
    super(MovedTemporarily.STATUS, message, origin);
    this.name = "MOVED_TEMPORARILY";
  }

}
MovedTemporarily.STATUS = 302;

class MultipleChoices extends Exception {
  constructor(message, origin) {
    super(MultipleChoices.STATUS, message, origin);
  }

}
MultipleChoices.STATUS = 300;

class NotModified extends Exception {
  constructor(message, origin) {
    super(NotModified.STATUS, message, origin);
  }

}
NotModified.STATUS = 304;

class PermanentRedirect extends Exception {
  constructor(message, origin) {
    super(PermanentRedirect.STATUS, message, origin);
  }

}
PermanentRedirect.STATUS = 308;

class SeeOther extends Exception {
  constructor(message, origin) {
    super(SeeOther.STATUS, message, origin);
  }

}
SeeOther.STATUS = 303;

class TemporaryRedirect extends Exception {
  constructor(message, origin) {
    super(TemporaryRedirect.STATUS, message, origin);
  }

}
TemporaryRedirect.STATUS = 307;

class TooManyRedirects extends Exception {
  constructor(message, origin) {
    super(TooManyRedirects.STATUS, message, origin);
  }

}
TooManyRedirects.STATUS = 310;

class UseProxy extends Exception {
  constructor(message, origin) {
    super(UseProxy.STATUS, message, origin);
  }

}
UseProxy.STATUS = 305;

class BadGateway extends Exception {
  constructor(message, origin) {
    super(BadGateway.STATUS, message, origin);
  }

}
BadGateway.STATUS = 502;

class GatewayTimeout extends Exception {
  constructor(message, origin) {
    super(GatewayTimeout.STATUS, message, origin);
  }

}
GatewayTimeout.STATUS = 504;

class InternalServerError extends Exception {
  constructor(message, origin) {
    super(InternalServerError.STATUS, message, origin);
  }

}
InternalServerError.STATUS = 500;

class NotImplemented extends Exception {
  constructor(message, origin) {
    super(NotImplemented.STATUS, message, origin);
  }

}
NotImplemented.STATUS = 501;

class ProxyError extends Exception {
  constructor(message, origin) {
    super(ProxyError.STATUS, message, origin);
    this.name = "PROXY_ERROR";
  }

}
ProxyError.STATUS = 502;

class ServiceUnvailable extends Exception {
  constructor(message, origin) {
    super(ServiceUnvailable.STATUS, message, origin);
  }

}
ServiceUnvailable.STATUS = 503;

class NetworkAuthenticationRequired extends Exception {
  constructor(message, origin) {
    super(NetworkAuthenticationRequired.STATUS, message, origin);
  }

}
NetworkAuthenticationRequired.STATUS = 511;

class NotExtended extends Exception {
  constructor(message, origin) {
    super(NotExtended.STATUS, message, origin);
  }

}
NotExtended.STATUS = 510;

class VariantAlsoNegotiates extends Exception {
  constructor(message, origin) {
    super(VariantAlsoNegotiates.STATUS, message, origin);
  }

}
VariantAlsoNegotiates.STATUS = 506;

class BandwidthLimitExceeded extends Exception {
  constructor(message, origin) {
    super(BandwidthLimitExceeded.STATUS, message, origin);
  }

}
BandwidthLimitExceeded.STATUS = 509;

exports.BadGateway = BadGateway;
exports.BadMapping = BadMapping;
exports.BadRequest = BadRequest;
exports.BandwidthLimitExceeded = BandwidthLimitExceeded;
exports.Conflict = Conflict;
exports.Exception = Exception;
exports.ExpectationFailed = ExpectationFailed;
exports.Forbidden = Forbidden;
exports.GatewayTimeout = GatewayTimeout;
exports.Gone = Gone;
exports.HTTPException = HTTPException;
exports.HTTP_STATUSES = HTTP_STATUSES;
exports.ImATeapot = ImATeapot;
exports.InternalServerError = InternalServerError;
exports.LengthRequired = LengthRequired;
exports.MethodNotAllowed = MethodNotAllowed;
exports.MisdirectedRequest = MisdirectedRequest;
exports.MovedPermanently = MovedPermanently;
exports.MovedTemporarily = MovedTemporarily;
exports.MultipleChoices = MultipleChoices;
exports.NetworkAuthenticationRequired = NetworkAuthenticationRequired;
exports.NotAcceptable = NotAcceptable;
exports.NotExtended = NotExtended;
exports.NotFound = NotFound;
exports.NotImplemented = NotImplemented;
exports.NotModified = NotModified;
exports.PaymentRequired = PaymentRequired;
exports.PermanentRedirect = PermanentRedirect;
exports.PreconditionFailed = PreconditionFailed;
exports.PreconditionRequired = PreconditionRequired;
exports.ProxyAuthentificationRequired = ProxyAuthentificationRequired;
exports.ProxyError = ProxyError;
exports.RequestEntityTooLarge = RequestEntityTooLarge;
exports.RequestHeaderFieldsTooLarge = RequestHeaderFieldsTooLarge;
exports.RequestRangeUnsatisfiable = RequestRangeUnsatisfiable;
exports.RequestTimeout = RequestTimeout;
exports.RequestURITooLong = RequestURITooLong;
exports.SeeOther = SeeOther;
exports.ServiceUnvailable = ServiceUnvailable;
exports.TemporaryRedirect = TemporaryRedirect;
exports.TooManyRedirects = TooManyRedirects;
exports.TooManyRequests = TooManyRequests;
exports.Unauthorized = Unauthorized;
exports.UnavailableForLegalReasons = UnavailableForLegalReasons;
exports.UnprocessableEntity = UnprocessableEntity;
exports.UnsupportedMediaType = UnsupportedMediaType;
exports.UpgradeRequired = UpgradeRequired;
exports.UseProxy = UseProxy;
exports.VariantAlsoNegotiates = VariantAlsoNegotiates;
//# sourceMappingURL=index.js.map
