import { Type } from "@tsed/core";
import { JsonEntityStore, JsonEntityStoreOptions, JsonParameter } from "@tsed/schema";
import { ParamOptions } from "./ParamOptions";
export interface PipeMethods<T = any, R = any> {
    transform(value: T, metadata: ParamMetadata): R;
}
export declare type ParamConstructorOptions = JsonEntityStoreOptions & ParamOptions;
export declare class ParamMetadata extends JsonEntityStore implements ParamConstructorOptions {
    expression: string;
    paramType: string;
    dataPath: string;
    pipes: Type<PipeMethods>[];
    constructor(options: ParamConstructorOptions);
    get key(): string;
    /**
     * Return the JsonOperation
     */
    get parameter(): JsonParameter;
    static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata;
    static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[];
}
