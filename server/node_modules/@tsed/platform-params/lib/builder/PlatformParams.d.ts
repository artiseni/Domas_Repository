import { BaseContext, InjectorService } from "@tsed/di";
import { ParamMetadata, PipeMethods } from "../domain/ParamMetadata";
export declare type ArgScope = {
    $ctx: BaseContext;
} & Record<string, any>;
/**
 * Platform Params abstraction layer.
 * @platform
 */
export declare class PlatformParams {
    #private;
    protected injector: InjectorService;
    build(param: ParamMetadata): Promise<PipeMethods<any, any>[]>;
    getPipes(param: ParamMetadata): PipeMethods<any, any>[];
    runPipes(scope: ArgScope, param: ParamMetadata): Promise<any>;
    /**
     * Return arguments to call handler
     */
    getArgs(scope: ArgScope, parameters: ParamMetadata[]): Promise<any[]>;
}
