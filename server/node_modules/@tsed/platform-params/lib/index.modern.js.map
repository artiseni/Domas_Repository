{"version":3,"file":"index.modern.js","sources":["../src/utils/mapParamsOptions.ts","../src/domain/ParamTypes.ts","../src/domain/ParamMetadata.ts","../src/pipes/ParseExpressionPipe.ts","../src/pipes/DeserializerPipe.ts","../src/errors/ValidationError.ts","../src/errors/RequiredValidationError.ts","../src/pipes/ValidationPipe.ts","../src/errors/ParamValidationError.ts","../src/builder/PlatformParams.ts","../src/decorators/paramFn.ts","../src/decorators/usePipe.ts","../src/decorators/useDeserialization.ts","../src/decorators/useParamExpression.ts","../src/decorators/useParamType.ts","../src/decorators/useType.ts","../src/decorators/useValidation.ts","../src/decorators/useParam.ts","../src/decorators/context.ts","../src/decorators/bodyParams.ts","../src/decorators/headerParams.ts","../src/decorators/cookies.ts","../src/decorators/locals.ts","../src/decorators/pathParams.ts","../src/decorators/queryParams.ts","../src/decorators/session.ts"],"sourcesContent":["import {isObject} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\n\n/**\n * @ignore\n */\nexport function mapParamsOptions(args: any[]): Partial<ParamOptions<any>> {\n  if (args.length === 1) {\n    if (typeof args[0] === \"string\") {\n      return {\n        expression: args[0]\n      };\n    }\n\n    if (!isObject(args[0])) {\n      return {\n        useType: args[0]\n      };\n    }\n\n    return {\n      ...args[0]\n    };\n  }\n\n  return {\n    expression: args[0],\n    useType: args[1]\n  };\n}\n","export enum ParamTypes {\n  $CTX = \"$CTX\",\n  BODY = \"BODY\",\n  PATH = \"PATH\",\n  QUERY = \"QUERY\",\n  HEADER = \"HEADER\",\n  RAW_BODY = \"RAW_BODY\",\n  COOKIES = \"COOKIES\",\n  LOCALS = \"LOCALS\",\n  SESSION = \"SESSION\",\n  FILES = \"FILES\",\n\n  /// NOT STD\n  NEXT_FN = \"NEXT_FN\",\n  ERR = \"ERR\",\n  REQUEST = \"REQUEST\",\n  PLATFORM_REQUEST = \"PLATFORM_REQUEST\",\n  NODE_REQUEST = \"NODE_REQUEST\",\n  RESPONSE = \"RESPONSE\",\n  PLATFORM_RESPONSE = \"PLATFORM_RESPONSE\",\n  NODE_RESPONSE = \"NODE_RESPONSE\",\n  RESPONSE_DATA = \"RESPONSE_DATA\",\n  ENDPOINT_INFO = \"ENDPOINT_INFO\",\n  RES = \"RES\",\n  REQ = \"REQ\"\n}\n","import {ancestorsOf, DecoratorTypes, prototypeOf, Type} from \"@tsed/core\";\nimport {JsonEntityComponent, JsonEntityStore, JsonEntityStoreOptions, JsonParameter} from \"@tsed/schema\";\nimport {ParamOptions} from \"./ParamOptions\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface PipeMethods<T = any, R = any> {\n  transform(value: T, metadata: ParamMetadata): R;\n}\n\nexport type ParamConstructorOptions = JsonEntityStoreOptions & ParamOptions;\n\n@JsonEntityComponent(DecoratorTypes.PARAM)\nexport class ParamMetadata extends JsonEntityStore implements ParamConstructorOptions {\n  public expression: string;\n  public paramType: string = \"$ctx\";\n  public dataPath: string;\n  public pipes: Type<PipeMethods>[] = [];\n\n  constructor(options: ParamConstructorOptions) {\n    super(options);\n\n    const {paramType, pipes, dataPath} = options;\n\n    this.expression = options.expression || this.expression;\n    this.paramType = paramType || this.paramType;\n    this.dataPath = dataPath || this.dataPath;\n    this.pipes = pipes || [];\n  }\n\n  get key() {\n    let {expression, paramType, dataPath} = this;\n\n    if (expression && paramType === ParamTypes.HEADER) {\n      expression = String(expression).toLowerCase();\n    }\n\n    return [dataPath, expression].filter(Boolean).join(\".\");\n  }\n\n  /**\n   * Return the JsonOperation\n   */\n  get parameter(): JsonParameter {\n    return this._parameter;\n  }\n\n  static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata {\n    return JsonEntityStore.from<ParamMetadata>(prototypeOf(target), propertyKey, index);\n  }\n\n  static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[] {\n    const params: ParamMetadata[] = [];\n\n    const klass = ancestorsOf(target)\n      .reverse()\n      .find((target) => JsonEntityStore.fromMethod(target, propertyKey).children.size);\n\n    if (!klass) {\n      return [];\n    }\n\n    JsonEntityStore.fromMethod(klass, propertyKey).children.forEach((param: ParamMetadata, index) => {\n      params[+index] = param;\n    });\n\n    return params;\n  }\n}\n","import {getValue} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {PipeMethods, ParamMetadata} from \"../domain/ParamMetadata\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport type {ArgScope} from \"../builder/PlatformParams\";\n\n@Injectable({\n  priority: -1000\n})\nexport class ParseExpressionPipe implements PipeMethods {\n  transform(scope: ArgScope, param: ParamMetadata) {\n    const {paramType, type} = param;\n\n    const value = getValue(scope, param.key);\n\n    if ([ParamTypes.QUERY, ParamTypes.PATH].includes(paramType as ParamTypes) && value === \"\" && type !== String) {\n      return undefined;\n    }\n\n    return value;\n  }\n}\n","import {Configuration, Injectable} from \"@tsed/di\";\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {PipeMethods, ParamMetadata} from \"../domain/ParamMetadata\";\n\n@Injectable()\nexport class DeserializerPipe implements PipeMethods {\n  #settings: {\n    additionalProperties?: \"error\" | \"accept\" | \"ignore\";\n  };\n\n  constructor(@Configuration() configuration: Configuration) {\n    this.#settings = configuration.get(\"jsonMapper\", configuration.get(\"converter\", {}));\n  }\n\n  transform(value: any, param: ParamMetadata) {\n    return deserialize(value, {\n      useAlias: true,\n      additionalProperties: this.#settings.additionalProperties === \"accept\",\n      type: param.type,\n      collectionType: param.collectionType,\n      groups: param.parameter.groups,\n      genericTypes: param.nestedGenerics[0],\n      nestedGenerics: param.nestedGenerics,\n      ...(param.store.get(DeserializerPipe) || {})\n    });\n  }\n}\n","import {BadRequest} from \"@tsed/exceptions\";\n\nexport class ValidationError extends BadRequest {\n  public name: string = \"VALIDATION_ERROR\";\n  public errors: any[];\n\n  constructor(message: string, errors: any[] = []) {\n    super(message);\n    this.errors = errors;\n  }\n}\n","import {nameOf} from \"@tsed/core\";\nimport {ParamMetadata} from \"../domain/ParamMetadata\";\nimport {ValidationError} from \"./ValidationError\";\n\nexport class RequiredValidationError extends ValidationError {\n  public name: string = \"REQUIRED_VALIDATION_ERROR\";\n  public errors: any[];\n\n  static from(metadata: ParamMetadata) {\n    const name = nameOf(metadata.paramType);\n    const expression = metadata.expression;\n    const type = name.toLowerCase().replace(/parse|params|filter/gi, \"\");\n    const message = `It should have required parameter '${expression}'`;\n\n    const errors = [\n      {\n        dataPath: \"\",\n        keyword: \"required\",\n        message,\n        modelName: type,\n        params: {\n          missingProperty: expression\n        },\n        schemaPath: \"#/required\"\n      }\n    ];\n\n    return new RequiredValidationError(message, errors);\n  }\n}\n","import {nameOf} from \"@tsed/core\";\nimport {Injectable, InjectorService} from \"@tsed/di\";\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {getJsonSchema} from \"@tsed/schema\";\nimport {RequiredValidationError} from \"../errors/RequiredValidationError\";\nimport {PipeMethods, ParamMetadata} from \"../domain/ParamMetadata\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\n\n@Injectable({\n  type: \"validator\"\n})\nexport class ValidationPipe implements PipeMethods {\n  private validator: {validate(value: any, options: any): Promise<any>};\n\n  constructor(injector: InjectorService) {\n    const provider = injector.getProviders().find((provider) => nameOf(provider.token) === \"AjvService\");\n\n    if (provider) {\n      this.validator = injector.invoke<any>(provider.token);\n    }\n  }\n\n  coerceTypes(value: any, metadata: ParamMetadata) {\n    if (value === undefined) {\n      return value;\n    }\n\n    if (value === \"null\") {\n      return null;\n    }\n\n    if (metadata.isPrimitive) {\n      try {\n        return deserialize(value, {\n          type: metadata.type\n        });\n      } catch (er) {\n        return value;\n      }\n    }\n\n    if (metadata.isArray) {\n      return [].concat(value);\n    }\n\n    return value;\n  }\n\n  skip(value: any, metadata: ParamMetadata) {\n    return metadata.paramType === ParamTypes.PATH && !metadata.isPrimitive;\n  }\n\n  async transform(value: any, metadata: ParamMetadata): Promise<any> {\n    if (!this.validator) {\n      this.checkIsRequired(value, metadata);\n      return value;\n    }\n\n    if (this.skip(value, metadata)) {\n      return value;\n    }\n\n    value = this.coerceTypes(value, metadata);\n\n    this.checkIsRequired(value, metadata);\n\n    if (value === undefined) {\n      return value;\n    }\n\n    const schema = getJsonSchema(metadata, {\n      customKeys: true\n    });\n\n    await this.validator.validate(value, {\n      schema,\n      type: metadata.isClass ? metadata.type : undefined,\n      collectionType: metadata.collectionType\n    });\n\n    return value;\n  }\n\n  protected checkIsRequired(value: any, metadata: ParamMetadata) {\n    if (metadata.isRequired(value)) {\n      throw RequiredValidationError.from(metadata);\n    }\n\n    return true;\n  }\n}\n","import {nameOf} from \"@tsed/core\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {ParamMetadata} from \"../domain/ParamMetadata\";\nimport {ValidationError} from \"./ValidationError\";\n\nexport class ParamValidationError extends BadRequest {\n  public name: string = \"PARAM_VALIDATION_ERROR\";\n  public dataPath: string;\n  public requestType: string;\n\n  static from(metadata: ParamMetadata, origin: any = {}) {\n    if (origin instanceof ValidationError || origin instanceof BadRequest) {\n      const name = nameOf(metadata.paramType)\n        .toLowerCase()\n        .replace(/parse|params|filter/gi, \"\");\n      const expression = metadata.expression;\n      const message = `Bad request on parameter \"request.${name}${expression ? \".\" + expression : \"\"}\".\\n${origin.message}`.trim();\n\n      const error = new ParamValidationError(message);\n      error.dataPath = String(metadata.expression) || \"\";\n      error.requestType = nameOf(metadata.paramType);\n      error.origin = origin.origin || origin;\n\n      return error;\n    }\n\n    return origin;\n  }\n}\n","import {BaseContext, Inject, Injectable, InjectorService, ProviderScope, TokenProvider} from \"@tsed/di\";\nimport {ParamMetadata, PipeMethods} from \"../domain/ParamMetadata\";\nimport {ParamValidationError} from \"../errors/ParamValidationError\";\nimport {ParseExpressionPipe} from \"../pipes/ParseExpressionPipe\";\n\nexport type ArgScope = {$ctx: BaseContext} & Record<string, any>;\n\n/**\n * Platform Params abstraction layer.\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class PlatformParams {\n  @Inject()\n  protected injector: InjectorService;\n\n  #caches: WeakMap<any, PipeMethods[]> = new WeakMap<any, PipeMethods[]>();\n\n  async build(param: ParamMetadata) {\n    const get = (pipe: TokenProvider) => {\n      return this.injector.getProvider(pipe)!.priority || 0;\n    };\n\n    const sort = (p1: TokenProvider, p2: TokenProvider) => (get(p1) < get(p2) ? -1 : get(p1) > get(p2) ? 1 : 0);\n    const map = (token: TokenProvider) => this.injector.invoke<PipeMethods>(token)!;\n    const promises = await Promise.all([ParseExpressionPipe, ...param.pipes.sort(sort)].map(map));\n    const pipes = promises.filter(Boolean);\n\n    this.#caches.set(param, pipes);\n\n    return pipes;\n  }\n\n  getPipes(param: ParamMetadata) {\n    return this.#caches.get(param) || [];\n  }\n\n  async runPipes(scope: ArgScope, param: ParamMetadata) {\n    return this.getPipes(param).reduce(async (value, pipe) => {\n      value = await value;\n\n      try {\n        return await pipe.transform(value, param);\n      } catch (er) {\n        throw ParamValidationError.from(param, er);\n      }\n    }, scope as any);\n  }\n\n  /**\n   * Return arguments to call handler\n   */\n  async getArgs(scope: ArgScope, parameters: ParamMetadata[]) {\n    return Promise.all(parameters.map((param) => this.runPipes(scope, param)));\n  }\n}\n","import {DecoratorParameters, decoratorTypeOf, DecoratorTypes, Type} from \"@tsed/core\";\nimport {ParamMetadata} from \"../domain/ParamMetadata\";\n\n/**\n * Get the Param metadata. Use this decorator to compose your own decorator.\n *\n * @param fn\n * @decorator\n * @operation\n * @input\n */\nexport function ParamFn(fn: (param: ParamMetadata, parameters: DecoratorParameters) => void): ParameterDecorator {\n  return <T>(target: Type<any>, propertyKey: string, index: number): void => {\n    if (decoratorTypeOf([target, propertyKey, index]) === DecoratorTypes.PARAM) {\n      fn(ParamMetadata.get(target!, propertyKey!, index), [target, propertyKey, index]);\n    }\n  };\n}\n","import {Type} from \"@tsed/core\";\nimport {PipeMethods} from \"../domain/ParamMetadata\";\nimport {ParamFn} from \"./paramFn\";\n\n/**\n * Register a Pipe to be used with the current decorated param.\n *\n * @param token\n * @param options\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UsePipe(token: Type<PipeMethods>, options: any = {}) {\n  return ParamFn((param) => {\n    param.store.set(token, options);\n    param.pipes.push(token);\n  });\n}\n","import {DeserializerPipe} from \"../pipes/DeserializerPipe\";\nimport {UsePipe} from \"./usePipe\";\n\n/**\n * Use JsonMapper to deserialize the data.\n *\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseDeserialization(options: any = {}) {\n  return UsePipe(DeserializerPipe, options);\n}\n","import {ParamFn} from \"./paramFn\";\n\n/**\n * Get data from a path inside the given object\n *\n * @param expression\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseParamExpression(expression?: string) {\n  return ParamFn((param) => {\n    param.expression = expression || \"\";\n  });\n}\n","import {useDecorators} from \"@tsed/core\";\nimport {isParameterType, Name} from \"@tsed/schema\";\nimport {ParamFn} from \"./paramFn\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {UseParamExpression} from \"./useParamExpression\";\n\n/**\n * Get the object from request (like body, params, query, etc...).\n *\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseParamType(options: ParamOptions) {\n  return useDecorators(\n    ParamFn((param) => {\n      if (isParameterType(options.paramType)) {\n        param.parameter!.in(options.paramType);\n      }\n\n      param.paramType = options.paramType;\n      param.dataPath = options.dataPath;\n    }),\n    UseParamExpression(options.expression),\n    options.expression && Name(options.expression)\n  );\n}\n","import {Type} from \"@tsed/core\";\nimport {CollectionOf} from \"@tsed/schema\";\n\n/**\n * Set the type of the item colllection.\n *\n * Prefer @@CollectionOf@@ usage.\n *\n * @param type\n * @decorator\n * @operation\n * @input\n * @alias CollectionOf\n */\nexport function UseType(type: any | Type<any>) {\n  return CollectionOf(type);\n}\n","import {ValidationPipe} from \"../pipes/ValidationPipe\";\nimport {ParamFn} from \"./paramFn\";\n\n/**\n * Enable validation on the decoratored parameter.\n *\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseValidation() {\n  return ParamFn((param) => {\n    if (param.type || param.collectionType) {\n      param.pipes.push(ValidationPipe);\n    }\n  });\n}\n","import {isString, useDecorators} from \"@tsed/core\";\nimport {Any, Name} from \"@tsed/schema\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamFn} from \"./paramFn\";\nimport {UseDeserialization} from \"./useDeserialization\";\nimport {UseParamExpression} from \"./useParamExpression\";\nimport {UseParamType} from \"./useParamType\";\nimport {UseType} from \"./useType\";\nimport {UseValidation} from \"./useValidation\";\n\n/**\n * @ignore\n * @param options\n */\nfunction mapPipes(options: Partial<ParamOptions>) {\n  const {paramType, useType, expression, useValidation, useConverter, ...props} = options;\n\n  return [\n    useType\n      ? UseType(useType)\n      : ParamFn((entity, parameters) => {\n          if (entity.isCollection && entity.type === Object) {\n            Any()(...parameters);\n          }\n        }),\n    useValidation && UseValidation(),\n    useConverter && UseDeserialization(props)\n  ];\n}\n\n/**\n * Register a new param. It use the paramType to extract value and give it to the next pipe.\n *\n * Given options allow to enable or disable following pipes:\n *\n * - useType: Add extra type for the json mapper,\n * - expression: Get property from the returned value by the previous pipe.\n * - useValidation: Apply validation from the returned value by the previous pipe.\n * - useConverter: Apply json mapper from the returned value by the previous pipe.\n *\n * @param options\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseParam(options: Partial<ParamOptions>): ParameterDecorator;\n/**\n * @deprecated Since v6\n */\nexport function UseParam(paramType: string, options?: Partial<ParamOptions>): ParameterDecorator;\nexport function UseParam(...args: any[]): ParameterDecorator {\n  const options = {\n    dataPath: \"$ctx\",\n    ...((isString(args[0]) ? args[1] : args[0]) || {}),\n    paramType: isString(args[0]) ? args[0] : args[0].paramType\n  };\n\n  return useDecorators(UseParamType(options), ...mapPipes(options)) as ParameterDecorator;\n}\n","import {BaseContext} from \"@tsed/di\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\ndeclare global {\n  namespace TsED {\n    export interface Context {}\n  }\n}\n\n/**\n * Context decorator return the @@PlatformContext@@ created by Ts.ED when request is handled by the server.\n *\n * It contains some information as following:\n *\n * - The request id,\n * - The request container used by the Ts.ED DI. It contain all services annotated with `@Scope(ProviderScope.REQUEST)`,\n * - The current @@EndpointMetadata@@ resolved by Ts.ED during the request,\n * - The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n *\n * ::: tip\n * The @@PlatformContext@@ inherit from Map class. So you can store any information with.\n * :::\n *\n * #### Example\n *\n * ```typescript\n * @Middleware()\n * class AuthTokenMiddleware {\n *   use(@Req() request: Req, @Context() context: PlatformContext) {\n *      if (!context.has(\"auth\")){\n *        context.set('auth', new AuthToken(request))\n *      }\n *\n *      try {\n *        context.get(\"auth\").claims() // check token\n *      } catch(er){\n *        throw new Forbidden(\"Access forbidden - Bad token\")\n *      }\n *   }\n * }\n *\n * @Controller('/')\n * @UseBefore(AuthTokenMiddleware) // protect all routes for this controller\n * class MyCtrl {\n *    @Get('/')\n *    get(@Context('auth') auth: AuthToken) {\n *       console.log('auth', auth);\n *       console.log('auth.accessToken', auth.accessToken);\n *       console.log('auth.idToken', auth.idToken);\n *    }\n * }\n * ```\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function Context(expression: string): ParameterDecorator;\nexport function Context(): ParameterDecorator;\nexport function Context(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.$CTX,\n    dataPath: \"$ctx\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\nexport type Context = BaseContext;\n","import {Type, useDecorators} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {UseParam} from \"./useParam\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\n\n/**\n * BodyParams return the value from [request.body](http://expressjs.com/en/4x/api.html#req.body) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@BodyParams() body: any) {\n *       console.log('Entire body', body);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function BodyParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function BodyParams(expression: string): ParameterDecorator;\nexport function BodyParams(useType: Type<any>): ParameterDecorator;\nexport function BodyParams(options: Partial<ParamOptions>): ParameterDecorator;\nexport function BodyParams(): ParameterDecorator;\nexport function BodyParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.BODY,\n    dataPath: \"$ctx.request.body\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\n/**\n * RawBodyParams return the value from [request.body](http://expressjs.com/en/4x/api.html#req.body) as a Buffer.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@RawBodyParams() body: Buffer) {\n *       console.log('Entire body', body.toString('utf8'));\n *    }\n * }\n * ```\n *\n * @decorator\n * @operation\n * @input\n */\nexport function RawBodyParams(): ParameterDecorator {\n  return useDecorators(\n    UseParam({\n      paramType: ParamTypes.RAW_BODY,\n      dataPath: \"$ctx.request.rawBody\",\n      useType: Object,\n      useConverter: false,\n      useValidation: false\n    })\n  );\n}\n","import {Type} from \"@tsed/core\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {UseParam} from \"./useParam\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\n\n/**\n * HeaderParams return the value from [`request.get()`](http://expressjs.com/en/4x/api.html#req.get) method.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@HeaderParams() body: any) {\n *       console.log('Entire body', body);\n *    }\n *\n *    @Get('/')\n *    get(@HeaderParams('x-token') token: string) {\n *       console.log('token', id);\n *    }\n * }\n * ```\n *\n * @param expression The path of the property to get.\n * @param useType\n * @decorator\n * @operation\n * @input\n */\nexport function HeaderParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function HeaderParams(expression: string): ParameterDecorator;\nexport function HeaderParams(useType: Type<any>): ParameterDecorator;\nexport function HeaderParams(options: Partial<ParamOptions>): ParameterDecorator;\nexport function HeaderParams(): ParameterDecorator;\nexport function HeaderParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.HEADER,\n    dataPath: \"$ctx.request.headers\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n","import {Type} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * Cookies or CookiesParams return the value from [request.cookies](http://expressjs.com/en/4x/api.html#req.cookies) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@Cookies() cookies: any) {\n *       console.log('Entire cookies', cookies);\n *    }\n *\n *    @Post('/')\n *    create(@Cookies('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Post('/')\n *    create(@Cookies('user') user: IUser) {\n *       console.log('user', user);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function CookiesParams(expression: string | any, useType: any): ParameterDecorator;\nexport function CookiesParams(): ParameterDecorator;\nexport function CookiesParams(expression: string | any): ParameterDecorator;\nexport function CookiesParams(options: ParamOptions<any>): ParameterDecorator;\nexport function CookiesParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.COOKIES,\n    dataPath: \"$ctx.request.cookies\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\n/**\n * Cookies or CookiesParams return the value from [request.cookies](http://expressjs.com/en/4x/api.html#req.cookies) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@Cookies() body: any) {\n *       console.log('Entire body', body);\n *    }\n *\n *    @Post('/')\n *    create(@Cookies('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Post('/')\n *    create(@Cookies('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Post('/')\n *    create(@Cookies('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @aliasof CookiesParams\n * @operation\n * @input\n */\nexport function Cookies(expression: string, useType: Type<any>): ParameterDecorator;\nexport function Cookies(expression: string): ParameterDecorator;\nexport function Cookies(useType: Type<any>): ParameterDecorator;\nexport function Cookies(options: Partial<ParamOptions>): ParameterDecorator;\nexport function Cookies(): ParameterDecorator;\nexport function Cookies(...args: any[]): ParameterDecorator {\n  // @ts-ignore\n  return CookiesParams(...args);\n}\n","import {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * Locals return the value from [response.locals](http://expressjs.com/en/4x/api.html#res.locals) object.\n *\n * ::: tip\n * Locals are generally used by express and third-party like templating engine to render a page/template.\n * See [Templating](http://tsed.io/tutorials/templating.html) section for more details.\n * :::\n *\n * #### Example\n *\n * ```typescript\n *  * @Middleware()\n * class LocalsMiddleware {\n *   use(@Locals() locals: any) {\n *      // set some on locals\n *      locals.user = \"user\"\n *   }\n * }\n *\n * @Controller('/')\n * @UseBefore(LocalsMiddleware)\n * class MyCtrl {\n *    @Get('/')\n *    @View('home.ejs') // will use locals and returned data to render the page\n *    get(@Locals('user') user: any) {\n *       console.log('user', user);\n *\n *       return {\n *         description: 'Hello world'\n *       }\n *    }\n * }\n * ```\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport function Locals(expression: string): ParameterDecorator;\nexport function Locals(): ParameterDecorator;\nexport function Locals(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.LOCALS,\n    dataPath: \"$ctx.response.locals\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n","import {Type} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * PathParams return the value from [request.params](http://expressjs.com/en/4x/api.html#req.params) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@PathParams() params: any) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@PathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@PathParams({expression: 'id', useType: () => new MyCustomModel() }) id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function PathParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function PathParams(expression: string): ParameterDecorator;\nexport function PathParams(useType: Type<any>): ParameterDecorator;\nexport function PathParams(options: Partial<ParamOptions>): ParameterDecorator;\nexport function PathParams(): ParameterDecorator;\nexport function PathParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.PATH,\n    dataPath: \"$ctx.request.params\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\n/**\n * RawPathParams return the raw value from [request.params](http://expressjs.com/en/4x/api.html#req.params) object.\n *\n * Any validation and transformation are performed on the value. Use [pipes](/docs/pipes.html) to validate and/or transform the value.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@RawPathParams() params: string) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@RawPathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function RawPathParams(expression: string) {\n  return UseParam({\n    paramType: ParamTypes.PATH,\n    dataPath: \"$ctx.request.params\",\n    expression\n  });\n}\n","import {Type} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * QueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@QueryParams() query: any) {\n *       console.log('Entire query', query);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function QueryParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function QueryParams(expression: string): ParameterDecorator;\nexport function QueryParams(useType: Type<any>): ParameterDecorator;\nexport function QueryParams(options: Partial<ParamOptions>): ParameterDecorator;\nexport function QueryParams(): ParameterDecorator;\nexport function QueryParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.QUERY,\n    dataPath: \"$ctx.request.query\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\n/**\n * RawQueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * Any validation and transformation are performed on the value. Use [pipes](/docs/pipes.html) to validate and/or transform the value.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@RawPathParams() params: any) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@RawPathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function RawQueryParams(expression: string) {\n  return UseParam({\n    paramType: ParamTypes.QUERY,\n    dataPath: \"$ctx.request.query\",\n    expression\n  });\n}\n","import {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * Session return the value from [request.session](http://expressjs.com/en/4x/api.html#req.session) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@Session() session: Express.Session) {\n *       console.log('Entire session', session);\n *    }\n *\n *    @Post('/')\n *    create(@Session('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Post('/') // Example to deserialize use from session\n *    create(@Session({expression: 'user', useConverter: true}) user: User) {\n *       console.log('user', user);\n *       console.log('instanceOf user', user instanceof User);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function Session(expression: string): ParameterDecorator;\nexport function Session(options: Partial<ParamOptions>): ParameterDecorator;\nexport function Session(): ParameterDecorator;\nexport function Session(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.SESSION,\n    dataPath: \"$ctx.request.session\",\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n"],"names":["mapParamsOptions","args","length","expression","isObject","useType","ParamTypes","ParamMetadata","JsonEntityStore","constructor","options","paramType","pipes","dataPath","key","HEADER","String","toLowerCase","filter","Boolean","join","parameter","_parameter","get","target","propertyKey","index","from","prototypeOf","getParams","params","klass","ancestorsOf","reverse","find","fromMethod","children","size","forEach","param","JsonEntityComponent","DecoratorTypes","PARAM","ParseExpressionPipe","transform","scope","type","value","getValue","QUERY","PATH","includes","undefined","Injectable","priority","DeserializerPipe","configuration","deserialize","useAlias","additionalProperties","collectionType","groups","genericTypes","nestedGenerics","store","DeserializerPipe_1","__param","Configuration","ValidationError","BadRequest","message","errors","RequiredValidationError","metadata","name","nameOf","replace","keyword","modelName","missingProperty","schemaPath","ValidationPipe","injector","provider","getProviders","token","validator","invoke","coerceTypes","isPrimitive","er","isArray","concat","skip","checkIsRequired","schema","getJsonSchema","customKeys","validate","isClass","isRequired","InjectorService","ParamValidationError","origin","trim","error","requestType","PlatformParams","WeakMap","build","pipe","getProvider","sort","p1","p2","map","promises","Promise","all","set","getPipes","runPipes","reduce","getArgs","parameters","__decorate","Inject","ProviderScope","SINGLETON","ParamFn","fn","decoratorTypeOf","UsePipe","push","UseDeserialization","UseParamExpression","UseParamType","useDecorators","isParameterType","in","Name","UseType","CollectionOf","UseValidation","mapPipes","useValidation","useConverter","props","entity","isCollection","Object","Any","UseParam","isString","Context","$CTX","BodyParams","BODY","RawBodyParams","RAW_BODY","HeaderParams","CookiesParams","COOKIES","Cookies","Locals","LOCALS","PathParams","RawPathParams","QueryParams","RawQueryParams","Session","SESSION"],"mappings":"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"}