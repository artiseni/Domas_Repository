import { Configuration } from "@tsed/di";
import { JsonDeserializerOptions } from "@tsed/json-mapper";
import cacheManager, { Cache, CachingConfig, MultiCache, TtlFunction } from "cache-manager";
export declare type CacheManager = (Cache | MultiCache) & {
    keys?(): Promise<string[]>;
};
/**
 * @platform
 */
export declare class PlatformCache {
    settings: Configuration;
    cache: CacheManager | undefined;
    disabled(): boolean;
    $onInit(): void;
    defaultKeyResolver(): (args: any[], ctx?: any) => string;
    defaultTtl(): number | cacheManager.TtlFunction;
    ttl(result?: any, currentTtl?: number | TtlFunction): number;
    wrap<T>(key: string, fetch: () => Promise<T>, options?: CachingConfig): Promise<T>;
    get<T>(key: string, options?: JsonDeserializerOptions): Promise<T | undefined>;
    set<T>(key: string, value: any, options?: CachingConfig): Promise<T | undefined>;
    del(key: string): Promise<void>;
    reset(): Promise<void>;
    keys(): Promise<string[]>;
    getMatchingKeys(patterns: string): Promise<string[]>;
    deleteMatchingKeys(patterns: string): Promise<string[]>;
}
