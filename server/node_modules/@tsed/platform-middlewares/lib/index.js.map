{"version":3,"file":"index.js","sources":["../src/decorators/middleware.ts","../src/decorators/authOptions.ts","../src/constants/index.ts","../src/utils/mapUseOptions.ts","../src/decorators/use.ts","../src/decorators/useAfter.ts","../src/decorators/useBefore.ts","../src/decorators/useAuth.ts","../src/decorators/useBeforeEach.ts","../src/utils/getMiddlewaresForHook.ts"],"sourcesContent":["import {Injectable, ProviderType} from \"@tsed/di\";\n\n/**\n * Register a new Middleware class.\n *\n * @decorator\n * @classDecorator\n */\nexport function Middleware(): ClassDecorator {\n  return Injectable({\n    type: ProviderType.MIDDLEWARE\n  });\n}\n","import {\n  decorateMethodsOf,\n  DecoratorMethodParameters,\n  DecoratorParameters,\n  decoratorTypeOf,\n  DecoratorTypes,\n  Type,\n  UnsupportedDecoratorType\n} from \"@tsed/core\";\nimport {JsonEntityFn} from \"@tsed/schema\";\n\nexport interface IAuthOptions {\n  /**\n   * @deprecated Since v6. Use @Returns from @tsed/schema\n   */\n  responses?: {\n    [statusCode: string]: {\n      description: string;\n    };\n  };\n  /**\n   * @deprecated Since v6. Use @Security from @tsed/schema\n   */\n  security?:\n    | {\n        [securityName: string]: string[];\n      }[]\n    | {\n        [securityName: string]: string[];\n      };\n\n  [key: string]: any;\n}\n\n/**\n * Change authentication options.\n *\n * ```typescript\n * @Controller('/mypath')\n * @UseAuth(MyAuthStrategy, {role: ''})\n * class MyCtrl {\n *\n *   @Get('/')\n *   @AuthOptions(MyAuthStrategy, {role: 'admin'})\n *   public getResource(){}\n * }\n * ```\n *\n * @param guardAuth\n * @param options {Object} Object passed to the customer auth strategy\n * @returns {Function}\n * @decorator\n * @decorator\n * @operation\n */\nexport function AuthOptions(guardAuth: Type<any>, options: IAuthOptions = {}): Function {\n  return <T>(...args: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.METHOD:\n        return JsonEntityFn((entity) => {\n          const store = entity.store;\n\n          if (options.responses) {\n            const {responses} = options;\n            store.merge(\"responses\", responses, true);\n            delete options.responses;\n          }\n\n          if (options.security) {\n            const {security} = options;\n            [].concat(security as any).forEach((security) => {\n              Object.entries(security).forEach(([name, scopes]: [string, string[]]) => {\n                entity.operation!.addSecurityScopes(name, scopes);\n              });\n            });\n\n            delete options.security;\n          }\n\n          store.merge(guardAuth, options, true);\n        })(...(args as DecoratorMethodParameters));\n\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], AuthOptions(guardAuth, options));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(AuthOptions, args);\n    }\n  };\n}\n","export const HTTP_METHODS = [\n  \"all\",\n  \"checkout\",\n  \"connect\",\n  \"copy\",\n  \"delete\",\n  \"get\",\n  \"head\",\n  \"lock\",\n  \"merge\",\n  \"mkactivity\",\n  \"mkcol\",\n  \"move\",\n  \"m-search\",\n  \"notify\",\n  \"options\",\n  \"param\",\n  \"patch\",\n  \"post\",\n  \"propfind\",\n  \"propatch\",\n  \"purge\",\n  \"put\",\n  \"report\",\n  \"search\",\n  \"subscribe\",\n  \"trace\",\n  \"unlock\",\n  \"unsuscribe\"\n];\n","import {HTTP_METHODS} from \"../constants\";\n\nexport function mapUseOptions(args: any[]) {\n  let method: string | undefined = undefined;\n  let path: string | RegExp | undefined = undefined;\n\n  const middlewares = args.filter((arg: any) => {\n    if (typeof arg === \"string\" && HTTP_METHODS.includes(arg)) {\n      method = arg;\n\n      return false;\n    }\n\n    if (typeof arg === \"string\" || arg instanceof RegExp) {\n      path = arg ? arg : \"/\";\n\n      return false;\n    }\n\n    return !!arg;\n  });\n\n  return {\n    path,\n    method,\n    middlewares\n  };\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn, OperationMethods, OperationPath} from \"@tsed/schema\";\nimport {mapUseOptions} from \"../utils/mapUseOptions\";\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @Use(Middleware1)\n * export class Ctrl {\n *\n *    @Get('/')\n *    @Use(Middleware2)\n *    get() { }\n * }\n *\n * ```\n *\n * @returns {Function}\n * @param args\n * @decorator\n * @operation\n */\nexport function Use(...args: any[]): Function {\n  return JsonEntityFn((entity, parameters) => {\n    switch (entity.decoratorType) {\n      case DecoratorTypes.METHOD:\n        const options = mapUseOptions(args);\n\n        options.path && OperationPath(options.method || OperationMethods.CUSTOM, options.path)(...parameters);\n\n        entity.use(args);\n        break;\n\n      case DecoratorTypes.CLASS:\n        entity.store.merge(\"middlewares\", {\n          use: args\n        });\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Use, parameters);\n    }\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"@tsed/schema\";\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @UseAfter(Middleware1)\n * export class Ctrl {\n *\n *    @Get('/')\n *    @UseAfter(Middleware2)\n *    get() { }\n * }\n * ```\n *\n * @returns {function(any, any, any): *}\n * @param args\n * @decorator\n * @operation\n */\nexport function UseAfter(...args: any[]): Function {\n  return JsonEntityFn((entity, parameters) => {\n    switch (entity.decoratorType) {\n      case DecoratorTypes.METHOD:\n        const endpoint = entity;\n        endpoint.afterMiddlewares = args.concat(endpoint.afterMiddlewares);\n\n        break;\n\n      case DecoratorTypes.CLASS:\n        const middlewares = entity.store.get(\"middlewares\") || {};\n\n        entity.store.set(\"middlewares\", {\n          ...middlewares,\n          useAfter: [...args, ...(middlewares.useAfter || [])]\n        });\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(UseAfter, parameters);\n    }\n  });\n}\n","import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn} from \"@tsed/schema\";\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @UseBefore(Middleware1) // called only one time before all endpoint\n * export class Ctrl {\n *\n *    @Get('/')\n *    @UseBefore(Middleware2)\n *    get() { }\n * }\n * ```\n *\n * @returns {function(any, any, any): *}\n * @param args\n * @decorator\n * @operation\n */\nexport function UseBefore(...args: any[]): Function {\n  return JsonEntityFn((entity, parameters) => {\n    switch (entity.decoratorType) {\n      case DecoratorTypes.METHOD:\n        entity.beforeMiddlewares = args.concat(entity.beforeMiddlewares);\n\n        break;\n\n      case DecoratorTypes.CLASS:\n        const middlewares = entity.store.get(\"middlewares\") || {};\n\n        entity.store.set(\"middlewares\", {\n          ...middlewares,\n          useBefore: [...args, ...(middlewares.useBefore || [])]\n        });\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(UseBefore, parameters);\n    }\n  });\n}\n","import {\n  decorateMethodsOf,\n  DecoratorParameters,\n  decoratorTypeOf,\n  DecoratorTypes,\n  Store,\n  StoreFn,\n  Type,\n  UnsupportedDecoratorType,\n  useDecorators\n} from \"@tsed/core\";\nimport {AuthOptions, IAuthOptions} from \"./authOptions\";\nimport {UseBefore} from \"./useBefore\";\n\n/**\n * Use custom authentication strategy on your endpoint.\n *\n * ```typescript\n * @Controller('/mypath')\n * @UseAuth(MyAuthStrategy)\n * class MyCtrl {\n *\n *   @Get('/')\n *   @UseAuth(MyAuthStrategy, {role: 'admin'})\n *   public getResource(){}\n * }\n * ```\n *\n * @param guardAuth {Type<any>} A middleware which implement a custom auth strategy\n * @param options {Object} Object passed to the customer auth strategy\n * @returns {Function}\n * @decorator\n * @operation\n */\nexport function UseAuth(guardAuth: Type<any>, options: IAuthOptions = {}): Function {\n  return <T>(...args: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.METHOD:\n        return useDecorators(\n          StoreFn((store: Store) => {\n            if (!store.has(guardAuth)) {\n              return UseBefore(guardAuth);\n            }\n          }),\n          AuthOptions(guardAuth, options)\n        )(...args);\n\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], UseAuth(guardAuth, options));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(UseAuth, args);\n    }\n  };\n}\n","import {decorateMethodsOf, DecoratorParameters, decoratorTypeOf, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {UseBefore} from \"./useBefore\";\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @UseBeforeEach(Middleware1)  // Called before each endpoint\n * export class Ctrl {\n *\n *    @Get('/')\n *    get() { }\n * }\n *\n * ```\n *\n * @returns {Function}\n * @param args\n * @decorator\n * @operation\n */\nexport function UseBeforeEach(...args: any[]): Function {\n  return <T>(...decoratorArgs: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (decoratorTypeOf(decoratorArgs)) {\n      case DecoratorTypes.METHOD:\n        return UseBefore(...args)(...decoratorArgs);\n\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(decoratorArgs[0], UseBefore(...args));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(UseBeforeEach, decoratorArgs);\n    }\n  };\n}\n","import {isFunction} from \"@tsed/core\";\nimport {PlatformMiddlewareLoadingOptions} from \"../domain/PlatformMiddlewareSettings\";\n\nexport function getMiddlewaresForHook(hook: string, settings: TsED.Configuration, defaultHook = \"\") {\n  const {env, middlewares = []} = settings;\n\n  return middlewares\n    .map<PlatformMiddlewareLoadingOptions>((middleware) => {\n      return isFunction(middleware)\n        ? {\n            env,\n            hook: defaultHook,\n            use: middleware\n          }\n        : {\n            env,\n            hook: defaultHook,\n            ...middleware\n          };\n    })\n    .filter((options) => {\n      return options.use && options.env === env && options.hook === hook;\n    });\n}\n"],"names":["Middleware","Injectable","type","ProviderType","MIDDLEWARE","AuthOptions","guardAuth","options","args","decoratorTypeOf","DecoratorTypes","METHOD","JsonEntityFn","entity","store","responses","merge","security","concat","forEach","Object","entries","name","scopes","operation","addSecurityScopes","CLASS","decorateMethodsOf","UnsupportedDecoratorType","HTTP_METHODS","mapUseOptions","method","undefined","path","middlewares","filter","arg","includes","RegExp","Use","parameters","decoratorType","OperationPath","OperationMethods","CUSTOM","use","UseAfter","endpoint","afterMiddlewares","get","set","useAfter","UseBefore","beforeMiddlewares","useBefore","UseAuth","useDecorators","StoreFn","has","UseBeforeEach","decoratorArgs","getMiddlewaresForHook","hook","settings","defaultHook","env","map","middleware","isFunction"],"mappings":";;;;AAEA;;;;;;;SAMgBA;AACd,SAAOC,aAAU,CAAC;AAChBC,IAAAA,IAAI,EAAEC,eAAY,CAACC;AADH,GAAD,CAAjB;AAGD;;ACsBD;;;;;;;;;;;;;;;;;;;;;;SAqBgBC,YAAYC,WAAsBC,UAAwB;AACxE,SAAO,CAAI,GAAGC,IAAP;AACL,YAAQC,oBAAe,CAACD,IAAD,CAAvB;AACE,WAAKE,mBAAc,CAACC,MAApB;AACE,eAAOC,mBAAY,CAAEC,MAAD;AAClB,gBAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;;AAEA,cAAIP,OAAO,CAACQ,SAAZ,EAAuB;AACrB,kBAAM;AAACA,cAAAA;AAAD,gBAAcR,OAApB;AACAO,YAAAA,KAAK,CAACE,KAAN,CAAY,WAAZ,EAAyBD,SAAzB,EAAoC,IAApC;AACA,mBAAOR,OAAO,CAACQ,SAAf;AACD;;AAED,cAAIR,OAAO,CAACU,QAAZ,EAAsB;AACpB,kBAAM;AAACA,cAAAA;AAAD,gBAAaV,OAAnB;AACA,eAAGW,MAAH,CAAUD,QAAV,EAA2BE,OAA3B,CAAoCF,QAAD;AACjCG,cAAAA,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBE,OAAzB,CAAiC,CAAC,CAACG,IAAD,EAAOC,MAAP,CAAD;AAC/BV,gBAAAA,MAAM,CAACW,SAAP,CAAkBC,iBAAlB,CAAoCH,IAApC,EAA0CC,MAA1C;AACD,eAFD;AAGD,aAJD;AAMA,mBAAOhB,OAAO,CAACU,QAAf;AACD;;AAEDH,UAAAA,KAAK,CAACE,KAAN,CAAYV,SAAZ,EAAuBC,OAAvB,EAAgC,IAAhC;AACD,SArBkB,CAAZ,CAqBJ,GAAIC,IArBA,CAAP;;AAuBF,WAAKE,mBAAc,CAACgB,KAApB;AACEC,QAAAA,sBAAiB,CAACnB,IAAI,CAAC,CAAD,CAAL,EAAUH,WAAW,CAACC,SAAD,EAAYC,OAAZ,CAArB,CAAjB;AACA;;AAEF;AACE,cAAM,IAAIqB,6BAAJ,CAA6BvB,WAA7B,EAA0CG,IAA1C,CAAN;AA9BJ;AAgCD,GAjCD;AAkCD;;AC1FM,MAAMqB,YAAY,GAAG,CAC1B,KAD0B,EAE1B,UAF0B,EAG1B,SAH0B,EAI1B,MAJ0B,EAK1B,QAL0B,EAM1B,KAN0B,EAO1B,MAP0B,EAQ1B,MAR0B,EAS1B,OAT0B,EAU1B,YAV0B,EAW1B,OAX0B,EAY1B,MAZ0B,EAa1B,UAb0B,EAc1B,QAd0B,EAe1B,SAf0B,EAgB1B,OAhB0B,EAiB1B,OAjB0B,EAkB1B,MAlB0B,EAmB1B,UAnB0B,EAoB1B,UApB0B,EAqB1B,OArB0B,EAsB1B,KAtB0B,EAuB1B,QAvB0B,EAwB1B,QAxB0B,EAyB1B,WAzB0B,EA0B1B,OA1B0B,EA2B1B,QA3B0B,EA4B1B,YA5B0B,CAArB;;SCESC,cAActB;AAC5B,MAAIuB,MAAM,GAAuBC,SAAjC;AACA,MAAIC,IAAI,GAAgCD,SAAxC;AAEA,QAAME,WAAW,GAAG1B,IAAI,CAAC2B,MAAL,CAAaC,GAAD;AAC9B,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BP,YAAY,CAACQ,QAAb,CAAsBD,GAAtB,CAA/B,EAA2D;AACzDL,MAAAA,MAAM,GAAGK,GAAT;AAEA,aAAO,KAAP;AACD;;AAED,QAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,YAAYE,MAA9C,EAAsD;AACpDL,MAAAA,IAAI,GAAGG,GAAG,GAAGA,GAAH,GAAS,GAAnB;AAEA,aAAO,KAAP;AACD;;AAED,WAAO,CAAC,CAACA,GAAT;AACD,GAdmB,CAApB;AAgBA,SAAO;AACLH,IAAAA,IADK;AAELF,IAAAA,MAFK;AAGLG,IAAAA;AAHK,GAAP;AAKD;;ACvBD;;;;;;;;;;;;;;;;;;;;;;SAqBgBK,IAAI,GAAG/B;AACrB,SAAOI,mBAAY,CAAC,CAACC,MAAD,EAAS2B,UAAT;AAClB,YAAQ3B,MAAM,CAAC4B,aAAf;AACE,WAAK/B,mBAAc,CAACC,MAApB;AACE,cAAMJ,OAAO,GAAGuB,aAAa,CAACtB,IAAD,CAA7B;AAEAD,QAAAA,OAAO,CAAC0B,IAAR,IAAgBS,oBAAa,CAACnC,OAAO,CAACwB,MAAR,IAAkBY,uBAAgB,CAACC,MAApC,EAA4CrC,OAAO,CAAC0B,IAApD,CAAb,CAAuE,GAAGO,UAA1E,CAAhB;AAEA3B,QAAAA,MAAM,CAACgC,GAAP,CAAWrC,IAAX;AACA;;AAEF,WAAKE,mBAAc,CAACgB,KAApB;AACEb,QAAAA,MAAM,CAACC,KAAP,CAAaE,KAAb,CAAmB,aAAnB,EAAkC;AAChC6B,UAAAA,GAAG,EAAErC;AAD2B,SAAlC;AAGA;;AAEF;AACE,cAAM,IAAIoB,6BAAJ,CAA6BW,GAA7B,EAAkCC,UAAlC,CAAN;AAhBJ;AAkBD,GAnBkB,CAAnB;AAoBD;;;;;;;;;;;;;;;;;;;;AC3CD;;;;;;;;;;;;;;;;;;;;;SAoBgBM,SAAS,GAAGtC;AAC1B,SAAOI,mBAAY,CAAC,CAACC,MAAD,EAAS2B,UAAT;AAClB,YAAQ3B,MAAM,CAAC4B,aAAf;AACE,WAAK/B,mBAAc,CAACC,MAApB;AACE,cAAMoC,QAAQ,GAAGlC,MAAjB;AACAkC,QAAAA,QAAQ,CAACC,gBAAT,GAA4BxC,IAAI,CAACU,MAAL,CAAY6B,QAAQ,CAACC,gBAArB,CAA5B;AAEA;;AAEF,WAAKtC,mBAAc,CAACgB,KAApB;AACE,cAAMQ,WAAW,GAAGrB,MAAM,CAACC,KAAP,CAAamC,GAAb,CAAiB,aAAjB,KAAmC,EAAvD;AAEApC,QAAAA,MAAM,CAACC,KAAP,CAAaoC,GAAb,CAAiB,aAAjB,eACKhB,WADL;AAEEiB,UAAAA,QAAQ,EAAE,CAAC,GAAG3C,IAAJ,EAAU,IAAI0B,WAAW,CAACiB,QAAZ,IAAwB,EAA5B,CAAV;AAFZ;AAIA;;AAEF;AACE,cAAM,IAAIvB,6BAAJ,CAA6BkB,QAA7B,EAAuCN,UAAvC,CAAN;AAjBJ;AAmBD,GApBkB,CAAnB;AAqBD;;AC1CD;;;;;;;;;;;;;;;;;;;;;SAoBgBY,UAAU,GAAG5C;AAC3B,SAAOI,mBAAY,CAAC,CAACC,MAAD,EAAS2B,UAAT;AAClB,YAAQ3B,MAAM,CAAC4B,aAAf;AACE,WAAK/B,mBAAc,CAACC,MAApB;AACEE,QAAAA,MAAM,CAACwC,iBAAP,GAA2B7C,IAAI,CAACU,MAAL,CAAYL,MAAM,CAACwC,iBAAnB,CAA3B;AAEA;;AAEF,WAAK3C,mBAAc,CAACgB,KAApB;AACE,cAAMQ,WAAW,GAAGrB,MAAM,CAACC,KAAP,CAAamC,GAAb,CAAiB,aAAjB,KAAmC,EAAvD;AAEApC,QAAAA,MAAM,CAACC,KAAP,CAAaoC,GAAb,CAAiB,aAAjB,eACKhB,WADL;AAEEoB,UAAAA,SAAS,EAAE,CAAC,GAAG9C,IAAJ,EAAU,IAAI0B,WAAW,CAACoB,SAAZ,IAAyB,EAA7B,CAAV;AAFb;AAIA;;AAEF;AACE,cAAM,IAAI1B,6BAAJ,CAA6BwB,SAA7B,EAAwCZ,UAAxC,CAAN;AAhBJ;AAkBD,GAnBkB,CAAnB;AAoBD;;AC9BD;;;;;;;;;;;;;;;;;;;;;SAoBgBe,QAAQjD,WAAsBC,UAAwB;AACpE,SAAO,CAAI,GAAGC,IAAP;AACL,YAAQC,oBAAe,CAACD,IAAD,CAAvB;AACE,WAAKE,mBAAc,CAACC,MAApB;AACE,eAAO6C,kBAAa,CAClBC,YAAO,CAAE3C,KAAD;AACN,cAAI,CAACA,KAAK,CAAC4C,GAAN,CAAUpD,SAAV,CAAL,EAA2B;AACzB,mBAAO8C,SAAS,CAAC9C,SAAD,CAAhB;AACD;AACF,SAJM,CADW,EAMlBD,WAAW,CAACC,SAAD,EAAYC,OAAZ,CANO,CAAb,CAOL,GAAGC,IAPE,CAAP;;AASF,WAAKE,mBAAc,CAACgB,KAApB;AACEC,QAAAA,sBAAiB,CAACnB,IAAI,CAAC,CAAD,CAAL,EAAU+C,OAAO,CAACjD,SAAD,EAAYC,OAAZ,CAAjB,CAAjB;AACA;;AAEF;AACE,cAAM,IAAIqB,6BAAJ,CAA6B2B,OAA7B,EAAsC/C,IAAtC,CAAN;AAhBJ;AAkBD,GAnBD;AAoBD;;ACpDD;;;;;;;;;;;;;;;;;;;;;SAoBgBmD,cAAc,GAAGnD;AAC/B,SAAO,CAAI,GAAGoD,aAAP;AACL,YAAQnD,oBAAe,CAACmD,aAAD,CAAvB;AACE,WAAKlD,mBAAc,CAACC,MAApB;AACE,eAAOyC,SAAS,CAAC,GAAG5C,IAAJ,CAAT,CAAmB,GAAGoD,aAAtB,CAAP;;AAEF,WAAKlD,mBAAc,CAACgB,KAApB;AACEC,QAAAA,sBAAiB,CAACiC,aAAa,CAAC,CAAD,CAAd,EAAmBR,SAAS,CAAC,GAAG5C,IAAJ,CAA5B,CAAjB;AACA;;AAEF;AACE,cAAM,IAAIoB,6BAAJ,CAA6B+B,aAA7B,EAA4CC,aAA5C,CAAN;AATJ;AAWD,GAZD;AAaD;;SClCeC,sBAAsBC,MAAcC,UAA8BC,WAAW,GAAG;AAC9F,QAAM;AAACC,IAAAA,GAAD;AAAM/B,IAAAA,WAAW,GAAG;AAApB,MAA0B6B,QAAhC;AAEA,SAAO7B,WAAW,CACfgC,GADI,CACmCC,UAAD;AACrC,WAAOC,eAAU,CAACD,UAAD,CAAV,GACH;AACEF,MAAAA,GADF;AAEEH,MAAAA,IAAI,EAAEE,WAFR;AAGEnB,MAAAA,GAAG,EAAEsB;AAHP,KADG;AAODF,MAAAA,GAPC;AAQDH,MAAAA,IAAI,EAAEE;AARL,OASEG,UATF,CAAP;AAWD,GAbI,EAcJhC,MAdI,CAcI5B,OAAD;AACN,WAAOA,OAAO,CAACsC,GAAR,IAAetC,OAAO,CAAC0D,GAAR,KAAgBA,GAA/B,IAAsC1D,OAAO,CAACuD,IAAR,KAAiBA,IAA9D;AACD,GAhBI,CAAP;AAiBD;;;;;;;;;;;"}