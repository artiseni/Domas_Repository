{"version":3,"file":"index.js","sources":["../src/errors/AjvValidationError.ts","../src/utils/getPath.ts","../src/utils/defaultErrorFormatter.ts","../src/services/Ajv.ts","../src/services/AjvService.ts","../src/decorators/keyword.ts","../src/decorators/formats.ts"],"sourcesContent":["import {BadRequest} from \"@tsed/exceptions\";\n\nexport class AjvValidationError extends BadRequest {\n  public name: string = \"AJV_VALIDATION_ERROR\";\n  public errors: any[];\n\n  constructor(message: string, errors: any[] = []) {\n    super(message);\n    this.errors = errors;\n  }\n}\n","import {getValue} from \"@tsed/core\";\n\nexport function getPath(error: any) {\n  return getValue(error, \"dataPath\", getValue(error, \"instancePath\", \"\")).replace(/\\//gi, \".\");\n}\n","import {AjvErrorObject} from \"../interfaces/IAjvSettings\";\nimport {getPath} from \"./getPath\";\n\nexport function defaultErrorFormatter(error: AjvErrorObject & {dataPath: string}) {\n  const value = JSON.stringify(error.data === undefined ? \"undefined\" : error.data);\n  const join = (list: any[]): string => list.filter(Boolean).join(\"\").trim();\n\n  error.dataPath = getPath(error);\n\n  const [, indexPath, ...paths] = error.dataPath.split(\".\");\n  const deepPaths = paths.length ? \".\" + paths.join(\".\") : \"\";\n\n  if (error.collectionName) {\n    switch (error.collectionName) {\n      case \"Array\":\n        return join([`${error.modelName || \"\"}[${indexPath}]${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n      case \"Map\":\n        return join([`Map<${indexPath}, ${error.modelName || \"\"}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n      case \"Set\":\n        return join([`Set<${indexPath}, ${error.modelName || \"\"}>${deepPaths}`, ` ${error.message}. Given value: ${value}`]);\n    }\n  }\n\n  return join([!error.modelName && \"Value\", `${error.modelName || \"\"}`, error.dataPath, ` ${error.message}. Given value: ${value}`]);\n}\n","import {cleanObject} from \"@tsed/core\";\nimport {Configuration, InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport Ajv, {Format, KeywordDefinition, Vocabulary} from \"ajv\";\nimport AjvFormats from \"ajv-formats\";\nimport {FormatsMethods} from \"../interfaces/FormatsMethods\";\nimport {IAjvSettings} from \"../interfaces/IAjvSettings\";\n\nfunction getHandler(key: string, service: any) {\n  if (service[key]) {\n    return service[key].bind(service);\n  }\n}\n\nfunction getKeywordProviders(injector: InjectorService) {\n  return injector.getProviders(\"ajv:keyword\");\n}\n\nfunction bindKeywords(injector: InjectorService): Vocabulary {\n  return getKeywordProviders(injector).map((provider) => {\n    const options = provider.store.get<Omit<KeywordDefinition, \"compile\">>(\"ajv:keyword\", {})!;\n    const service = injector.invoke(provider.token);\n\n    return <KeywordDefinition>cleanObject({\n      ...options,\n      validate: getHandler(\"validate\", service),\n      compile: getHandler(\"compile\", service),\n      code: getHandler(\"code\", service),\n      macro: getHandler(\"macro\", service)\n    });\n  });\n}\n\nfunction getFormatsProviders(injector: InjectorService) {\n  return injector.getProviders(\"ajv:formats\");\n}\n\nfunction getFormats(injector: InjectorService): {name: string; options: Format}[] {\n  return getFormatsProviders(injector).map((provider) => {\n    const {name, options} = provider.store.get<any>(\"ajv:formats\", {})!;\n    const service = injector.invoke<FormatsMethods<any>>(provider.token);\n\n    return {\n      name,\n      options: {\n        ...options,\n        validate: service.validate.bind(service),\n        compare: service.compare?.bind(service)\n      }\n    };\n  });\n}\n\nregisterProvider({\n  provide: Ajv,\n  deps: [Configuration, InjectorService],\n  scope: ProviderScope.SINGLETON,\n  useFactory(configuration: Configuration, injector: InjectorService) {\n    const {errorFormatter, keywords = [], ...props} = configuration.get<IAjvSettings>(\"ajv\") || {};\n    const options = {\n      verbose: false,\n      coerceTypes: true,\n      strict: false,\n      keywords: [...keywords, ...bindKeywords(injector)],\n      ...props\n    };\n\n    const ajv = new Ajv(options);\n\n    AjvFormats(ajv as any);\n\n    getFormats(injector).forEach(({name, options}) => {\n      ajv.addFormat(name, options);\n    });\n\n    return ajv;\n  }\n});\n","import {deepClone, getValue, nameOf, prototypeOf, setValue, Type} from \"@tsed/core\";\nimport {Constant, Inject, Injectable} from \"@tsed/di\";\nimport {getJsonSchema, JsonEntityStore, JsonSchema, JsonSchemaObject} from \"@tsed/schema\";\nimport Ajv, {ErrorObject} from \"ajv\";\nimport {AjvValidationError} from \"../errors/AjvValidationError\";\nimport {AjvErrorObject, ErrorFormatter} from \"../interfaces/IAjvSettings\";\nimport {defaultErrorFormatter} from \"../utils/defaultErrorFormatter\";\nimport \"./Ajv\";\nimport {getPath} from \"../utils/getPath\";\n\nexport interface AjvValidateOptions extends Record<string, any> {\n  schema?: JsonSchema | Partial<JsonSchemaObject>;\n  type?: Type<any> | any;\n  collectionType?: Type<any> | any;\n}\n\n@Injectable()\nexport class AjvService {\n  @Constant(\"ajv.errorFormatter\", defaultErrorFormatter)\n  protected errorFormatter: ErrorFormatter;\n\n  @Inject()\n  protected ajv: Ajv;\n\n  async validate(value: any, options: AjvValidateOptions | JsonSchema): Promise<any> {\n    let {schema, type, collectionType, ...additionalOptions} = this.mapOptions(options);\n\n    schema = schema || getJsonSchema(type, {...additionalOptions, customKeys: true});\n\n    if (schema) {\n      const localValue = deepClone(value);\n      const valid = await this.ajv.validate(schema as any, localValue);\n      if (!valid) {\n        throw this.mapErrors(this.ajv.errors || [], {\n          type,\n          collectionType,\n          async: true,\n          value: localValue\n        });\n      }\n    }\n\n    return value;\n  }\n\n  protected mapOptions(options: AjvValidateOptions | JsonSchema): AjvValidateOptions {\n    if (options instanceof JsonSchema) {\n      return {\n        schema: options.toJSON({customKeys: true})\n      };\n    }\n\n    return options;\n  }\n\n  protected mapErrors(errors: ErrorObject[], options: any) {\n    const {type, collectionType, value} = options;\n\n    const message = errors\n      .map((error: AjvErrorObject) => {\n        if (collectionType) {\n          error.collectionName = nameOf(collectionType);\n        }\n\n        const dataPath = getPath(error);\n\n        if (!error.data) {\n          if (dataPath) {\n            error.data = getValue(value, dataPath.replace(/^\\./, \"\"));\n          } else if (error.schemaPath !== \"#/required\") {\n            error.data = value;\n          }\n        }\n\n        if (dataPath && dataPath.match(/pwd|password|mdp|secret/)) {\n          error.data = \"[REDACTED]\";\n        }\n\n        if (type) {\n          error.modelName = nameOf(type);\n          error.message = this.mapClassError(error, type);\n        }\n\n        return this.errorFormatter.call(this, error, {});\n      })\n      .join(\"\\n\");\n\n    return new AjvValidationError(message, errors);\n  }\n\n  protected mapClassError(error: AjvErrorObject, targetType: Type<any>) {\n    const propertyKey = getValue(error, \"params.missingProperty\");\n\n    if (propertyKey) {\n      const store = JsonEntityStore.from<JsonEntityStore>(prototypeOf(targetType), propertyKey);\n\n      if (store) {\n        setValue(error, \"params.missingProperty\", store.name || propertyKey);\n\n        return error.message!.replace(`'${propertyKey}'`, `'${store.name || propertyKey}'`);\n      }\n    }\n\n    return error.message;\n  }\n}\n","import {StoreSet, useDecorators} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {JsonSchema} from \"@tsed/schema\";\nimport {AnySchemaObject, KeywordDefinition} from \"ajv\";\n\nexport type KeywordOptions = Partial<Omit<KeywordDefinition, \"metaSchema\">> & {\n  metaSchema?: AnySchemaObject | JsonSchema;\n};\n\n/**\n * Create new keyword custom validator\n * @param options\n * @decorator\n * @ajv\n */\nexport function Keyword(options: KeywordOptions): ClassDecorator {\n  return useDecorators(\n    Injectable({\n      type: \"ajv:keyword\"\n    }),\n    StoreSet(\"ajv:keyword\", {\n      ...options,\n      metaSchema: options.metaSchema && options.metaSchema.toJSON ? options.metaSchema.toJSON() : options.metaSchema\n    })\n  );\n}\n","import {StoreSet, useDecorators} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {JsonSchema} from \"@tsed/schema\";\nimport {AnySchemaObject, AsyncFormatDefinition, FormatDefinition, KeywordDefinition} from \"ajv\";\nexport type FormatsOptions = Omit<FormatDefinition<any>, \"validate\" | \"compare\"> | Omit<AsyncFormatDefinition<any>, \"validate\" | \"compare\">;\n/**\n * Create a new custom formats validator\n * @param name\n * @param options\n * @decorator\n * @ajv\n */\nexport function Formats(name: string, options: FormatsOptions = {}): ClassDecorator {\n  return useDecorators(\n    Injectable({\n      type: \"ajv:formats\"\n    }),\n    StoreSet(\"ajv:formats\", {\n      name,\n      options\n    })\n  );\n}\n"],"names":["AjvValidationError","BadRequest","constructor","message","errors","getPath","error","getValue","replace","defaultErrorFormatter","value","JSON","stringify","data","undefined","join","list","filter","Boolean","trim","dataPath","indexPath","paths","split","deepPaths","length","collectionName","modelName","getHandler","key","service","bind","getKeywordProviders","injector","getProviders","bindKeywords","map","provider","options","store","get","invoke","token","cleanObject","validate","compile","code","macro","getFormatsProviders","getFormats","name","compare","registerProvider","provide","Ajv","deps","Configuration","InjectorService","scope","ProviderScope","SINGLETON","useFactory","configuration","keywords","props","verbose","coerceTypes","strict","ajv","AjvFormats","forEach","addFormat","AjvService","mapOptions","schema","type","collectionType","additionalOptions","getJsonSchema","customKeys","localValue","deepClone","valid","mapErrors","async","JsonSchema","toJSON","nameOf","schemaPath","match","mapClassError","errorFormatter","call","targetType","propertyKey","JsonEntityStore","from","prototypeOf","setValue","__decorate","Constant","Inject","Injectable","Keyword","useDecorators","StoreSet","metaSchema","Formats"],"mappings":"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"}