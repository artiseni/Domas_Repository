{"version":3,"file":"index.js","sources":["../src/domain/ResponseFiltersContainer.ts","../src/decorators/responseFilter.ts","../src/utils/getContentType.ts","../src/services/PlatformResponseFilter.ts"],"sourcesContent":["import {Type} from \"@tsed/core\";\nimport {ResponseFilterMethods} from \"../interfaces/ResponseFilterMethods\";\n/**\n * @ignore\n */\nexport type ResponseFilterKey = \"*/*\" | \"application/json\" | \"text/html\" | \"plain/text\" | string;\n/**\n * @ignore\n */\n// tslint:disable-next-line:variable-name\nexport const ResponseFiltersContainer = new Map<ResponseFilterKey, Type<ResponseFilterMethods>>();\n/**\n * @ignore\n */\nexport function registerResponseFilter(type: ResponseFilterKey, token: Type<ResponseFilterMethods>) {\n  ResponseFiltersContainer.set(type, token);\n}\n","import {Type} from \"@tsed/core\";\nimport {registerProvider} from \"@tsed/di\";\nimport {registerResponseFilter, ResponseFilterKey} from \"../domain/ResponseFiltersContainer\";\n\n/**\n * Register a response filter service.\n * @param contentTypes\n * @decorator\n */\nexport function ResponseFilter(...contentTypes: ResponseFilterKey[]): ClassDecorator {\n  return <T = any>(target: T): void | T => {\n    contentTypes.forEach((contentType) => {\n      registerResponseFilter(contentType, target as any);\n    });\n    registerProvider({\n      provide: target,\n      useClass: (target as unknown) as Type<any>\n    });\n  };\n}\n","import {isObject} from \"@tsed/core\";\nimport type {BaseContext} from \"@tsed/di\";\nexport const ANY_CONTENT_TYPE = \"*/*\";\n/**\n * @ignore\n */\nexport function getContentType(data: any, ctx: BaseContext) {\n  const {endpoint, response} = ctx;\n  const {operation} = endpoint;\n\n  const contentType = response.getContentType() || operation.getContentTypeOf(response.statusCode) || \"\";\n\n  if (contentType && contentType !== ANY_CONTENT_TYPE) {\n    if (contentType === \"application/json\") {\n      if (isObject(data)) {\n        return contentType;\n      }\n    } else {\n      return contentType;\n    }\n  }\n\n  if (typeof data === \"string\" && endpoint.view) {\n    return \"text/html\";\n  }\n}\n","import {Type} from \"@tsed/core\";\nimport {BaseContext, Constant, Inject, Injectable, InjectorService} from \"@tsed/di\";\nimport {ResponseFilterKey, ResponseFiltersContainer} from \"../domain/ResponseFiltersContainer\";\nimport {ResponseFilterMethods} from \"../interfaces/ResponseFilterMethods\";\nimport {ANY_CONTENT_TYPE, getContentType} from \"../utils/getContentType\";\n\n/**\n * @platform\n */\n@Injectable()\nexport class PlatformResponseFilter {\n  types: Map<ResponseFilterKey, ResponseFilterMethods> = new Map();\n\n  @Inject()\n  injector: InjectorService;\n\n  @Constant(\"responseFilters\", [])\n  protected responseFilters: Type<ResponseFilterMethods>[];\n\n  get contentTypes(): ResponseFilterKey[] {\n    return [...this.types.keys()];\n  }\n\n  $onInit() {\n    ResponseFiltersContainer.forEach((token, type) => {\n      if (this.responseFilters.includes(token)) {\n        this.types.set(type, this.injector.get(token)!);\n      }\n    });\n  }\n\n  getBestContentType(data: any, ctx: BaseContext) {\n    const contentType = getContentType(data, ctx);\n\n    if (ctx.request.get(\"Accept\")) {\n      const bestContentType = ctx.request.accepts([contentType].concat(this.contentTypes).filter(Boolean));\n\n      if (bestContentType) {\n        return [].concat(bestContentType as any).filter((type) => type !== \"*/*\")[0];\n      }\n    }\n\n    return contentType;\n  }\n\n  transform(data: unknown, ctx: BaseContext) {\n    const {response} = ctx;\n    const bestContentType = this.getBestContentType(data, ctx);\n\n    bestContentType && response.contentType(bestContentType);\n\n    if (this.types.has(bestContentType)) {\n      return this.types.get(bestContentType)!.transform(data, ctx);\n    }\n\n    if (this.types.has(ANY_CONTENT_TYPE)) {\n      return this.types.get(ANY_CONTENT_TYPE)!.transform(data, ctx);\n    }\n\n    return data;\n  }\n}\n"],"names":["ResponseFiltersContainer","Map","registerResponseFilter","type","token","set","ResponseFilter","contentTypes","target","forEach","contentType","registerProvider","provide","useClass","ANY_CONTENT_TYPE","getContentType","data","ctx","endpoint","response","operation","getContentTypeOf","statusCode","isObject","view","PlatformResponseFilter","constructor","types","keys","$onInit","responseFilters","includes","injector","get","getBestContentType","request","bestContentType","accepts","concat","filter","Boolean","transform","has","__decorate","Inject","InjectorService","Constant","Injectable"],"mappings":"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"}