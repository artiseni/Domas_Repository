{"version":3,"file":"index.modern.js","sources":["../src/decorators/view.ts","../src/domain/PlatformViewsSettings.ts","../src/services/PlatformViews.ts","../src/errors/TemplateRenderError.ts","../src/utils/renderView.ts"],"sourcesContent":["import {JsonEntityFn} from \"@tsed/schema\";\n\n/**\n * Use a view and sends the rendered HTML string to the client. Optional parameter:\n *\n * * viewOptions, an object whose properties define local variables for the view.\n *\n * The view argument is a string that is the file path of the view file to render.\n * This can be an absolute path, or a path relative to the views setting.\n * If the path does not contain a file extension, then the view engine setting determines the file extension.\n * If the path does contain a file extension, then Express will load the module for the specified template engine (via require())\n * and render it using the loaded moduleâ€™s __express function.\n *\n * For more information, see [Using template engines with Express](http://expressjs.com/guide/using-template-engines.html).\n *\n * > NOTE: The view argument performs file system operations like reading a file from disk and evaluating Node.js modules,\n * and as so for security reasons should not contain input from the end-user.\n *\n * @param path Relative path to the view file.\n * @param options Additional options\n * @decorator\n * @operation\n * @response\n */\nexport function View(path: string, options?: Object): MethodDecorator {\n  return JsonEntityFn((entity) => {\n    entity.view = {path, options};\n  });\n}\n","import {BaseContext} from \"@tsed/di\";\n\nexport const PLATFORM_VIEWS_EXTENSIONS = {\n  atpl: \"atpl\",\n  bracket: \"bracket\",\n  dot: \"dot\",\n  dust: \"dust\",\n  ect: \"ect\",\n  ejs: \"ejs\",\n  haml: \"haml\",\n  \"haml-coffee\": \"haml-coffee\",\n  hamlet: \"hamlet\",\n  hbs: \"handlebars\",\n  handlebars: \"handlebars\",\n  hogan: \"hogan\",\n  htmling: \"htmling\",\n  jazz: \"jazz\",\n  jqtpl: \"jqtpl\",\n  just: \"just\",\n  kernel: \"kernel\",\n  liquid: \"liquid\",\n  liquor: \"liquor\",\n  lodash: \"lodash\",\n  mote: \"mote\",\n  mustache: \"mustache\",\n  nunjucks: \"nunjucks\",\n  plates: \"plates\",\n  pug: \"pug\",\n  qejs: \"qejs\",\n  ractive: \"ractive\",\n  razor: \"razor\",\n  jsx: \"react\",\n  slm: \"slm\",\n  squirelly: \"squirelly\",\n  swig: \"swig\",\n  teacup: \"teacup\",\n  templayed: \"templayed\",\n  toffee: \"toffee\",\n  twig: \"twig\",\n  underscore: \"underscore\",\n  vash: \"vash\",\n  velocityjs: \"velocityjs\",\n  walrus: \"walrus\",\n  whiskers: \"whiskers\"\n};\n\nexport type PlatformViewsExtensionsTypes = Record<string, string>;\n\nexport interface PlatformViewsEngineOptions extends Record<string, unknown> {\n  requires?: any;\n}\n\nexport interface PlatformRenderOptions extends Record<string, unknown> {\n  $ctx: BaseContext;\n}\n\nexport interface PlatformViewEngine {\n  options: PlatformViewsEngineOptions;\n\n  render(path: string, options: PlatformRenderOptions): Promise<string>;\n}\n\nexport interface PlatformViewsSettings {\n  /**\n   * Views directory.\n   */\n  root?: string;\n  /**\n   * Enable cache. Ts.ED enable cache in PRODUCTION profile by default.\n   */\n  cache?: boolean;\n  /**\n   * Provide extensions mapping to match the expected engines.\n   */\n  extensions?: Partial<PlatformViewsExtensionsTypes>;\n  /**\n   * Default view engine extension.\n   * Allow omitting extension when using View decorator or render method.\n   */\n  viewEngine?: string;\n  /**\n   * Options mapping for each engine.\n   */\n  options?: Record<string, PlatformViewsEngineOptions>;\n}\n\ndeclare global {\n  namespace TsED {\n    interface Configuration {\n      /**\n       * Object to configure Views engines with Consolidate. See more on [View engine](/docs/template-engine.md).\n       */\n      views: PlatformViewsSettings;\n    }\n  }\n}\n","import {Env, getValue} from \"@tsed/core\";\nimport {Constant, Injectable} from \"@tsed/di\";\nimport Fs from \"fs\";\nimport {extname, join, resolve} from \"path\";\nimport {\n  PLATFORM_VIEWS_EXTENSIONS,\n  PlatformViewEngine,\n  PlatformViewsEngineOptions,\n  PlatformViewsExtensionsTypes\n} from \"../domain/PlatformViewsSettings\";\n\nfunction patchEJS(ejs: any) {\n  return {\n    compile(str: string, {client, ...options}: any) {\n      return (ejs || require(\"ejs\")).compile(str, options);\n    }\n  };\n}\n\nasync function tryImport(name: string) {\n  try {\n    return await import(name);\n  } catch (er) {\n    // istanbul ignore next\n  }\n}\n\n/**\n * @platform\n */\n@Injectable()\nexport class PlatformViews {\n  @Constant(\"env\")\n  env: Env;\n\n  @Constant(\"views.root\", `${process.cwd()}/views`)\n  readonly root: string;\n\n  @Constant(\"views.cache\")\n  readonly cache: boolean;\n\n  @Constant(\"views.viewEngine\", \"ejs\")\n  readonly viewEngine: string;\n\n  @Constant(\"views.extensions\", {})\n  protected extensionsOptions: PlatformViewsExtensionsTypes;\n\n  @Constant(\"views.options\", {})\n  protected engineOptions: Record<string, PlatformViewsEngineOptions>;\n\n  #extensions: Map<string, string>;\n  #engines = new Map<string, PlatformViewEngine>();\n  #cachePaths = new Map<string, {path: string; extension: string}>();\n\n  async $onInit() {\n    this.#extensions = new Map(\n      Object.entries({\n        ...PLATFORM_VIEWS_EXTENSIONS,\n        ...this.extensionsOptions\n      })\n    );\n\n    await this.loadFromConsolidate();\n    await this.loadFromTsedEngines();\n  }\n\n  /**\n   * @deprecated\n   */\n  async loadFromConsolidate() {\n    const cons = await tryImport(\"consolidate\");\n    if (cons) {\n      cons.requires.ejs = patchEJS(cons.requires.ejs);\n\n      this.#extensions.forEach((engineType) => {\n        if ((cons as any)[engineType]) {\n          const options = this.getEngineOptions(engineType);\n\n          if (options.requires) {\n            (cons.requires as any)[engineType] = options.requires;\n          }\n\n          this.registerEngine(engineType, {\n            options,\n            render: (cons as any)[engineType]\n          });\n        }\n      });\n    }\n  }\n\n  async loadFromTsedEngines() {\n    const tsed = await tryImport(\"@tsed/engines\");\n\n    if (tsed) {\n      tsed.requires.set(\"ejs\", patchEJS(tsed.requires.get(\"ejs\")));\n\n      this.#extensions.forEach((engineType) => {\n        if (tsed.engines.has(engineType)) {\n          const options = this.getEngineOptions(engineType);\n\n          if (options.requires) {\n            tsed.requires.set(engineType, options.requires);\n          }\n\n          this.registerEngine(engineType, {\n            options,\n            render: tsed.getEngine(engineType)\n          });\n        }\n      });\n    }\n  }\n\n  getEngines() {\n    return [...this.#extensions.entries()].map(([extension, engineType]) => {\n      const engine = this.getEngine(this.getExtension(engineType))!;\n\n      return {\n        extension,\n        engine\n      };\n    });\n  }\n\n  registerEngine(engineType: string, engine: PlatformViewEngine) {\n    this.#engines.set(engineType, engine);\n\n    return this;\n  }\n\n  getEngine(type: string) {\n    return this.#engines.get(this.#extensions.get(type) || type);\n  }\n\n  getEngineOptions(engineType: string): PlatformViewsEngineOptions {\n    return getValue(this.engineOptions, engineType, {});\n  }\n\n  async render(viewPath: string, options: any = {}): Promise<string> {\n    const {path, extension} = this.#cachePaths.get(viewPath) || this.#cachePaths.set(viewPath, this.resolve(viewPath)).get(viewPath)!;\n    const engine = this.getEngine(extension);\n\n    if (!engine) {\n      throw new Error(`Engine not found to render the following \"${viewPath}\"`);\n    }\n\n    return engine.render(path, Object.assign({cache: this.cache || this.env === Env.PROD}, engine.options, options));\n  }\n\n  protected getExtension(viewPath: string) {\n    return (extname(viewPath) || this.viewEngine).replace(/\\./, \"\");\n  }\n\n  protected resolve(viewPath: string) {\n    const extension = this.getExtension(viewPath);\n\n    viewPath = viewPath.replace(extname(viewPath), \"\") + \".\" + extension;\n\n    const path =\n      [\n        viewPath,\n        resolve(join(this.root, viewPath)),\n        resolve(join(process.cwd(), \"views\", viewPath)),\n        resolve(join(process.cwd(), \"public\", viewPath))\n      ].find((file) => Fs.existsSync(file)) || viewPath;\n\n    return {\n      path,\n      extension\n    };\n  }\n}\n","import {nameOf, Type} from \"@tsed/core\";\nimport {InternalServerError} from \"@tsed/exceptions\";\n\n/**\n * @private\n */\nexport class TemplateRenderError extends InternalServerError {\n  name = \"TEMPLATE_RENDER_ERROR\";\n\n  constructor(target: Type<any> | string, method: string | symbol, err: Error) {\n    super(TemplateRenderError.buildMessage(target, method, err));\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  static buildMessage(target: Type<any> | string, method: string | symbol, err: Error) {\n    return `Template rendering error: ${nameOf(target)}.${String(method)}()\\n` + err;\n  }\n}\n","import {BaseContext} from \"@tsed/di\";\nimport {TemplateRenderError} from \"../errors/TemplateRenderError\";\n\n/**\n * @ignore\n */\nexport async function renderView(data: any, $ctx: BaseContext) {\n  const {response, endpoint} = $ctx;\n  try {\n    const {data} = $ctx;\n    const {path, options} = endpoint.view;\n\n    return await response.render(path, {...options, ...data, $ctx});\n  } catch (err) {\n    throw new TemplateRenderError(endpoint.targetName, endpoint.propertyKey, err);\n  }\n}\n"],"names":["View","path","options","JsonEntityFn","entity","view","PLATFORM_VIEWS_EXTENSIONS","atpl","bracket","dot","dust","ect","ejs","haml","hamlet","hbs","handlebars","hogan","htmling","jazz","jqtpl","just","kernel","liquid","liquor","lodash","mote","mustache","nunjucks","plates","pug","qejs","ractive","razor","jsx","slm","squirelly","swig","teacup","templayed","toffee","twig","underscore","vash","velocityjs","walrus","whiskers","patchEJS","compile","str","require","tryImport","name","er","PlatformViews","constructor","Map","$onInit","Object","entries","extensionsOptions","loadFromConsolidate","loadFromTsedEngines","cons","requires","forEach","engineType","getEngineOptions","registerEngine","render","tsed","set","get","engines","has","getEngine","getEngines","map","extension","engine","getExtension","type","getValue","engineOptions","viewPath","resolve","Error","assign","cache","env","Env","PROD","extname","viewEngine","replace","join","root","process","cwd","find","file","Fs","existsSync","__decorate","Constant","Injectable","TemplateRenderError","InternalServerError","target","method","err","buildMessage","nameOf","String","renderView","data","$ctx","response","endpoint","targetName","propertyKey"],"mappings":"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"}