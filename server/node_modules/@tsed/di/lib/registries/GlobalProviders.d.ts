import { Type } from "@tsed/core";
import type { IProvider, RegistrySettings, TokenProvider } from "../interfaces";
import { Provider } from "../domain";
export declare class GlobalProviderRegistry extends Map<TokenProvider, Provider> {
    #private;
    /**
     * The get() method returns a specified element from a Map object.
     * @param key Required. The key of the element to return from the Map object.
     * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.
     */
    get(key: TokenProvider): Provider | undefined;
    /**
     * The has() method returns a boolean indicating whether an element with the specified key exists or not.
     * @param key
     * @returns {boolean}
     */
    has(key: TokenProvider): boolean;
    /**
     * The set() method adds or updates an element with a specified key and value to a Map object.
     * @param key Required. The key of the element to add to the Map object.
     * @param metadata Required. The value of the element to add to the Map object.
     */
    set(key: TokenProvider, metadata: Provider): this;
    /**
     *
     * @param target
     * @param options
     */
    merge(target: TokenProvider, options: Partial<IProvider>): void;
    /**
     * The delete() method removes the specified element from a Map object.
     * @param key Required. The key of the element to remove from the Map object.
     * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.
     */
    delete(key: TokenProvider): boolean;
    createRegistry(type: string, model: Type<Provider>, options?: Partial<RegistrySettings>): this;
    getRegistrySettings(target: string | TokenProvider): RegistrySettings;
    createRegisterFn(type: string): (provider: any | IProvider, instance?: any) => void;
    /**
     * @deprecated
     */
    getRegistry(target: string | TokenProvider): this;
    /**
     *
     * @param key
     * @param options
     */
    protected createIfNotExists(key: TokenProvider, options: Partial<IProvider>): Provider;
}
/**
 *
 * @type {GlobalProviders}
 */
export declare const GlobalProviders: GlobalProviderRegistry;
