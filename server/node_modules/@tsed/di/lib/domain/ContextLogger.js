"use strict";
var _id, _additionalProps, _dateStart, _ignoreLog, _stack, _level;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextLogger = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("@tsed/logger");
class ContextLogger {
    constructor(logger, { id, dateStart = new Date(), ignoreUrlPatterns = [], minimalRequestPicker, completeRequestPicker, level = "all", maxStackSize = 30, ignoreLog, additionalProps }) {
        this.logger = logger;
        _id.set(this, void 0);
        _additionalProps.set(this, void 0);
        _dateStart.set(this, void 0);
        _ignoreLog.set(this, void 0);
        _stack.set(this, []);
        _level.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _id, id);
        tslib_1.__classPrivateFieldSet(this, _additionalProps, additionalProps || {});
        tslib_1.__classPrivateFieldSet(this, _dateStart, dateStart);
        tslib_1.__classPrivateFieldSet(this, _ignoreLog, ignoreLog || (() => false));
        this.minimalRequestPicker = minimalRequestPicker || ((l) => l);
        this.completeRequestPicker = completeRequestPicker || ((l) => l);
        // @ts-ignore
        tslib_1.__classPrivateFieldSet(this, _level, logger_1.levels()[level.toUpperCase()] || logger_1.levels().ALL);
        this.maxStackSize = maxStackSize;
    }
    info(obj) {
        this.run(logger_1.levels().INFO, obj, (obj) => this.minimalRequestPicker(this.getData(obj)));
        return this;
    }
    debug(obj, withRequest = true) {
        this.run(logger_1.levels().DEBUG, obj, (obj) => {
            obj = this.getData(obj);
            return withRequest ? this.completeRequestPicker(obj) : obj;
        });
        return this;
    }
    warn(obj) {
        this.run(logger_1.levels().WARN, obj, (obj) => this.completeRequestPicker(this.getData(obj)));
        return this;
    }
    error(obj) {
        this.run(logger_1.levels().ERROR, obj, (obj) => this.completeRequestPicker(this.getData(obj)));
        return this;
    }
    trace(obj) {
        this.run(logger_1.levels().TRACE, obj, (obj) => this.completeRequestPicker(this.getData(obj)));
        return this;
    }
    flush() {
        if (tslib_1.__classPrivateFieldGet(this, _stack).length) {
            tslib_1.__classPrivateFieldGet(this, _stack).forEach(({ level, data }) => {
                this.logger[level](data);
            });
            tslib_1.__classPrivateFieldSet(this, _stack, []);
        }
    }
    isLevelEnabled(otherLevel) {
        return tslib_1.__classPrivateFieldGet(this, _level).isLessThanOrEqualTo(otherLevel);
    }
    destroy() {
        this.flush();
        this.logger = undefined;
        tslib_1.__classPrivateFieldSet(this, _stack, undefined);
    }
    /**
     * Return the duration between the time when LogIncomingRequest has handle the request and now.
     * @returns {number}
     */
    getDuration() {
        return new Date().getTime() - tslib_1.__classPrivateFieldGet(this, _dateStart).getTime();
    }
    getData(obj) {
        if (typeof obj === "string") {
            obj = { message: obj };
        }
        return { ...tslib_1.__classPrivateFieldGet(this, _additionalProps), reqId: tslib_1.__classPrivateFieldGet(this, _id), time: new Date(), duration: this.getDuration(), ...obj };
    }
    run(level, obj, mapper) {
        if (!this.isLevelEnabled(level)) {
            return;
        }
        if (!tslib_1.__classPrivateFieldGet(this, _ignoreLog).call(this, obj)) {
            tslib_1.__classPrivateFieldGet(this, _stack).push({ level: level.levelStr.toLowerCase(), data: mapper(obj) });
        }
        if (this.maxStackSize < tslib_1.__classPrivateFieldGet(this, _stack).length) {
            this.flush();
        }
    }
}
exports.ContextLogger = ContextLogger;
_id = new WeakMap(), _additionalProps = new WeakMap(), _dateStart = new WeakMap(), _ignoreLog = new WeakMap(), _stack = new WeakMap(), _level = new WeakMap();
//# sourceMappingURL=ContextLogger.js.map