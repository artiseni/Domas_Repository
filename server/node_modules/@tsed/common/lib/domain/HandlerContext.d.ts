import { HandlerMetadata } from "./HandlerMetadata";
import { PlatformContext } from "./PlatformContext";
/**
 * @ignore
 */
export interface HandlerContextOptions {
    $ctx: PlatformContext;
    metadata: HandlerMetadata;
    args: any[];
    err?: any;
}
/**
 * @ignore
 */
export declare enum HandlerContextStatus {
    PENDING = "pending",
    CANCELED = "canceled",
    RESOLVED = "resolved",
    REJECTED = "rejected"
}
export declare class HandlerContext {
    #private;
    status: HandlerContextStatus;
    metadata: HandlerMetadata;
    $ctx: PlatformContext;
    err: any;
    args: any[];
    constructor({ $ctx, err, metadata, args }: HandlerContextOptions);
    get request(): TsED.Request;
    get response(): TsED.Response;
    get isDone(): boolean;
    private get handler();
    /**
     *
     */
    callHandler(): Promise<any>;
    reject(er: any): void;
    resolve(data?: any): void;
    next(error?: any): void;
    destroy(): void;
    cancel(): any;
    handle(process: any): any;
}
