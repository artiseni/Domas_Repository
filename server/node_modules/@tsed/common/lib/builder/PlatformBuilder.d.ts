import { Type } from "@tsed/core";
import { Container, InjectorService, IProvider } from "@tsed/di";
import { Platform } from "../services/Platform";
import { PlatformApplication } from "../services/PlatformApplication";
import { PlatformRequest } from "../services/PlatformRequest";
import { PlatformResponse } from "../services/PlatformResponse";
/**
 * @ignore
 */
export interface PlatformType<T = any> extends Type<T> {
    providers: IProvider[];
}
/**
 * @ignore
 */
export interface PlatformBootstrap {
    bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformBuilder>;
}
/**
 * @platform
 */
export declare abstract class PlatformBuilder<App = TsED.Application, Router = TsED.Router> {
    #private;
    static currentPlatform: Type<PlatformBuilder> & PlatformBootstrap;
    readonly name: string;
    protected startedAt: Date;
    protected locals: Container;
    constructor({ name, providers }: {
        name: string;
        providers: IProvider[];
    });
    get injector(): InjectorService;
    get rootModule(): any;
    get app(): PlatformApplication<App, Router>;
    get platform(): Platform;
    /**
     * Return the settings configured by the decorator @@Configuration@@.
     *
     * ```typescript
     * @Configuration({
     *    rootDir: Path.resolve(__dirname),
     *    port: 8000,
     *    httpsPort: 8080,
     *    mount: {
     *      "/rest": "${rootDir}/controllers/**\/*.js"
     *    }
     * })
     * export class Server {
     *     $onInit(){
     *         console.log(this.settings); // {rootDir, port, httpsPort,...}
     *     }
     * }
     * ```
     *
     * @returns {PlatformConfiguration}
     */
    get settings(): TsED.Configuration & import("@tsed/di").DIConfiguration;
    get logger(): import("@tsed/di").DILogger;
    get disableBootstrapLog(): boolean | undefined;
    static build<T extends PlatformBuilder<any, any>>(platformBuildClass: PlatformType<T>): T;
    log(...data: any[]): any;
    /**
     * Add classes to the components list
     * @param classes
     */
    addComponents(classes: any | any[]): this;
    /**
     * Add classes decorated by @@Controller@@ to components container.
     *
     * ### Example
     *
     * ```typescript
     * @Controller('/ctrl')
     * class MyController{
     * }
     *
     * platform.addControllers('/rest', [MyController])
     * ```
     *
     * ::: tip
     * If the MyController class isn't decorated, the class will be ignored.
     * :::
     *
     * @param {string} endpoint
     * @param {any[]} controllers
     */
    addControllers(endpoint: string, controllers: any | string | (any | string)[]): void;
    runLifecycle(): Promise<void>;
    loadInjector(): Promise<void>;
    listen(): Promise<void>;
    stop(): Promise<void>;
    ready(): Promise<void>;
    callHook(hook: string, ...args: any[]): Promise<void>;
    loadStatics(): Promise<void>;
    useProvider(token: Type<any>, settings?: Partial<IProvider>): this;
    protected importProviders(): Promise<void>;
    protected createRequest(req: any): PlatformRequest;
    protected createResponse(res: any): PlatformResponse;
    /**
     * Load middlewares from configuration for the given hook
     * @param hook
     * @protected
     */
    protected loadMiddlewaresFor(hook: string): void;
    protected useRouter(): this;
    protected useContext(): this;
    protected bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<this>;
    protected listenServers(): Promise<void>;
    protected logRoutes(): Promise<void>;
    protected loadRoutes(): Promise<void>;
    protected createInjector(module: Type<any>, settings: any): void;
    protected createRootModule(module: Type<any>): void;
}
