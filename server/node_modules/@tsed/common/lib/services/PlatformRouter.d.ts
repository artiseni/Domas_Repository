import { InjectorService } from "@tsed/di";
import { PlatformMulter, PlatformMulterSettings, PlatformStaticsOptions } from "../config";
import { PathType, PlatformRouteWithoutHandlers, PlatformRouteOptions } from "../interfaces";
import { PlatformHandler } from "./PlatformHandler";
/**
 * @ignore
 */
export declare const PLATFORM_ROUTER_OPTIONS: unique symbol;
declare global {
    namespace TsED {
        interface Router {
        }
    }
}
/**
 * Platform Router abstraction layer.
 * @platform
 */
export declare class PlatformRouter<Router = TsED.Router> {
    protected platformHandler: PlatformHandler;
    rawRouter: Router;
    raw: any;
    injector: InjectorService;
    constructor(platformHandler: PlatformHandler);
    /**
     * Create a new instance of PlatformRouter
     * @param injector
     * @param routerOptions
     */
    static create(injector: InjectorService, routerOptions?: any): PlatformRouter<TsED.Router>;
    protected static createRawRouter(): any;
    callback(): any;
    getRouter(): Router;
    use(...handlers: any[]): this;
    addRoute(options: PlatformRouteOptions): this;
    all(path: PathType, ...handlers: any[]): this;
    get(path: PathType, ...handlers: any[]): this;
    post(path: PathType, ...handlers: any[]): this;
    put(path: PathType, ...handlers: any[]): this;
    delete(path: PathType, ...handlers: any[]): this;
    patch(path: PathType, ...handlers: any[]): this;
    head(path: PathType, ...handlers: any[]): this;
    options(path: PathType, ...handlers: any[]): this;
    statics(path: string, options: PlatformStaticsOptions): this;
    multer(options: PlatformMulterSettings): PlatformMulter;
    protected mapHandlers(handlers: any[], options?: PlatformRouteWithoutHandlers): any[];
}
