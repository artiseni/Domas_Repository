{"version":3,"file":"index.modern.js","sources":["../src/config/services/PlatformConfiguration.ts","../src/middlewares/bindEndpointMiddleware.ts","../src/middlewares/PlatformLogMiddleware.ts","../src/services/FakeRawDriver.ts","../src/domain/HandlerContext.ts","../src/interfaces/HandlerType.ts","../src/domain/HandlerMetadata.ts","../src/domain/EndpointMetadata.ts","../src/utils/createHandlerMetadata.ts","../src/utils/setResponseHeaders.ts","../src/services/ConverterService.ts","../src/services/PlatformHandler.ts","../src/services/PlatformRouter.ts","../src/services/PlatformApplication.ts","../src/middlewares/PlatformMulterMiddleware.ts","../src/middlewares/GlobalAcceptMimesMiddleware.ts","../src/middlewares/PlatformAcceptMimesMiddleware.ts","../src/middlewares/AcceptMimesMiddleware.ts","../src/utils/useCtxHandler.ts","../src/builder/PlatformControllerBuilder.ts","../src/services/PlatformRequest.ts","../src/services/PlatformResponse.ts","../src/domain/PlatformContext.ts","../src/domain/PlatformRouteDetails.ts","../src/constants/routerOptions.ts","../src/domain/ControllerProvider.ts","../src/domain/PropertyMetadata.ts","../src/utils/getControllerPath.ts","../src/services/Platform.ts","../src/PlatformModule.ts","../src/utils/createInjector.ts","../src/utils/createPlatformApplication.ts","../src/decorators/httpServer.ts","../src/utils/listenServer.ts","../src/utils/createHttpServer.ts","../src/decorators/httpsServer.ts","../src/utils/createHttpsServer.ts","../src/utils/loadInjector.ts","../src/utils/printRoutes.ts","../src/utils/createContext.ts","../src/builder/PlatformBuilder.ts","../src/decorators/multer/multerOptions.ts","../src/decorators/multer/multerFileSize.ts","../src/decorators/multer/multipartFile.ts","../src/decorators/method/route.ts","../src/decorators/method/endpointFn.ts","../src/decorators/method/acceptMime.ts","../src/decorators/method/location.ts","../src/decorators/method/redirect.ts","../src/decorators/class/controller.ts","../src/decorators/params/responseData.ts","../src/decorators/params/response.ts","../src/decorators/params/request.ts","../src/decorators/params/next.ts","../src/decorators/params/error.ts","../src/decorators/params/endpointInfo.ts","../src/utils/mapReturnedResponse.ts","../src/services/PlatformTest.ts","../src/registries/ControllerRegistry.ts"],"sourcesContent":["import {Env} from \"@tsed/core\";\nimport {DIConfiguration, Injectable, ProviderScope, ProviderType} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport Https from \"https\";\nimport {EndpointDirectoriesSettings, PlatformLoggerSettings} from \"../interfaces\";\nimport {ConverterSettings} from \"../interfaces/ConverterSettings\";\n\nconst rootDir = process.cwd();\n\n/**\n * `PlatformConfiguration` contains all information about your Server configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class PlatformConfiguration extends DIConfiguration {\n  constructor() {\n    super({\n      rootDir,\n      env: (process.env.NODE_ENV as Env) || Env.DEV,\n      httpPort: 8080,\n      httpsPort: false,\n      scopes: {\n        [ProviderType.CONTROLLER]: ProviderScope.SINGLETON\n      },\n      logger: {\n        debug: false,\n        level: \"info\",\n        logRequest: true,\n        jsonIndentation: process.env.NODE_ENV === Env.PROD ? 0 : 2\n      },\n      errors: {\n        headerName: \"errors\"\n      },\n      mount: {\n        \"/rest\": \"${rootDir}/controllers/**/*.ts\"\n      },\n      exclude: [\"**/*.spec.ts\", \"**/*.spec.js\"],\n      componentsScan: [\"${rootDir}/mvc/**/*.ts\", \"${rootDir}/services/**/*.ts\", \"${rootDir}/middlewares/**/*.ts\"]\n    });\n  }\n\n  get version() {\n    return this.getRaw(\"version\");\n  }\n\n  set version(v: string) {\n    this.setRaw(\"version\", v);\n  }\n\n  get rootDir() {\n    return this.getRaw(\"rootDir\");\n  }\n\n  set rootDir(value: string) {\n    this.setRaw(\"rootDir\", value);\n  }\n\n  get port(): string | number | false {\n    return this.httpPort;\n  }\n\n  set port(value: string | number | false) {\n    this.httpPort = value;\n  }\n\n  get httpsOptions(): Https.ServerOptions {\n    return this.getRaw(\"httpsOptions\");\n  }\n\n  set httpsOptions(value: Https.ServerOptions) {\n    this.setRaw(\"httpsOptions\", value);\n  }\n\n  get httpPort(): string | number | false {\n    return this.getRaw(\"httpPort\");\n  }\n\n  set httpPort(value: string | number | false) {\n    this.setRaw(\"httpPort\", value);\n  }\n\n  get httpsPort(): string | number | false {\n    return this.getRaw(\"httpsPort\");\n  }\n\n  set httpsPort(value: string | number | false) {\n    this.setRaw(\"httpsPort\", value);\n  }\n\n  get env(): Env {\n    return this.getRaw(\"env\");\n  }\n\n  set env(value: Env) {\n    this.setRaw(\"env\", value);\n  }\n\n  get mount(): EndpointDirectoriesSettings {\n    return this.get(\"mount\");\n  }\n\n  set mount(value: EndpointDirectoriesSettings) {\n    this.setRaw(\"mount\", value);\n  }\n\n  get componentsScan(): string[] {\n    return this.resolve(this.getRaw(\"componentsScan\"));\n  }\n\n  set componentsScan(value: string[]) {\n    this.setRaw(\"componentsScan\", value);\n  }\n\n  get statics(): EndpointDirectoriesSettings {\n    return this.getRaw(\"statics\") || this.getRaw(\"serveStatic\") || {};\n  }\n\n  set statics(value: EndpointDirectoriesSettings) {\n    this.setRaw(\"statics\", value);\n  }\n\n  get acceptMimes(): string[] {\n    return this.getRaw(\"acceptMimes\");\n  }\n\n  set acceptMimes(value: string[]) {\n    this.setRaw(\"acceptMimes\", value || []);\n  }\n\n  get debug(): boolean {\n    return this.logger.level === \"debug\";\n  }\n\n  set debug(debug: boolean) {\n    this.logger = {...this.logger, level: debug ? \"debug\" : \"info\"};\n  }\n\n  get converter(): Partial<ConverterSettings> {\n    return this.get(\"converter\") || {};\n  }\n\n  set converter(options: Partial<ConverterSettings>) {\n    this.setRaw(\"converter\", options);\n  }\n\n  get logger(): Partial<PlatformLoggerSettings> {\n    return this.get(\"logger\");\n  }\n\n  set logger(value: Partial<PlatformLoggerSettings>) {\n    const logger = {...this.logger, ...value};\n    logger.debug = logger.level === \"debug\";\n\n    this.setRaw(\"logger\", logger);\n    this.setRaw(\"debug\", logger.debug);\n\n    if (logger.format) {\n      $log.appenders.set(\"stdout\", {\n        type: \"stdout\",\n        levels: [\"info\", \"debug\"],\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n\n      $log.appenders.set(\"stderr\", {\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n    }\n  }\n\n  get exclude() {\n    return this.get(\"exclude\");\n  }\n\n  set exclude(exclude: string[]) {\n    this.setRaw(\"exclude\", exclude);\n  }\n\n  /**\n   *\n   * @param addressPort\n   * @returns {{address: string, port: number}}\n   */\n  private static buildAddressAndPort(addressPort: string | number): {address: string; port: number} {\n    let address = \"0.0.0.0\";\n    let port = addressPort;\n\n    if (typeof addressPort === \"string\" && addressPort.indexOf(\":\") > -1) {\n      [address, port] = addressPort.split(\":\");\n      port = +port;\n    }\n\n    return {address, port: port as number};\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): {address: string; port: number} {\n    return PlatformConfiguration.buildAddressAndPort(this.getRaw(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort(): {address: string; port: number} {\n    return PlatformConfiguration.buildAddressAndPort(this.getRaw(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n}\n","import type {EndpointMetadata, PlatformContext} from \"../domain\";\n\n/**\n * @ignore\n */\nexport function bindEndpointMiddleware(endpoint: EndpointMetadata) {\n  return (ctx: PlatformContext) => {\n    ctx.endpoint = endpoint;\n  };\n}\n","import {InjectorService} from \"@tsed/di\";\nimport {Middleware, MiddlewareMethods} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\nimport {PlatformLoggerSettings} from \"../config/interfaces/PlatformLoggerSettings\";\nimport {OnResponse} from \"../interfaces/OnResponse\";\n\n/**\n * @middleware\n * @platform\n */\n@Middleware()\nexport class PlatformLogMiddleware implements MiddlewareMethods, OnResponse {\n  protected static DEFAULT_FIELDS = [\"reqId\", \"method\", \"url\", \"duration\"];\n\n  $onResponse: any;\n\n  protected settings: PlatformLoggerSettings;\n\n  // tslint:disable-next-line: no-unused-variable\n  constructor(injector: InjectorService) {\n    this.settings = injector.settings.logger || {};\n    this.settings.requestFields = this.settings.requestFields || PlatformLogMiddleware.DEFAULT_FIELDS;\n\n    if (this.settings.level !== \"off\") {\n      this.$onResponse = this.onLogEnd.bind(this);\n    }\n  }\n\n  /**\n   * Handle the request.\n   */\n  public use(@Context() ctx: Context): void {\n    this.configureRequest(ctx);\n    this.onLogStart(ctx);\n  }\n\n  /**\n   * The separate onLogStart() function will allow developer to overwrite the initial request log.\n   * @param ctx\n   */\n  protected onLogStart(ctx: Context) {\n    const {debug, logRequest, logStart} = this.settings;\n\n    if (logStart !== false) {\n      if (debug) {\n        ctx.logger.debug({\n          event: \"request.start\"\n        });\n      } else if (logRequest) {\n        ctx.logger.info({\n          event: \"request.start\"\n        });\n      }\n    }\n  }\n\n  /**\n   * Called when the `$onResponse` is called by Ts.ED (through Express.end).\n   */\n  protected onLogEnd(ctx: Context) {\n    const {debug, logRequest, logEnd} = this.settings;\n\n    if (logEnd !== false) {\n      if (debug) {\n        ctx.logger.debug({\n          event: \"request.end\",\n          status: ctx.response.statusCode,\n          data: ctx.data\n        });\n      } else if (logRequest) {\n        ctx.logger.info({\n          event: \"request.end\",\n          status: ctx.response.statusCode\n        });\n      }\n    }\n\n    ctx.logger.flush();\n  }\n\n  /**\n   * Attach all information that will be necessary to log the request. Attach a new `request.log` object.\n   */\n  protected configureRequest(ctx: Context) {\n    ctx.logger.minimalRequestPicker = (obj: any) => ({...this.minimalRequestPicker(ctx), ...obj});\n    ctx.logger.completeRequestPicker = (obj: any) => ({...this.requestToObject(ctx), ...obj});\n  }\n\n  /**\n   * Return complete request info.\n   * @returns {Object}\n   * @param ctx\n   */\n  protected requestToObject(ctx: Context): any {\n    const {request} = ctx;\n\n    return {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      body: request.body,\n      query: request.query,\n      params: request.params\n    };\n  }\n\n  /**\n   * Return a filtered request from global configuration.\n   * @returns {Object}\n   * @param ctx\n   */\n  protected minimalRequestPicker(ctx: Context): any {\n    const {requestFields} = this.settings;\n    const info = this.requestToObject(ctx);\n\n    return requestFields!.reduce((acc: any, key: string) => {\n      acc[key] = info[key];\n\n      return acc;\n    }, {});\n  }\n}\n","/**\n * @ignore\n */\nexport const createFakeRawDriver = () => {\n  // istanbul ignore next\n  function FakeRawDriver() {}\n\n  // istanbul ignore next\n  function use() {\n    return this;\n  }\n\n  FakeRawDriver.use = use;\n  FakeRawDriver.all = use;\n  FakeRawDriver.get = use;\n  FakeRawDriver.patch = use;\n  FakeRawDriver.post = use;\n  FakeRawDriver.put = use;\n  FakeRawDriver.head = use;\n  FakeRawDriver.delete = use;\n  FakeRawDriver.options = use;\n\n  return FakeRawDriver;\n};\n","import {isObservable, isPromise, isStream} from \"@tsed/core\";\nimport {ProviderScope} from \"@tsed/di\";\nimport {HandlerMetadata} from \"./HandlerMetadata\";\nimport {PlatformContext} from \"./PlatformContext\";\n\n/**\n * @ignore\n */\nfunction isResponse(obj: any) {\n  return obj.data && obj.headers && obj.status && obj.statusText;\n}\n\n/**\n * @ignore\n */\nexport interface HandlerContextOptions {\n  $ctx: PlatformContext;\n  metadata: HandlerMetadata;\n  args: any[];\n  err?: any;\n}\n\n/**\n * @ignore\n */\nexport enum HandlerContextStatus {\n  PENDING = \"pending\",\n  CANCELED = \"canceled\",\n  RESOLVED = \"resolved\",\n  REJECTED = \"rejected\"\n}\n\nexport class HandlerContext {\n  public status = HandlerContextStatus.PENDING;\n  public metadata: HandlerMetadata;\n  public $ctx: PlatformContext;\n  public err: any;\n  public args: any[];\n\n  #resolves: any;\n  #rejects: any;\n\n  readonly #promise: Promise<any>;\n\n  constructor({$ctx, err, metadata, args}: HandlerContextOptions) {\n    this.$ctx = $ctx;\n\n    this.#promise = new Promise((resolve: any, reject: any) => {\n      this.#resolves = resolve;\n      this.#rejects = reject;\n    });\n\n    err && (this.err = err);\n    metadata && (this.metadata = metadata);\n    args && (this.args = args || []);\n\n    this.next = this.next.bind(this);\n  }\n\n  get request() {\n    return this.$ctx?.getRequest<TsED.Request>();\n  }\n\n  get response() {\n    return this.$ctx?.getResponse<TsED.Response>();\n  }\n\n  get isDone(): boolean {\n    const {$ctx} = this;\n    if (!$ctx || $ctx.isDone()) {\n      return true;\n    }\n\n    if ($ctx.request.isAborted() || $ctx.response.isDone()) {\n      this.destroy();\n\n      if (this.status === HandlerContextStatus.PENDING) {\n        this.status = HandlerContextStatus.RESOLVED;\n      }\n    }\n\n    return this.status !== HandlerContextStatus.PENDING;\n  }\n\n  private get handler() {\n    const {metadata} = this;\n\n    if (metadata.handler) {\n      return metadata.handler;\n    }\n\n    if (this.metadata.scope === ProviderScope.SINGLETON) {\n      if (!this.$ctx.injector.has(metadata.token)) {\n        this.$ctx.injector.invoke<any>(metadata.token);\n      }\n\n      const instance = this.$ctx.injector.get(metadata.token);\n      metadata.handler = instance[metadata.propertyKey].bind(instance);\n\n      return metadata.handler;\n    }\n\n    const instance = this.$ctx.injector.invoke<any>(metadata.token, this.$ctx.container);\n\n    return instance[metadata.propertyKey].bind(instance);\n  }\n\n  /**\n   *\n   */\n  async callHandler() {\n    if (this.isDone) {\n      return this;\n    }\n\n    try {\n      this.handle(this.handler(...this.args, this.$ctx));\n    } catch (er) {\n      this.reject(er);\n    }\n\n    return this.#promise;\n  }\n\n  reject(er: any) {\n    if (this.isDone) {\n      return;\n    }\n\n    this.destroy();\n    this.status = HandlerContextStatus.REJECTED;\n    this.#rejects(er);\n  }\n\n  resolve(data?: any) {\n    if (this.isDone) {\n      return;\n    }\n\n    if (this.$ctx && data !== undefined) {\n      this.$ctx.data = data;\n    }\n\n    this.destroy();\n    this.status = HandlerContextStatus.RESOLVED;\n\n    this.#resolves(data);\n  }\n\n  next(error?: any) {\n    if (this.isDone) {\n      return;\n    }\n\n    return error ? this.reject(error) : this.resolve();\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.$ctx;\n    // @ts-ignore\n    delete this.args;\n    // @ts-ignore\n    delete this.metadata;\n    // @ts-ignore\n    delete this.err;\n  }\n\n  cancel() {\n    if (this.isDone) {\n      return;\n    }\n\n    this.destroy();\n    this.status = HandlerContextStatus.CANCELED;\n\n    return this.#resolves();\n  }\n\n  handle(process: any): any {\n    if (this.isDone) {\n      return;\n    }\n\n    const {\n      metadata: {hasNextFunction},\n      $ctx\n    } = this;\n\n    if (process) {\n      if (process === $ctx.getResponse()) {\n        // ABANDON\n        return this.cancel();\n      }\n\n      if (isObservable(process)) {\n        process = process.toPromise();\n      }\n\n      if (isResponse(process)) {\n        $ctx.response.setHeaders(process.headers);\n        $ctx.response.status(process.status);\n\n        return this.handle(process.data);\n      }\n\n      if (isStream(process) || Buffer.isBuffer(process)) {\n        return this.resolve(process);\n      }\n\n      if (isPromise(process)) {\n        return process\n          .then((result: any) => this.handle(result))\n          .catch((error: any) => {\n            if (error.response && isResponse(error.response)) {\n              return this.handle(error.response);\n            }\n            return this.reject(error);\n          });\n      }\n    }\n\n    if (!hasNextFunction) {\n      // no next function and empty response\n      return this.resolve(process);\n    }\n  }\n}\n","/**\n * @ignore\n */\nexport enum HandlerType {\n  CUSTOM = \"custom\",\n  ENDPOINT = \"endpoint\",\n  MIDDLEWARE = \"middleware\",\n  ERR_MIDDLEWARE = \"err:middleware\",\n  CTX_FN = \"context\",\n  RAW_FN = \"raw:middleware\",\n  RAW_ERR_FN = \"raw:err:middleware\"\n}\n","import {nameOf, Type} from \"@tsed/core\";\nimport {ProviderScope} from \"@tsed/di\";\nimport {ParamMetadata, ParamTypes} from \"@tsed/platform-params\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\nimport {PlatformRouteOptions, PlatformRouteWithoutHandlers} from \"../interfaces/PlatformRouteOptions\";\n\nexport interface HandlerMetadataOptions {\n  target: (Type<any> | Function) & {type?: HandlerType};\n  routeOptions?: PlatformRouteWithoutHandlers;\n  token?: Type<any>;\n  propertyKey?: string | symbol;\n  scope?: ProviderScope;\n  type?: HandlerType;\n}\n\nexport class HandlerMetadata {\n  readonly target: any;\n  readonly token: Type<any>;\n  readonly propertyKey: string | symbol;\n  readonly injectable: boolean = false;\n  readonly type: HandlerType = HandlerType.RAW_FN;\n  readonly hasNextFunction: boolean = false;\n  readonly routeOptions: Partial<PlatformRouteOptions>;\n  readonly scope: ProviderScope;\n\n  handler: any;\n\n  constructor(options: HandlerMetadataOptions) {\n    const {target, token, propertyKey, type, scope, routeOptions} = options;\n\n    this.type = type || target.type || HandlerType.RAW_FN;\n    this.scope = scope || ProviderScope.SINGLETON;\n    this.routeOptions = routeOptions || {};\n    const handler = propertyKey ? target.prototype[propertyKey] : target;\n\n    if (propertyKey) {\n      this.target = target;\n      this.token = token!;\n      this.propertyKey = propertyKey;\n      this.hasNextFunction = this.hasParamType(ParamTypes.NEXT_FN);\n\n      if (this.hasParamType(ParamTypes.ERR)) {\n        this.type = HandlerType.ERR_MIDDLEWARE;\n      }\n\n      this.injectable = ParamMetadata.getParams(target as any, propertyKey).length > 0;\n    } else {\n      this.handler = handler;\n    }\n\n    if (!this.injectable) {\n      if (handler.length === 4) {\n        this.type = HandlerType.RAW_ERR_FN;\n      }\n      this.hasNextFunction = handler.length >= 3;\n    }\n  }\n\n  get hasErrorParam() {\n    return this.type === HandlerType.ERR_MIDDLEWARE || this.type === HandlerType.RAW_ERR_FN;\n  }\n\n  get parameters(): ParamMetadata[] {\n    return this.injectable ? this.getParams() : [];\n  }\n\n  public getParams() {\n    return ParamMetadata.getParams(this.target, this.propertyKey) || [];\n  }\n\n  public hasParamType(paramType: any): boolean {\n    return this.getParams().findIndex((p) => p.paramType === paramType) > -1;\n  }\n\n  public isFinal() {\n    return this.routeOptions?.isFinal || false;\n  }\n\n  toString() {\n    return [this.target && nameOf(this.target), this.propertyKey].filter(Boolean).join(\".\");\n  }\n}\n","import {classOf, DecoratorTypes, deepMerge, descriptorOf, Enumerable, isFunction, nameOf, prototypeOf, Store, Type} from \"@tsed/core\";\nimport {ParamMetadata} from \"@tsed/platform-params\";\nimport {getOperationsStores, JsonEntityComponent, JsonEntityStore, JsonEntityStoreOptions, JsonOperation} from \"@tsed/schema\";\n\nexport interface EndpointConstructorOptions extends JsonEntityStoreOptions {\n  beforeMiddlewares?: Function[];\n  middlewares?: Function[];\n  afterMiddlewares?: Function[];\n}\n\nexport interface EndpointViewOptions {\n  path: string;\n  options: any;\n}\n\nexport interface EndpointRedirectOptions {\n  status: number | undefined;\n  url: string;\n}\n\n/**\n * EndpointMetadata contains metadata about a controller and his method.\n * Each annotation (@Get, @Body...) attached to a method are stored in a endpoint.\n * EndpointMetadata convert this metadata to an array which contain arguments to call an Express method.\n *\n * Example :\n *\n *    @Controller(\"/my-path\")\n *    provide MyClass {\n *\n *        @Get(\"/\")\n *        @Authenticated()\n *        public myMethod(){}\n *    }\n *\n */\n@JsonEntityComponent(DecoratorTypes.METHOD)\nexport class EndpointMetadata extends JsonEntityStore implements EndpointConstructorOptions {\n  // LIFECYCLE\n  @Enumerable()\n  public beforeMiddlewares: any[] = [];\n\n  @Enumerable()\n  public middlewares: any[] = [];\n\n  @Enumerable()\n  public afterMiddlewares: any[] = [];\n\n  @Enumerable()\n  public statusCode: number = 200;\n\n  constructor(options: EndpointConstructorOptions) {\n    super({\n      store: Store.fromMethod(options.target, options.propertyKey!),\n      descriptor: descriptorOf(options.target, options.propertyKey!),\n      ...options\n    });\n\n    const {beforeMiddlewares = [], middlewares = [], afterMiddlewares = []} = options;\n\n    this.after(afterMiddlewares);\n    this.before(beforeMiddlewares);\n    this.use(middlewares);\n  }\n\n  get targetName(): string {\n    return nameOf(this.token);\n  }\n\n  get params(): ParamMetadata[] {\n    return (Array.from(this.children.values()) as unknown) as ParamMetadata[];\n  }\n\n  /**\n   * Return the JsonOperation\n   */\n  get operation(): JsonOperation {\n    return this._operation;\n  }\n\n  get operationPaths() {\n    return this.operation.operationPaths;\n  }\n\n  get view(): EndpointViewOptions {\n    return this.store.get(\"view\") as EndpointViewOptions;\n  }\n\n  set view(view: EndpointViewOptions) {\n    this.store.set(\"view\", view);\n  }\n\n  get location(): string {\n    return this.store.get(\"location\") as string;\n  }\n\n  set location(url: string) {\n    this.store.set(\"location\", url);\n  }\n\n  get acceptMimes(): string[] {\n    return this.store.get<string[]>(\"acceptMimes\", []);\n  }\n\n  set acceptMimes(mimes: string[]) {\n    this.store.set(\"acceptMimes\", mimes);\n  }\n\n  get redirect(): EndpointRedirectOptions {\n    return this.store.get(\"redirect\") as any;\n  }\n\n  set redirect(options: EndpointRedirectOptions) {\n    this.store.set(\"redirect\", {\n      status: 302,\n      ...options\n    });\n  }\n\n  /**\n   * Get all endpoints from a given class and his parents.\n   * @param {Type<any>} target\n   * @returns {EndpointMetadata[]}\n   */\n  static getEndpoints(target: Type<any>): EndpointMetadata[] {\n    const operations = getOperationsStores<EndpointMetadata>(target);\n\n    return Array.from(operations.values()).map((endpoint) => {\n      endpoint = endpoint.clone();\n      endpoint.token = classOf(target);\n\n      return endpoint;\n    });\n  }\n\n  /**\n   * Get an endpoint.\n   * @param target\n   * @param propertyKey\n   * @param descriptor\n   */\n  static get(target: Type<any>, propertyKey: string | symbol, descriptor?: PropertyDescriptor): EndpointMetadata {\n    descriptor = descriptor || descriptorOf(prototypeOf(target), propertyKey);\n\n    return JsonEntityStore.from<EndpointMetadata>(prototypeOf(target), propertyKey, descriptor);\n  }\n\n  addOperationPath(method: string, path: string | RegExp, options: any = {}) {\n    return this.operation.addOperationPath(method, path, options);\n  }\n\n  /**\n   * Find the a value at the controller level. Let this value be extended or overridden by the endpoint itself.\n   *\n   * @param key\n   * @returns {any}\n   */\n  get<T = any>(key: any): T {\n    const ctrlValue = Store.from(this.target).get(key);\n\n    return deepMerge<T>(ctrlValue, this.store.get(key));\n  }\n\n  /**\n   * Append middlewares to the beforeMiddlewares list.\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public before(args: Function[]): this {\n    this.beforeMiddlewares = this.beforeMiddlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  /**\n   * Append middlewares to the afterMiddlewares list.\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public after(args: Function[]): this {\n    this.afterMiddlewares = this.afterMiddlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  /**\n   * Store all arguments collected via Annotation.\n   * @param args\n   */\n  public use(args: Function[]) {\n    this.middlewares = this.middlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  public clone() {\n    const endpoint = new EndpointMetadata({\n      ...this,\n      target: this.target,\n      propertyKey: this.propertyKey,\n      descriptor: this.descriptor,\n      store: this.store,\n      children: this.children\n    });\n\n    endpoint.collectionType = this.collectionType;\n    endpoint._type = this._type;\n    endpoint._operation = this.operation;\n    endpoint._schema = this._schema;\n    endpoint.middlewares = [...this.middlewares];\n    endpoint.afterMiddlewares = [...this.afterMiddlewares];\n    endpoint.beforeMiddlewares = [...this.beforeMiddlewares];\n\n    return endpoint;\n  }\n}\n","import {InjectorService} from \"@tsed/di\";\nimport {EndpointMetadata} from \"../domain/EndpointMetadata\";\nimport {HandlerMetadata, HandlerMetadataOptions} from \"../domain/HandlerMetadata\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\nimport {PlatformRouteWithoutHandlers} from \"../interfaces/PlatformRouteOptions\";\n\nfunction isMetadata(input: any) {\n  return input instanceof HandlerMetadata;\n}\n\n/**\n * @ignore\n */\nexport function createHandlerMetadata(\n  injector: InjectorService,\n  obj: any | EndpointMetadata,\n  routeOptions: PlatformRouteWithoutHandlers = {}\n): HandlerMetadata {\n  if (isMetadata(obj)) {\n    return obj as HandlerMetadata;\n  }\n\n  let options: HandlerMetadataOptions;\n\n  if (obj instanceof EndpointMetadata) {\n    const provider = injector.getProvider(obj.token)!;\n\n    options = {\n      token: provider.token,\n      target: provider.useClass,\n      scope: provider.scope,\n      type: HandlerType.ENDPOINT,\n      propertyKey: obj.propertyKey\n    };\n  } else {\n    const provider = injector.getProvider(obj);\n\n    if (provider) {\n      options = {\n        token: provider.token,\n        target: provider.useClass,\n        scope: provider.scope,\n        type: HandlerType.MIDDLEWARE,\n        propertyKey: \"use\"\n      };\n    } else {\n      options = {\n        target: obj\n      };\n    }\n  }\n\n  options.routeOptions = routeOptions;\n\n  return new HandlerMetadata(options);\n}\n","import {PlatformContext} from \"../domain/PlatformContext\";\n\nfunction toHeaders(headers: {[key: string]: any}) {\n  return Object.entries(headers).reduce((headers, [key, item]) => {\n    return {\n      ...headers,\n      [key]: String(item.example)\n    };\n  }, {});\n}\n\n/**\n * @ignore\n */\nexport function setResponseHeaders(ctx: PlatformContext) {\n  const {response, endpoint} = ctx;\n  const {operation} = endpoint;\n\n  if (response.isDone()) {\n    return;\n  }\n\n  if (!response.hasStatus()) {\n    // apply status only if the isn't already modified\n    response.status(operation.getStatus());\n  }\n\n  const headers = operation.getHeadersOf(response.statusCode);\n  response.setHeaders(toHeaders(headers));\n\n  if (endpoint.redirect) {\n    response.redirect(endpoint.redirect.status || 302, endpoint.redirect.url);\n  }\n\n  if (endpoint.location) {\n    response.location(endpoint.location);\n  }\n}\n","import {Configuration, Injectable, InjectorService} from \"@tsed/di\";\nimport {deserialize, JsonDeserializerOptions, JsonSerializerOptions, serialize} from \"@tsed/json-mapper\";\nimport {ConverterSettings} from \"../config/interfaces/ConverterSettings\";\n\n@Injectable()\nexport class ConverterService {\n  #converterSettings: ConverterSettings;\n\n  constructor(private injectorService: InjectorService, @Configuration() configuration: Configuration) {\n    this.#converterSettings = configuration.get<ConverterSettings>(\"converter\") || {};\n  }\n\n  /**\n   * Convert instance to plainObject.\n   *\n   * @param obj\n   * @param options\n   */\n  serialize(obj: any, options: JsonSerializerOptions = {}): any {\n    return serialize(obj, {\n      useAlias: true,\n      additionalProperties: this.#converterSettings.additionalProperties === \"accept\",\n      ...options\n    });\n  }\n\n  /**\n   * Convert a plainObject to targetType.\n   *\n   * ### Options\n   *\n   * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj Object source that will be deserialized\n   * @param options Mapping options\n   * @returns {any}\n   */\n  deserialize(obj: any, options: JsonDeserializerOptions = {}): any {\n    return deserialize(obj, {\n      useAlias: true,\n      additionalProperties: this.#converterSettings.additionalProperties === \"accept\",\n      ...options\n    });\n  }\n}\n","import {isBoolean, isFunction, isNumber, isStream, isString} from \"@tsed/core\";\nimport {Injectable, InjectorService, Provider, ProviderScope} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport {ParamMetadata, PlatformParams} from \"@tsed/platform-params\";\nimport {PlatformResponseFilter} from \"@tsed/platform-response-filter\";\nimport {renderView} from \"@tsed/platform-views\";\nimport {EndpointMetadata} from \"../domain/EndpointMetadata\";\nimport {HandlerContext, HandlerContextStatus} from \"../domain/HandlerContext\";\nimport {HandlerMetadata} from \"../domain/HandlerMetadata\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\nimport {PlatformRouteWithoutHandlers} from \"../interfaces/PlatformRouteOptions\";\nimport {createHandlerMetadata} from \"../utils/createHandlerMetadata\";\nimport {setResponseHeaders} from \"../utils/setResponseHeaders\";\nimport {ConverterService} from \"./ConverterService\";\n\nexport interface OnRequestOptions {\n  $ctx: PlatformContext;\n  metadata: HandlerMetadata;\n  next?: any;\n  err?: any;\n\n  [key: string]: any;\n}\n\nfunction shouldBeSent(data: any) {\n  return Buffer.isBuffer(data) || isBoolean(data) || isNumber(data) || isString(data) || data === null;\n}\n\nfunction shouldBeSerialized(data: any) {\n  return !(isStream(data) || shouldBeSent(data) || data === undefined);\n}\n\n/**\n * Platform Handler abstraction layer. Wrap original class method to a pure platform handler (Express, Koa, etc...).\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class PlatformHandler {\n  constructor(protected injector: InjectorService, protected params: PlatformParams) {}\n\n  /**\n   * Create a native middleware based on the given metadata and return an instance of HandlerContext\n   * @param input\n   * @param options\n   */\n  createHandler(input: EndpointMetadata | HandlerMetadata | any, options: PlatformRouteWithoutHandlers = {}) {\n    const metadata: HandlerMetadata = this.createHandlerMetadata(input, options);\n    this.buildPipe(metadata);\n    return this.createRawHandler(metadata);\n  }\n\n  createCustomHandler(provider: Provider, propertyKey: string) {\n    const metadata = new HandlerMetadata({\n      token: provider.provide,\n      target: provider.useClass,\n      type: HandlerType.CUSTOM,\n      scope: provider.scope,\n      propertyKey\n    });\n    this.buildPipe(metadata);\n    return this.createRawHandler(metadata);\n  }\n\n  /**\n   * Create handler metadata\n   * @param obj\n   * @param routeOptions\n   */\n  public createHandlerMetadata(obj: any | EndpointMetadata, routeOptions: PlatformRouteWithoutHandlers = {}): HandlerMetadata {\n    return createHandlerMetadata(this.injector, obj, routeOptions);\n  }\n\n  /**\n   * Send the response to the consumer.\n   * @param data\n   * @param ctx\n   * @protected\n   */\n  async flush(data: any, ctx: PlatformContext) {\n    const {response, endpoint} = ctx;\n\n    if (endpoint) {\n      if (endpoint.view) {\n        data = await this.render(data, ctx);\n      } else if (shouldBeSerialized(data)) {\n        data = this.injector.get<ConverterService>(ConverterService)!.serialize(data, {\n          ...endpoint.getResponseOptions(),\n          endpoint: true\n        });\n      }\n    }\n\n    if (!response.isDone()) {\n      const responseFilter = this.injector.get<PlatformResponseFilter>(PlatformResponseFilter)!;\n\n      response.body(responseFilter.transform(data, ctx));\n    }\n  }\n\n  protected async onCtxRequest(requestOptions: OnRequestOptions): Promise<any> {\n    const {metadata, $ctx} = requestOptions;\n\n    await metadata.handler($ctx);\n\n    return this.next(requestOptions);\n  }\n\n  /**\n   * Call handler when a request his handle\n   * @param requestOptions\n   */\n  protected async onRequest(requestOptions: OnRequestOptions): Promise<any> {\n    // istanbul ignore next\n    if (!requestOptions.$ctx) {\n      $log.error(\n        `Endpoint ${requestOptions.metadata.toString()} is called but the response is already send to your consumer. Check your code and his middlewares please!`\n      );\n      return;\n    }\n\n    const h = new HandlerContext({\n      ...requestOptions,\n      args: []\n    });\n\n    const {$ctx} = h;\n\n    return this.injector.runInContext($ctx, async () => {\n      try {\n        h.args = await this.getArgs(h);\n\n        await h.callHandler();\n\n        if (h.status === HandlerContextStatus.RESOLVED) {\n          // Can be canceled by the handler itself\n          return await this.onSuccess($ctx.data, requestOptions);\n        }\n      } catch (er) {\n        return this.onError(er, requestOptions);\n      }\n    });\n  }\n\n  protected async onError(er: unknown, requestOptions: OnRequestOptions) {\n    const {next, $ctx} = requestOptions;\n    $ctx.data = er;\n\n    if (!next) {\n      throw er;\n    }\n\n    return !$ctx.response.isHeadersSent() && next && next(er);\n  }\n\n  /**\n   * Manage success scenario\n   * @param data\n   * @param requestOptions\n   * @protected\n   */\n  protected async onSuccess(data: any, requestOptions: OnRequestOptions) {\n    const {metadata, $ctx, next} = requestOptions;\n\n    if ($ctx.request.isAborted() || $ctx.response.isDone()) {\n      return;\n    }\n\n    // set headers each times that an endpoint is called\n    if (metadata.type === HandlerType.ENDPOINT) {\n      this.setHeaders($ctx);\n    }\n\n    // call returned middleware\n    if (isFunction(data) && !isStream(data)) {\n      return this.callReturnedMiddleware(data, $ctx, next);\n    }\n\n    if (metadata.isFinal()) {\n      return this.flush(data, $ctx);\n    }\n\n    return this.next(requestOptions);\n  }\n\n  /**\n   * Call the returned middleware by the handler.\n   * @param middleware\n   * @param ctx\n   * @param next\n   * @protected\n   */\n  protected callReturnedMiddleware(middleware: any, ctx: PlatformContext, next: any) {\n    return middleware(ctx.getRequest(), ctx.getResponse(), next);\n  }\n\n  /**\n   * Render the view if the endpoint has a configured view.\n   * @param data\n   * @param ctx\n   * @protected\n   */\n  protected async render(data: any, ctx: PlatformContext) {\n    return renderView(data, ctx);\n  }\n\n  /**\n   * create Raw handler\n   * @param metadata\n   */\n  protected createRawHandler(metadata: HandlerMetadata): Function {\n    switch (metadata.type) {\n      case HandlerType.CUSTOM:\n        return (ctx: PlatformContext, next: any) => this.onRequest({metadata, next, $ctx: ctx});\n      case HandlerType.RAW_ERR_FN:\n      case HandlerType.RAW_FN:\n        return metadata.handler;\n\n      default:\n      case HandlerType.ENDPOINT:\n      case HandlerType.MIDDLEWARE:\n        return (request: any, response: any, next: any) => this.onRequest({metadata, next, $ctx: request.$ctx});\n    }\n  }\n\n  /**\n   * Set response headers\n   * @param ctx\n   * @protected\n   */\n  protected setHeaders(ctx: PlatformContext) {\n    return setResponseHeaders(ctx);\n  }\n\n  protected next(requestOptions: OnRequestOptions) {\n    const {$ctx, next} = requestOptions;\n\n    return !$ctx.response.isDone() && next && next();\n  }\n\n  private buildPipe(metadata: HandlerMetadata) {\n    if (metadata.injectable) {\n      return metadata.parameters.forEach((param: ParamMetadata) => {\n        this.params.build(param);\n      });\n    }\n  }\n\n  private getArgs(h: HandlerContext) {\n    const {metadata} = h;\n\n    if (metadata.injectable) {\n      return this.params.getArgs(h, metadata.parameters);\n    }\n\n    return [metadata.hasErrorParam && h.err, h.$ctx.request.request, h.$ctx.response.response, metadata.hasNextFunction && h.next].filter(\n      Boolean\n    );\n  }\n}\n","import {Inject, Injectable, InjectorService, ProviderScope} from \"@tsed/di\";\nimport {promisify} from \"util\";\nimport {PlatformMulter, PlatformMulterSettings, PlatformStaticsOptions} from \"../config\";\nimport {PathType, PlatformRouteWithoutHandlers, PlatformRouteOptions} from \"../interfaces\";\nimport {createFakeRawDriver} from \"./FakeRawDriver\";\nimport {PlatformHandler} from \"./PlatformHandler\";\n\n/**\n * @ignore\n */\nexport const PLATFORM_ROUTER_OPTIONS = Symbol.for(\"PlatformRouterOptions\");\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Router {}\n  }\n}\n\n/**\n * Platform Router abstraction layer.\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.INSTANCE\n})\nexport class PlatformRouter<Router = TsED.Router> {\n  rawRouter: Router;\n  raw: any;\n\n  @Inject()\n  injector: InjectorService;\n\n  constructor(protected platformHandler: PlatformHandler) {\n    this.rawRouter = this.raw = PlatformRouter.createRawRouter();\n  }\n\n  /**\n   * Create a new instance of PlatformRouter\n   * @param injector\n   * @param routerOptions\n   */\n  static create(injector: InjectorService, routerOptions: any = {}) {\n    const locals = new Map();\n    locals.set(PLATFORM_ROUTER_OPTIONS, routerOptions);\n\n    return injector.invoke<PlatformRouter>(PlatformRouter, locals);\n  }\n\n  protected static createRawRouter(): any {\n    return createFakeRawDriver();\n  }\n\n  callback(): any {\n    return this.raw;\n  }\n\n  getRouter(): Router {\n    return this.rawRouter;\n  }\n\n  use(...handlers: any[]) {\n    // @ts-ignore\n    this.getRouter().use(...this.mapHandlers(handlers));\n\n    return this;\n  }\n\n  addRoute(options: PlatformRouteOptions) {\n    const {method, path, handlers, isFinal} = options;\n    // @ts-ignore\n    this.getRouter()[method](path, ...this.mapHandlers(handlers, {method, path, isFinal}));\n\n    return this;\n  }\n\n  all(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"all\", path, handlers, isFinal: true});\n  }\n\n  get(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"get\", path, handlers, isFinal: true});\n  }\n\n  post(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"post\", path, handlers, isFinal: true});\n  }\n\n  put(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"put\", path, handlers, isFinal: true});\n  }\n\n  delete(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"delete\", path, handlers, isFinal: true});\n  }\n\n  patch(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"patch\", path, handlers, isFinal: true});\n  }\n\n  head(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"head\", path, handlers, isFinal: true});\n  }\n\n  options(path: PathType, ...handlers: any[]) {\n    return this.addRoute({method: \"options\", path, handlers, isFinal: true});\n  }\n\n  statics(path: string, options: PlatformStaticsOptions): this {\n    return this;\n  }\n\n  multer(options: PlatformMulterSettings): PlatformMulter {\n    const m = require(\"multer\")(options);\n\n    const makePromise = (multer: any, name: string) => {\n      // istanbul ignore next\n      if (!multer[name]) return;\n\n      const fn = multer[name];\n\n      multer[name] = function apply(...args: any[]) {\n        const middleware = Reflect.apply(fn, this, args);\n\n        return (req: any, res: any) => promisify(middleware)(req, res);\n      };\n    };\n\n    makePromise(m, \"any\");\n    makePromise(m, \"array\");\n    makePromise(m, \"fields\");\n    makePromise(m, \"none\");\n    makePromise(m, \"single\");\n\n    return m;\n  }\n\n  protected mapHandlers(handlers: any[], options: PlatformRouteWithoutHandlers = {}): any[] {\n    return handlers.reduce((list, handler, index) => {\n      if (typeof handler === \"string\") {\n        return list.concat(handler);\n      }\n\n      if (handler instanceof PlatformRouter) {\n        return list.concat(handler.callback());\n      }\n\n      return list.concat(\n        this.platformHandler.createHandler(handler, {\n          ...options,\n          isFinal: options.isFinal ? index === handlers.length - 1 : false\n        })\n      );\n    }, []);\n  }\n}\n","import {Injectable, ProviderScope} from \"@tsed/di\";\nimport {createFakeRawDriver} from \"./FakeRawDriver\";\nimport {PlatformHandler} from \"./PlatformHandler\";\nimport {PlatformRouter} from \"./PlatformRouter\";\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Application {}\n  }\n}\n\n/**\n * `PlatformApplication` is used to provide all routes collected by annotation `@Controller`.\n *\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class PlatformApplication<App = TsED.Application, Router = TsED.Router> extends PlatformRouter<Router> {\n  raw: App;\n  rawApp: App;\n  rawRouter: Router;\n\n  constructor(platformHandler: PlatformHandler) {\n    super(platformHandler);\n    this.rawApp = this.raw = PlatformApplication.createRawApp() as any;\n  }\n\n  protected static createRawApp(): any {\n    return createFakeRawDriver();\n  }\n\n  getApp(): App {\n    return this.raw;\n  }\n}\n","import {Constant, Inject} from \"@tsed/di\";\nimport {Exception} from \"@tsed/exceptions\";\nimport {Middleware, MiddlewareMethods} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\nimport {PlatformMulterField, PlatformMulterSettings} from \"../config\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\n\nexport interface MulterInputOptions {\n  fields: PlatformMulterField[];\n}\n\n/**\n * @middleware\n */\n@Middleware()\nexport class PlatformMulterMiddleware implements MiddlewareMethods {\n  @Constant(\"multer\", {})\n  settings: PlatformMulterSettings;\n\n  @Inject()\n  app: PlatformApplication;\n\n  async use(@Context() ctx: Context) {\n    try {\n      const {fields, options = {}} = ctx.endpoint.get(PlatformMulterMiddleware);\n      const settings: PlatformMulterSettings = {\n        ...this.settings,\n        ...options\n      };\n\n      /* istanbul ignore next */\n      if (settings.storage) {\n        delete settings.dest;\n      }\n\n      const middleware = this.app.multer(settings).fields(this.getFields({fields}));\n\n      return await middleware(ctx.getRequest(), ctx.getResponse());\n    } catch (er) {\n      throw er.code ? new Exception(er.code, `${er.message} ${er.field || \"\"}`.trim()) : er;\n    }\n  }\n\n  protected getFields(conf: MulterInputOptions) {\n    return conf.fields.map(({name, maxCount}) => ({name, maxCount}));\n  }\n}\n","import {Middleware, MiddlewareMethods} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\n\n/**\n * @deprecated Since 2020-11-30. Use PlatformAcceptMimesMiddleware.\n * @ignore\n */\n@Middleware()\nexport class GlobalAcceptMimesMiddleware implements MiddlewareMethods {\n  use(@Context() ctx: Context) {\n    return;\n  }\n}\n","import {uniq} from \"@tsed/core\";\nimport {Constant} from \"@tsed/di\";\nimport {NotAcceptable} from \"@tsed/exceptions\";\nimport {Middleware, MiddlewareMethods} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\n\n/**\n * @middleware\n * @platform\n */\n@Middleware()\nexport class PlatformAcceptMimesMiddleware implements MiddlewareMethods {\n  @Constant(\"acceptMimes\", [])\n  acceptMimes: string[];\n\n  public use(@Context() ctx: Context): void {\n    const {endpoint, request} = ctx;\n    const mimes = uniq((endpoint?.get(\"acceptMimes\") || []).concat(this.acceptMimes));\n\n    if (mimes.length && !request.accepts(mimes)) {\n      throw new NotAcceptable(mimes.join(\", \"));\n    }\n  }\n}\n","import {Context} from \"@tsed/platform-params\";\nimport {Middleware, MiddlewareMethods} from \"@tsed/platform-middlewares\";\n\n/**\n * @middleware\n * @deprecated Since 2020-11-30. Use PlatformAcceptMimesMiddleware.\n * @ignore\n */\n@Middleware()\nexport class AcceptMimesMiddleware implements MiddlewareMethods {\n  public use(@Context() ctx: Context): void {\n    return;\n  }\n}\n","import {PlatformContext} from \"../domain/PlatformContext\";\nimport {HandlerType} from \"../interfaces/HandlerType\";\n\nexport type PlatformCtxHandler = ($ctx: PlatformContext) => any | Promise<any>;\n\n/**\n * Create Ts.ED context handler\n * @param fn\n * @ignore\n */\nexport function useCtxHandler(fn: PlatformCtxHandler & {type?: HandlerType}) {\n  fn.type = HandlerType.CTX_FN;\n\n  return fn;\n}\n","import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {ParamMetadata, ParamTypes} from \"@tsed/platform-params\";\nimport {JsonMethodPath, OperationMethods} from \"@tsed/schema\";\nimport {EndpointMetadata} from \"../domain/EndpointMetadata\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {PlatformRouterMethods} from \"../interfaces/PlatformRouterMethods\";\nimport {bindEndpointMiddleware} from \"../middlewares/bindEndpointMiddleware\";\nimport {PlatformAcceptMimesMiddleware} from \"../middlewares/PlatformAcceptMimesMiddleware\";\nimport {PlatformMulterMiddleware} from \"../middlewares/PlatformMulterMiddleware\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\nimport {useCtxHandler} from \"../utils/useCtxHandler\";\n\n/**\n * @ignore\n */\nfunction formatMethod(method: string | undefined) {\n  return (method === OperationMethods.CUSTOM ? \"use\" : method || \"use\").toLowerCase();\n}\n\n/**\n * @ignore\n */\nexport class PlatformControllerBuilder {\n  constructor(private provider: ControllerProvider) {}\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService): PlatformRouterMethods {\n    const {\n      middlewares: {useBefore}\n    } = this.provider;\n\n    // Controller lifecycle\n    this.buildMiddlewares(useBefore) // Controller before-middleware\n      .buildEndpoints() // All endpoints and his middlewares\n      .buildChildrenCtrls(injector); // Children controllers\n\n    return this.provider.getRouter();\n  }\n\n  private buildEndpoints() {\n    const {endpoints} = this.provider;\n    const operationPaths: Map<string, JsonMethodPath> = new Map();\n    const getKey = (method: string, path: any) => `${method}-${path}`;\n\n    const updateFinalRouteState = (key: string) => {\n      if (operationPaths.has(key)) {\n        operationPaths.get(key)!.isFinal = false;\n      }\n    };\n\n    const setFinalRoute = (key: string, operationPath: JsonMethodPath) => {\n      operationPaths.set(key, operationPath);\n      operationPath.isFinal = true;\n    };\n\n    endpoints.forEach(({operation}) => {\n      operation?.operationPaths.forEach((operationPath) => {\n        if (operationPath.method !== OperationMethods.CUSTOM) {\n          const key = getKey(operationPath.method, operationPath.path);\n          updateFinalRouteState(key);\n          updateFinalRouteState(getKey(OperationMethods.ALL, operationPath.path));\n\n          setFinalRoute(key, operationPath);\n        }\n      });\n    });\n\n    endpoints.forEach((endpoint) => {\n      this.buildEndpoint(endpoint);\n    });\n\n    return this;\n  }\n\n  private buildEndpoint(endpoint: EndpointMetadata) {\n    const {beforeMiddlewares, middlewares: mldwrs, afterMiddlewares, operation} = endpoint;\n    const {\n      middlewares: {use, useAfter}\n    } = this.provider;\n\n    const router = this.provider.getRouter<PlatformRouter>();\n    // Endpoint lifecycle\n    let handlers: any[] = [];\n\n    const hasFiles = [...endpoint.children.values()].find((item: ParamMetadata) => item.paramType === ParamTypes.FILES);\n\n    handlers = handlers\n      .concat(useCtxHandler(bindEndpointMiddleware(endpoint)))\n      .concat(PlatformAcceptMimesMiddleware)\n      .concat(hasFiles && PlatformMulterMiddleware)\n      .concat(use) // Controller use-middlewares\n      .concat(beforeMiddlewares) // Endpoint before-middlewares\n      // .concat(endpoint.cache && PlatformCacheMiddleware)\n      .concat(mldwrs) // Endpoint middlewares\n      .concat(endpoint) // Endpoint metadata\n      .concat(afterMiddlewares) // Endpoint after-middlewares\n      .concat(useAfter) // Controller after middlewares (equivalent to afterEach)\n      .filter((item: any) => !!item);\n\n    // Add handlers to the router\n    operation?.operationPaths.forEach(({path, method, isFinal}) => {\n      router.addRoute({\n        method: formatMethod(method),\n        path,\n        handlers,\n        isFinal\n      });\n    });\n\n    if (!operation?.operationPaths.size) {\n      router.use(...handlers);\n    }\n  }\n\n  private buildChildrenCtrls(injector: InjectorService) {\n    const {children} = this.provider;\n    const router = this.provider.getRouter<PlatformRouter>();\n\n    children.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      new PlatformControllerBuilder(provider).build(injector);\n\n      router.use(provider.path, provider.getRouter<PlatformRouter>());\n    });\n  }\n\n  private buildMiddlewares(middlewares: any[]) {\n    const router = this.provider.getRouter<PlatformRouter>();\n\n    middlewares\n      .filter((o) => typeof o === \"function\")\n      .forEach((middleware: any) => {\n        router.use(middleware);\n      });\n\n    return this;\n  }\n}\n","import {Injectable, Opts, ProviderScope, Scope} from \"@tsed/di\";\nimport {IncomingHttpHeaders, IncomingMessage} from \"http\";\nimport type {PlatformContext} from \"../domain/PlatformContext\";\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Request {\n      id: string;\n      $ctx: PlatformContext;\n    }\n  }\n}\n\n/**\n * Platform Request abstraction layer.\n * @platform\n */\n@Injectable()\n@Scope(ProviderScope.INSTANCE)\nexport class PlatformRequest<T extends {[key: string]: any} = any> {\n  constructor(@Opts public raw: T) {}\n\n  get secure(): boolean {\n    return this.raw.secure;\n  }\n\n  get host(): string {\n    return this.get(\"host\");\n  }\n\n  get protocol(): string {\n    return this.raw.protocol;\n  }\n\n  /**\n   * Get the url of the request.\n   *\n   * Is equivalent of `express.response.originalUrl || express.response.url`.\n   */\n  get url(): string {\n    return this.raw.originalUrl || this.raw.url;\n  }\n\n  get headers(): IncomingHttpHeaders {\n    return this.raw.headers;\n  }\n\n  get method(): string {\n    return this.raw.method;\n  }\n\n  /**\n   * Contains key-value pairs of data submitted in the request body. By default, it is `undefined`, and is populated when you use\n   * `body-parsing` middleware such as `express.json()` or `express.urlencoded()`.\n   */\n  get body(): any {\n    return this.raw.body;\n  }\n\n  get rawBody(): any {\n    return this.raw.rawBody;\n  }\n\n  /**\n   * When using `cookie-parser` middleware, this property is an object that contains cookies sent by the request.\n   * If the request contains no cookies, it defaults to `{}`.\n   */\n  get cookies(): {[key: string]: any} {\n    return this.raw.cookies;\n  }\n\n  /**\n   * This property is an object containing properties mapped to the named route `parameters`.\n   * For example, if you have the route `/user/:name`, then the `name` property is available as `req.params.name`.\n   * This object defaults to `{}`.\n   */\n  get params(): {[key: string]: any} {\n    return this.raw.params;\n  }\n\n  /**\n   * This property is an object containing a property for each query string parameter in the route.\n   * When query parser is set to disabled, it is an empty object `{}`, otherwise it is the result of the configured query parser.\n   */\n  get query(): {[key: string]: any} {\n    return this.raw.query;\n  }\n\n  /**\n   * This property is an object containing a property for each session attributes set by any code.\n   * It require to install a middleware like express-session to work.\n   */\n  get session(): {[key: string]: any} {\n    return this.raw.session as any;\n  }\n\n  get files() {\n    return this.raw.files;\n  }\n\n  /**\n   * Return the original request framework instance\n   */\n  get request() {\n    return this.getRequest();\n  }\n\n  /**\n   * Return the original request node.js instance\n   */\n  get req() {\n    return this.getReq();\n  }\n\n  /**\n   * Returns the HTTP request header specified by field. The match is case-insensitive.\n   *\n   * ```typescript\n   * request.get('Content-Type') // => \"text/plain\"\n   * ```\n   *\n   * @param name\n   */\n  get(name: string) {\n    return this.raw.get(name);\n  }\n\n  /**\n   * Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field. The method returns the best match, or if none of the specified content types is acceptable, returns false (in which case, the application should respond with 406 \"Not Acceptable\").\n   *\n   * The type value may be a single MIME type string (such as “application/json”), an extension name such as “json”, a comma-delimited list, or an array. For a list or array, the method returns the best match (if any).\n   *\n   * @param mime\n   */\n  accepts(mime: string): string | false;\n\n  accepts(mime: string[]): string[] | false;\n\n  accepts(mime?: string | string[]): string | string[] | false {\n    // @ts-ignore\n    return this.raw.accepts(mime);\n  }\n\n  isAborted() {\n    return this.raw.aborted;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.raw;\n  }\n\n  /**\n   * Return the Framework response object (express, koa, etc...)\n   */\n  getRequest<Req = T>(): Req {\n    return this.raw as any;\n  }\n\n  /**\n   * Return the Node.js response object\n   */\n  getReq(): IncomingMessage {\n    return this.raw as any;\n  }\n}\n","import {isBoolean, isNumber, isStream, isString} from \"@tsed/core\";\nimport {Inject, Injectable, Opts, ProviderScope, Scope} from \"@tsed/di\";\nimport {PlatformViews} from \"@tsed/platform-views\";\nimport {ServerResponse} from \"http\";\n\nconst onFinished = require(\"on-finished\");\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Response {\n      // req: any;\n    }\n  }\n}\n\n/**\n * Platform Response abstraction layer.\n * @platform\n */\n@Injectable()\n@Scope(ProviderScope.INSTANCE)\nexport class PlatformResponse<T extends {[key: string]: any} = any> {\n  @Inject()\n  platformViews: PlatformViews;\n\n  data: any;\n\n  constructor(@Opts public raw: T) {}\n\n  /**\n   * Get the current statusCode\n   */\n  get statusCode() {\n    return this.raw.statusCode;\n  }\n\n  /**\n   * An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to app.locals.\n   *\n   * This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.\n   */\n  get locals() {\n    return this.raw.locals;\n  }\n\n  /**\n   * Return the original response framework instance\n   */\n  get response() {\n    return this.getResponse();\n  }\n\n  /**\n   * Return the original response node.js instance\n   */\n  get res() {\n    return this.getRes();\n  }\n\n  static onFinished(res: any, cb: Function) {\n    onFinished(res, cb);\n  }\n\n  /**\n   * Returns the HTTP response header specified by field. The match is case-insensitive.\n   *\n   * ```typescript\n   * response.get('Content-Type') // => \"text/plain\"\n   * ```\n   *\n   * @param name\n   */\n  get(name: string) {\n    return this.raw.get(name);\n  }\n\n  getHeaders(): Record<string, number | string | string[]> {\n    return this.raw.getHeaders();\n  }\n\n  /**\n   * Return the Framework response object (express, koa, etc...)\n   */\n  getResponse<Res = T>(): Res {\n    return this.raw as any;\n  }\n\n  /**\n   * Return the Node.js response object\n   */\n  getRes(): ServerResponse {\n    return this.raw as any;\n  }\n\n  hasStatus() {\n    return this.statusCode !== 200;\n  }\n\n  /**\n   * Sets the HTTP status for the response.\n   *\n   * @param status\n   */\n  status(status: number) {\n    this.raw.status(status);\n\n    return this;\n  }\n\n  /**\n   * Set header `field` to `val`, or pass\n   * an object of header fields.\n   *\n   * Examples:\n   * ```typescript\n   * response.setHeaders({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   * ```\n   *\n   * Aliased as `res.header()`.\n   */\n  setHeaders(headers: {[key: string]: any}) {\n    // apply headers\n    Object.entries(headers).forEach(([key, item]) => {\n      this.setHeader(key, item);\n    });\n\n    return this;\n  }\n\n  setHeader(key: string, item: any) {\n    this.raw.set(key, String(item));\n\n    return this;\n  }\n\n  /**\n   * Set `Content-Type` response header with `type` through `mime.lookup()`\n   * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n   *\n   * Examples:\n   *\n   *     res.type('.html');\n   *     res.type('html');\n   *     res.type('json');\n   *     res.type('application/json');\n   *     res.type('png');\n   */\n  contentType(contentType: string) {\n    this.raw.contentType(contentType);\n\n    return this;\n  }\n\n  contentLength(length: number) {\n    this.setHeader(\"Content-Length\", length);\n    return this;\n  }\n\n  getContentLength() {\n    if (this.get(\"Content-Length\")) {\n      return parseInt(this.get(\"Content-Length\"), 10) || 0;\n    }\n  }\n\n  getContentType() {\n    return (this.get(\"Content-Type\") || \"\").split(\";\")[0];\n  }\n\n  /**\n   * Sets the HTTP response Content-Disposition header field to “attachment”.\n   * If a filename is given, then it sets the Content-Type based on the extension name via res.type(), and sets the Content-Disposition “filename=” parameter.\n   *\n   * ```typescript\n   * res.attachment()\n   * // Content-Disposition: attachment\n   *\n   * res.attachment('path/to/logo.png')\n   * // Content-Disposition: attachment; filename=\"logo.png\"\n   * // Content-Type: image/png\n   * ```\n   *\n   * @param filename\n   */\n  attachment(filename: string) {\n    this.raw.attachment(filename);\n    return this;\n  }\n\n  /**\n   * Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an [HTTP status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n   * If not specified, status defaults to `302 Found`.\n   *\n   * @param status\n   * @param url\n   */\n  redirect(status: number, url: string) {\n    this.raw.redirect(status, url);\n\n    return this;\n  }\n\n  /**\n   * Sets the response Location HTTP header to the specified path parameter.\n   *\n   * @param location\n   */\n  location(location: string) {\n    this.raw.location(location);\n\n    return this;\n  }\n\n  /**\n   * Stream the given data.\n   *\n   * @param data\n   */\n  stream(data: ReadableStream | any) {\n    data.pipe(this.raw);\n\n    return this;\n  }\n\n  /**\n   * Renders a view and sends the rendered HTML string to the client.\n   *\n   * @param path\n   * @param options\n   */\n  async render(path: string, options: any = {}) {\n    return this.platformViews.render(path, {\n      ...this.locals,\n      ...options\n    });\n  }\n\n  /**\n   * Send any data to your consumer.\n   *\n   * This method accept a ReadableStream, a plain object, boolean, string, number, null and undefined data.\n   * It choose the better way to send the data.\n   *\n   * @param data\n   */\n  body(data: any) {\n    this.data = data;\n    if (data === undefined) {\n      this.raw.send();\n\n      return this;\n    }\n\n    if (isStream(data)) {\n      this.stream(data);\n\n      return this;\n    }\n\n    if (Buffer.isBuffer(data)) {\n      if (!this.getContentType()) {\n        this.contentType(\"application/octet-stream\");\n      }\n\n      this.contentLength(data.length);\n      this.raw.send(data);\n\n      return this;\n    }\n\n    if (isBoolean(data) || isNumber(data) || isString(data) || data === null) {\n      this.raw.send(data);\n\n      return this;\n    }\n\n    this.raw.json(data);\n\n    return this;\n  }\n\n  getBody() {\n    return this.data;\n  }\n\n  /**\n   * Add a listener to handler the end of the request/response.\n   * @param cb\n   */\n  onEnd(cb: Function): this {\n    PlatformResponse.onFinished(this.getRes(), cb);\n\n    return this;\n  }\n\n  isDone(): boolean {\n    if (!this.raw) {\n      return true;\n    }\n\n    const res = this.getRes();\n\n    return Boolean(this.isHeadersSent() || res.writableEnded || res.writableFinished);\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.raw;\n    delete this.data;\n  }\n\n  isHeadersSent() {\n    return this.getRes().headersSent;\n  }\n}\n","import {ContextMethods, DIContext, DIContextOptions} from \"@tsed/di\";\nimport {IncomingMessage, ServerResponse} from \"http\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\ndeclare global {\n  namespace TsED {\n    export interface Context extends PlatformContext {}\n  }\n}\n\nexport interface PlatformContextOptions extends DIContextOptions {\n  url: string;\n  ignoreUrlPatterns?: any[];\n  response?: PlatformResponse;\n  request?: PlatformRequest;\n  endpoint?: EndpointMetadata;\n}\n\nexport class PlatformContext extends DIContext implements ContextMethods {\n  /**\n   * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.\n   */\n  public endpoint: EndpointMetadata;\n  /**\n   * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n   */\n  public data: any;\n  /**\n   * The current @@PlatformResponse@@.\n   */\n  public response: PlatformResponse;\n  /**\n   * The current @@PlatformRequest@@.\n   */\n  public request: PlatformRequest;\n  /**\n   *\n   */\n  public readonly url: string;\n\n  #ignoreUrlPatterns: RegExp[] = [];\n\n  constructor({response, request, endpoint, url, ignoreUrlPatterns = [], ...options}: PlatformContextOptions) {\n    super({\n      ...options,\n      ignoreLog: () => {\n        return this.#ignoreUrlPatterns.find((reg) => !!this.url.match(reg));\n      }\n    });\n\n    this.url = url;\n\n    endpoint && (this.endpoint = endpoint);\n\n    this.#ignoreUrlPatterns = ignoreUrlPatterns.map((pattern: string | RegExp) =>\n      typeof pattern === \"string\" ? new RegExp(pattern, \"gi\") : pattern\n    );\n\n    if (response) {\n      this.response = response;\n      this.container.set(PlatformResponse, response);\n    }\n\n    if (request) {\n      this.request = request;\n      this.container.set(PlatformRequest, request);\n    }\n\n    this.container.set(PlatformContext, this);\n  }\n\n  get app() {\n    return this.injector.get<PlatformApplication>(PlatformApplication)!;\n  }\n\n  async destroy() {\n    await super.destroy();\n    this.response.destroy();\n    this.request.destroy();\n\n    // @ts-ignore\n    delete this.endpoint;\n    // @ts-ignore\n    delete this.response;\n    // @ts-ignore\n    delete this.request;\n  }\n\n  isDone() {\n    return !this.request || !this.response;\n  }\n\n  /**\n   * Return the framework request instance (Express, Koa, etc...)\n   */\n  getRequest<Req = any>(): Req {\n    return this.request.getRequest<Req>();\n  }\n\n  /**\n   * Return the framework response instance (Express, Koa, etc...)\n   */\n  getResponse<Res = any>(): Res {\n    return this.response.getResponse<Res>();\n  }\n\n  /**\n   * Get Node.js request\n   */\n  getReq(): IncomingMessage {\n    return this.request.getReq();\n  }\n\n  /**\n   * Get Node.js response\n   */\n  getRes(): ServerResponse {\n    return this.response.getRes();\n  }\n\n  /**\n   * Return the original application instance.\n   */\n  getApp<T = any>(): T {\n    return this.app.getApp() as any;\n  }\n}\n","import {ParamTypes} from \"@tsed/platform-params\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\nimport {ControllerProvider} from \"./ControllerProvider\";\n\nexport interface PlatformRouterDetailsOptions {\n  provider: ControllerProvider;\n  endpoint: EndpointMetadata;\n  method: string;\n  url: string;\n}\n\nexport class PlatformRouteDetails {\n  readonly method: string;\n  readonly url: string;\n  readonly rawBody: boolean;\n  readonly endpoint: EndpointMetadata;\n  readonly provider: ControllerProvider;\n\n  constructor({provider, endpoint, method, url}: PlatformRouterDetailsOptions) {\n    this.provider = provider;\n    this.endpoint = endpoint;\n    this.method = method;\n    this.url = url;\n    this.rawBody = !!endpoint.params.find((param) => param.paramType === ParamTypes.RAW_BODY);\n  }\n\n  get name() {\n    return `${this.endpoint.targetName}.${this.methodClassName}()`;\n  }\n\n  get className() {\n    return this.endpoint.targetName;\n  }\n\n  get methodClassName() {\n    return String(this.endpoint.propertyKey);\n  }\n\n  get parameters() {\n    return this.endpoint.params;\n  }\n\n  toJSON() {\n    return {\n      method: this.method,\n      name: this.name,\n      url: this.url,\n      className: this.className,\n      methodClassName: this.methodClassName,\n      parameters: this.parameters,\n      rawBody: this.rawBody\n    };\n  }\n}\n","export const ROUTER_OPTIONS = Symbol.for(\"ROUTER_OPTIONS\");\n","import {Enumerable, NotEnumerable} from \"@tsed/core\";\nimport {Provider, ProviderType, TokenProvider} from \"@tsed/di\";\nimport {JsonEntityStore} from \"@tsed/schema\";\nimport {EndpointMetadata} from \"./EndpointMetadata\";\nimport {ROUTER_OPTIONS} from \"../constants/routerOptions\";\nimport {PlatformRouterMethods} from \"../interfaces/PlatformRouterMethods\";\nimport {ControllerMiddlewares} from \"../decorators/class/controller\";\n\nexport class ControllerProvider<T = any> extends Provider<T> {\n  @NotEnumerable()\n  readonly entity: JsonEntityStore;\n\n  @NotEnumerable()\n  private router: PlatformRouterMethods;\n\n  constructor(provide: any) {\n    super(provide);\n    this.type = ProviderType.CONTROLLER;\n    this.entity = JsonEntityStore.from(provide);\n  }\n\n  get path() {\n    return this.entity.path;\n  }\n\n  @Enumerable()\n  set path(path: string) {\n    this.entity.path = path;\n  }\n\n  /**\n   *\n   * @returns {EndpointMetadata[]}\n   */\n  get endpoints(): EndpointMetadata[] {\n    return EndpointMetadata.getEndpoints(this.provide);\n  }\n\n  get children(): TokenProvider[] {\n    return this.store.get(\"childrenControllers\", []);\n  }\n\n  /**\n   *\n   * @returns {ControllerProvider}\n   */\n  get parent(): TokenProvider | undefined {\n    return this.store.get(\"parentController\");\n  }\n\n  /**\n   *\n   */\n  get routerOptions(): any {\n    return this.store.get(ROUTER_OPTIONS) || ({} as any);\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set routerOptions(value: any) {\n    this.store.set(ROUTER_OPTIONS, value);\n  }\n\n  /**\n   *\n   * @returns {any[]}\n   */\n  get middlewares(): ControllerMiddlewares {\n    return Object.assign(\n      {\n        use: [],\n        useAfter: [],\n        useBefore: []\n      },\n      this.store.get(\"middlewares\", {})\n    );\n  }\n\n  /**\n   *\n   * @param middlewares\n   */\n  set middlewares(middlewares: ControllerMiddlewares) {\n    const mdlwrs = this.middlewares;\n    const concat = (key: string, a: any, b: any) => (a[key] = a[key].concat(b[key]));\n\n    Object.keys(middlewares).forEach((key: string) => {\n      concat(key, mdlwrs, middlewares);\n    });\n    this.store.set(\"middlewares\", mdlwrs);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasChildren(): boolean {\n    return !!this.children.length;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  public hasParent(): boolean {\n    return !!this.store.get(\"parentController\");\n  }\n\n  public getRouter<T extends PlatformRouterMethods = any>(): T {\n    return this.router as any;\n  }\n\n  public setRouter(router: PlatformRouterMethods) {\n    this.router = router;\n\n    return this;\n  }\n}\n","import {DecoratorTypes, prototypeOf, Type} from \"@tsed/core\";\nimport {getProperties, JsonEntityComponent, JsonEntityStore} from \"@tsed/schema\";\n\n@JsonEntityComponent(DecoratorTypes.PROP)\nexport class PropertyMetadata extends JsonEntityStore {\n  static get(target: Type<any>, propertyKey: string | symbol) {\n    return JsonEntityStore.from<PropertyMetadata>(prototypeOf(target), propertyKey);\n  }\n\n  /**\n   * @deprecated Since 2020-11-11. Use getProperties from @tsed/schema\n   */\n  static getProperties(target: Type<any>, options: Partial<{withIgnoredProps: boolean}> = {}) {\n    return getProperties(target, options);\n  }\n}\n","import {ControllerProvider} from \"../domain/ControllerProvider\";\n\nexport function getControllerPath(basePath: string, provider: ControllerProvider): string {\n  return (basePath === provider.path ? provider.path : (basePath || \"\") + provider.path).replace(/\\/\\//gi, \"/\");\n}\n","import {Injectable, InjectorService, ProviderScope, ProviderType, TokenProvider} from \"@tsed/di\";\nimport {ControllerProvider, EndpointMetadata, PlatformRouteDetails} from \"../domain\";\nimport {Route, RouteController} from \"../interfaces/Route\";\nimport {getControllerPath} from \"../utils/getControllerPath\";\nimport {PlatformApplication} from \"./PlatformApplication\";\n\n/**\n * `Platform` is used to provide all routes collected by annotation `@Controller`.\n *\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class Platform {\n  #routes: PlatformRouteDetails[] = [];\n  #controllers: RouteController[] = [];\n\n  constructor(readonly injector: InjectorService, readonly platformApplication: PlatformApplication) {}\n\n  get app() {\n    return this.platformApplication;\n  }\n\n  get routes(): PlatformRouteDetails[] {\n    return this.#routes;\n  }\n\n  public addRoutes(routes: Route[]) {\n    routes.forEach((routeSettings) => {\n      this.addRoute(routeSettings.route, routeSettings.token);\n    });\n  }\n\n  public addRoute(endpoint: string, token: TokenProvider) {\n    const {injector} = this;\n\n    if (injector.hasProvider(token)) {\n      const provider: ControllerProvider = injector.getProvider(token)! as any;\n\n      if (provider.type === ProviderType.CONTROLLER) {\n        const route = getControllerPath(endpoint, provider);\n        if (!provider.hasParent()) {\n          const routes = this.buildRoutes(route, provider);\n\n          this.#routes.push(...routes);\n          this.#controllers.push({\n            route,\n            provider\n          });\n\n          this.app.use(route, ...[].concat(provider.getRouter().callback()));\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {PlatformRouteDetails[]}\n   */\n  public getRoutes(): PlatformRouteDetails[] {\n    return this.#routes;\n  }\n\n  public getMountedControllers(): RouteController[] {\n    return this.#controllers;\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(endpointUrl: string, ctrl: ControllerProvider): PlatformRouteDetails[] {\n    const {injector} = this;\n\n    let routes: PlatformRouteDetails[] = [];\n\n    routes = ctrl.children\n      .map((ctrl) => injector.getProvider(ctrl))\n      .reduce((routes: PlatformRouteDetails[], provider: ControllerProvider) => {\n        return routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));\n      }, routes);\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      endpoint.operationPaths.forEach(({path, method}) => {\n        if (method) {\n          routes.push(\n            new PlatformRouteDetails({\n              provider: ctrl,\n              endpoint,\n              method,\n              url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\")\n            })\n          );\n        }\n      });\n    });\n\n    return routes;\n  }\n}\n","import {InjectorService, Module, ProviderType} from \"@tsed/di\";\nimport {PlatformControllerBuilder} from \"./builder/PlatformControllerBuilder\";\nimport {ControllerProvider} from \"./domain/ControllerProvider\";\nimport {Route} from \"./interfaces/Route\";\nimport {ConverterService} from \"./services/ConverterService\";\nimport {Platform} from \"./services/Platform\";\nimport {PlatformRouter} from \"./services/PlatformRouter\";\n\n/**\n * @ignore\n */\n@Module({\n  imports: [InjectorService, ConverterService, Platform]\n})\nexport class PlatformModule {\n  constructor(protected injector: InjectorService, protected platform: Platform) {\n    this.createRoutersFromControllers();\n  }\n\n  /**\n   * Create routers from the collected controllers\n   */\n  public createRoutersFromControllers() {\n    const {injector} = this;\n\n    return injector\n      .getProviders(ProviderType.CONTROLLER)\n      .map((provider: ControllerProvider) => {\n        provider.setRouter(PlatformRouter.create(injector, provider.routerOptions));\n\n        if (!provider.hasParent()) {\n          return new PlatformControllerBuilder(provider as ControllerProvider).build(injector);\n        }\n      })\n      .filter(Boolean);\n  }\n\n  public $$loadRoutes() {\n    const routes = this.injector.settings.get<Route[]>(\"routes\");\n\n    this.platform.addRoutes(routes);\n  }\n}\n","import {GlobalProviders, InjectorService, setLoggerLevel} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport {PlatformConfiguration} from \"../config/services/PlatformConfiguration\";\n\n$log.name = \"TSED\";\n\nexport function createInjector(settings: Partial<TsED.Configuration> = {}) {\n  const injector = new InjectorService();\n  injector.settings = createSettingsService(injector);\n  injector.logger = $log;\n  injector.settings.set(settings);\n\n  setLoggerLevel(injector);\n\n  return injector;\n}\n\nfunction createSettingsService(injector: InjectorService): PlatformConfiguration & TsED.Configuration {\n  const provider = GlobalProviders.get(PlatformConfiguration)!.clone();\n\n  provider.instance = injector.invoke<PlatformConfiguration>(provider.useClass);\n  injector.addProvider(PlatformConfiguration, provider);\n\n  return provider.instance as any;\n}\n","import {InjectorService} from \"@tsed/di\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\n\nexport function createPlatformApplication(injector: InjectorService): void {\n  injector.forkProvider(PlatformApplication);\n}\n","import {Type} from \"@tsed/core\";\nimport {Inject} from \"@tsed/di\";\nimport Http from \"http\";\n\n/**\n * Inject the Http.Server instance.\n *\n * ### Example\n *\n * ```typescript\n * import {HttpServer, Service} from \"@tsed/common\";\n *\n * @Service()\n * export default class OtherService {\n *    constructor(@HttpServer httpServer: HttpServer) {}\n * }\n * ```\n *\n * > Note: TypeScript transform and store `HttpServer` as `Function` type in the metadata. So to inject a factory, you must use the `@Inject(type)` decorator.\n *\n * @param {Type<any>} target\n * @param {string} targetKey\n * @param {TypedPropertyDescriptor<Function> | number} descriptor\n * @returns {any}\n * @decorator\n */\nexport function HttpServer(target: Type<any>, targetKey: string, descriptor: TypedPropertyDescriptor<Function> | number) {\n  return Inject(HttpServer)(target, targetKey, descriptor);\n}\n\nexport type HttpServer = Http.Server;\n","import Http from \"http\";\nimport Https from \"https\";\n\nexport function listenServer(\n  http: Http.Server | Https.Server,\n  settings: {address: string | number; port: number}\n): Promise<{address: string; port: number}> {\n  const {address, port} = settings;\n\n  const promise = new Promise((resolve, reject) => {\n    http.on(\"listening\", resolve);\n    http.on(\"error\", reject);\n  }).then(() => {\n    const port = (http.address() as any).port;\n\n    return {address: settings.address as string, port};\n  });\n\n  http.listen(port, address as any);\n\n  return promise;\n}\n","import {InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport Http from \"http\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {HttpServer} from \"../decorators/httpServer\";\nimport {listenServer} from \"./listenServer\";\n\nexport function createHttpServer(injector: InjectorService): void {\n  injector.forkProvider(HttpServer);\n}\n\nregisterProvider({\n  provide: HttpServer,\n  deps: [PlatformApplication],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(platformApplication: PlatformApplication) {\n    return Http.createServer(platformApplication.callback());\n  }\n});\n\nexport async function listenHttpServer(injector: InjectorService) {\n  const {settings} = injector;\n  const server = injector.get<HttpServer>(HttpServer);\n\n  if (settings.httpPort !== false && server) {\n    const {address, port} = settings.getHttpPort();\n    injector.logger.debug(`Start server on http://${address}:${port}`);\n\n    const options = await listenServer(server, {address, port});\n    settings.setHttpPort(options);\n\n    injector.logger.info(`Listen server on http://${options.address}:${options.port}`);\n  }\n}\n","import {Type} from \"@tsed/core\";\nimport {Inject} from \"@tsed/di\";\nimport Https from \"https\";\n\n/**\n * Inject the Https.Server instance.\n *\n * ### Example\n *\n * ```typescript\n * import {HttpsServer, Service} from \"@tsed/common\";\n *\n * @Service()\n * export default class OtherService {\n *    constructor(@HttpsServer httpServer: HttpServer) {}\n * }\n * ```\n *\n * > Note: TypeScript transform and store `HttpsServer` as `Function` type in the metadata. So to inject a factory, you must use the `@Inject(type)` decorator.\n *\n * @param {Type<any>} target\n * @param {string} targetKey\n * @param {TypedPropertyDescriptor<Function> | number} descriptor\n * @returns {any}\n * @decorator\n */\nexport function HttpsServer(target: Type<any>, targetKey: string, descriptor: TypedPropertyDescriptor<Function> | number) {\n  return Inject(HttpsServer)(target, targetKey, descriptor);\n}\n\nexport type HttpsServer = Https.Server;\n","import {Configuration, InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport Https from \"https\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {HttpsServer} from \"../decorators/httpsServer\";\nimport {listenServer} from \"./listenServer\";\n\nexport function createHttpsServer(injector: InjectorService): void {\n  injector.forkProvider(HttpsServer);\n}\n\nregisterProvider({\n  provide: HttpsServer,\n  deps: [PlatformApplication, Configuration],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(platformApplication: PlatformApplication, settings: Configuration) {\n    const options = settings.httpsOptions!;\n\n    return Https.createServer(options, platformApplication.callback());\n  }\n});\n\nexport async function listenHttpsServer(injector: InjectorService) {\n  const {settings} = injector;\n  const server = injector.get<HttpsServer>(HttpsServer);\n\n  if (settings.httpsPort !== false && server) {\n    const {address, port} = settings.getHttpsPort();\n    injector.logger.debug(`Start server on https://${address}:${port}`);\n\n    const options = await listenServer(server, {address, port});\n    settings.setHttpsPort(options);\n\n    injector.logger.info(`Listen server on https://${options.address}:${options.port}`);\n  }\n}\n","import {Container, createContainer, InjectorService, LocalsContainer} from \"@tsed/di\";\nimport {PlatformModule} from \"../PlatformModule\";\n\n/**\n * @ignore\n * @deprecated User injector.load(container, module) instead\n */\nexport async function loadInjector(injector: InjectorService, container: Container = createContainer()): Promise<LocalsContainer<any>> {\n  injector.bootstrap(container);\n  return injector.load(container, PlatformModule);\n}\n","import {$log, colorize} from \"@tsed/logger\";\nimport {PlatformRouteDetails} from \"../domain/PlatformRouteDetails\";\n\nexport function printRoutes(routes: PlatformRouteDetails[]) {\n  const mapColor: {[key: string]: string} = {\n    GET: \"green\",\n    POST: \"yellow\",\n    PUT: \"blue\",\n    DELETE: \"red\",\n    PATCH: \"magenta\",\n    ALL: \"cyan\"\n  };\n\n  const list = routes.map((route) => {\n    const obj = route.toJSON();\n    const method = obj.method.toUpperCase();\n\n    obj.method = {\n      length: method.length,\n      toString: () => {\n        return colorize(method, mapColor[method]);\n      }\n    } as any;\n\n    return obj;\n  });\n\n  const str = $log.drawTable(list, {\n    padding: 1,\n    header: {\n      method: \"Method\",\n      url: \"Endpoint\",\n      name: \"Class method\"\n    }\n  });\n\n  return \"\\n\" + str.trim();\n}\n","import {InjectorService} from \"@tsed/di\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\nconst uuidv4 = require(\"uuid\").v4;\nconst defaultReqIdBuilder = (req: any) => req.get(\"x-request-id\") || uuidv4().replace(/-/gi, \"\");\n\n/**\n * Create the TsED context to wrap request, response, injector, etc...\n * @param injector\n * @param request\n * @param response\n * @ignore\n */\nexport async function createContext(\n  injector: InjectorService,\n  request: PlatformRequest,\n  response: PlatformResponse\n): Promise<PlatformContext> {\n  const {level, ignoreUrlPatterns, maxStackSize, reqIdBuilder = defaultReqIdBuilder} = injector.settings.logger;\n\n  const req = request.getRequest();\n  const id = reqIdBuilder(req);\n\n  const ctx = new PlatformContext({\n    id,\n    logger: injector.logger,\n    url: request.url,\n    ignoreUrlPatterns,\n    level,\n    maxStackSize,\n    injector,\n    response,\n    request\n  });\n\n  req.$ctx = ctx;\n\n  response.setHeader(\"x-request-id\", id);\n\n  response.onEnd(async () => {\n    await ctx.emit(\"$onResponse\", ctx);\n    await ctx.destroy();\n    delete req.$ctx;\n  });\n\n  await ctx.emit(\"$onRequest\", ctx);\n\n  return ctx;\n}\n","import {classOf, constructorOf, nameOf, toMap, Type} from \"@tsed/core\";\nimport {Container, createContainer, getConfiguration, importProviders, InjectorService, IProvider, setLoggerLevel} from \"@tsed/di\";\nimport {PerfLogger} from \"@tsed/perf\";\nimport {getMiddlewaresForHook} from \"@tsed/platform-middlewares\";\nimport {PlatformViews} from \"@tsed/platform-views\";\nimport {GlobalAcceptMimesMiddleware, PlatformLogMiddleware} from \"../middlewares\";\nimport {PlatformModule} from \"../PlatformModule\";\nimport {Platform} from \"../services/Platform\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformHandler} from \"../services/PlatformHandler\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\n\nimport {\n  createHttpServer,\n  createHttpsServer,\n  createInjector,\n  createPlatformApplication,\n  listenHttpServer,\n  listenHttpsServer,\n  printRoutes\n} from \"../utils\";\n\nconst SKIP_HOOKS = [\"$beforeInit\", \"$afterInit\", \"$onInit\", \"$onMountingMiddlewares\"];\n\n/**\n * @ignore\n */\nexport interface PlatformType<T = any> extends Type<T> {\n  providers: IProvider[];\n}\n\nconst {bind, start, end, log} = PerfLogger.get(\"bootstrap\");\n\n/**\n * @ignore\n */\nexport interface PlatformBootstrap {\n  bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformBuilder>;\n}\n\n/**\n * @platform\n */\nexport abstract class PlatformBuilder<App = TsED.Application, Router = TsED.Router> {\n  static currentPlatform: Type<PlatformBuilder> & PlatformBootstrap;\n  readonly name: string = \"\";\n  protected startedAt = new Date();\n  protected locals: Container;\n  #rootModule: any;\n  #injector: InjectorService;\n  #providers: Map<Type, IProvider>;\n\n  constructor({name, providers}: {name: string; providers: IProvider[]}) {\n    this.name = name;\n    this.#providers = toMap<any, IProvider>(providers, \"provide\");\n\n    this.locals = new Container();\n\n    this.useProvider(PlatformHandler, this.#providers.get(PlatformHandler))\n      .useProvider(PlatformResponse, this.#providers.get(PlatformResponse))\n      .useProvider(PlatformRequest, this.#providers.get(PlatformRequest))\n      .useProvider(PlatformRouter, this.#providers.get(PlatformRouter))\n      .useProvider(PlatformApplication, this.#providers.get(PlatformApplication))\n      .useProvider(Platform, this.#providers.get(Platform));\n  }\n\n  get injector(): InjectorService {\n    return this.#injector;\n  }\n\n  get rootModule(): any {\n    return this.#rootModule;\n  }\n\n  get app(): PlatformApplication<App, Router> {\n    return this.injector.get<PlatformApplication<App, Router>>(PlatformApplication)!;\n  }\n\n  get platform() {\n    return this.injector.get<Platform>(Platform)!;\n  }\n\n  /**\n   * Return the settings configured by the decorator @@Configuration@@.\n   *\n   * ```typescript\n   * @Configuration({\n   *    rootDir: Path.resolve(__dirname),\n   *    port: 8000,\n   *    httpsPort: 8080,\n   *    mount: {\n   *      \"/rest\": \"${rootDir}/controllers/**\\/*.js\"\n   *    }\n   * })\n   * export class Server {\n   *     $onInit(){\n   *         console.log(this.settings); // {rootDir, port, httpsPort,...}\n   *     }\n   * }\n   * ```\n   *\n   * @returns {PlatformConfiguration}\n   */\n  get settings() {\n    return this.injector.settings;\n  }\n\n  get logger() {\n    return this.injector.logger;\n  }\n\n  get disableBootstrapLog() {\n    return this.settings.logger.disableBootstrapLog;\n  }\n\n  static build<T extends PlatformBuilder<any, any>>(platformBuildClass: PlatformType<T>): T {\n    return new platformBuildClass({\n      name: nameOf(platformBuildClass).replace(\"Platform\", \"\").toLowerCase(),\n      providers: platformBuildClass.providers\n    });\n  }\n\n  log(...data: any[]) {\n    return this.disableBootstrapLog && this.logger.info(...data);\n  }\n\n  /**\n   * Add classes to the components list\n   * @param classes\n   */\n  public addComponents(classes: any | any[]) {\n    this.settings.componentsScan = this.settings.componentsScan.concat(classes);\n\n    return this;\n  }\n\n  /**\n   * Add classes decorated by @@Controller@@ to components container.\n   *\n   * ### Example\n   *\n   * ```typescript\n   * @Controller('/ctrl')\n   * class MyController{\n   * }\n   *\n   * platform.addControllers('/rest', [MyController])\n   * ```\n   *\n   * ::: tip\n   * If the MyController class isn't decorated, the class will be ignored.\n   * :::\n   *\n   * @param {string} endpoint\n   * @param {any[]} controllers\n   */\n  public addControllers(endpoint: string, controllers: any | string | (any | string)[]) {\n    this.settings.mount[endpoint] = (this.settings.mount[endpoint] || []).concat(controllers);\n  }\n\n  public async runLifecycle() {\n    setLoggerLevel(this.injector);\n\n    await this.importProviders();\n    await this.loadInjector();\n\n    this.useContext();\n    this.useRouter();\n\n    await this.loadRoutes();\n    await this.logRoutes();\n  }\n\n  async loadInjector() {\n    const {injector} = this;\n    await this.callHook(\"$beforeInit\");\n\n    this.log(\"Build providers\");\n    const container = createContainer(constructorOf(this.rootModule));\n\n    await injector.load(container, PlatformModule);\n\n    this.log(\"Settings and injector loaded\");\n\n    await this.callHook(\"$afterInit\");\n  }\n\n  async listen() {\n    await this.callHook(\"$beforeListen\");\n\n    await this.listenServers();\n\n    await this.callHook(\"$afterListen\");\n\n    await this.ready();\n    end();\n  }\n\n  async stop() {\n    await this.callHook(\"$onDestroy\");\n    return this.injector.destroy();\n  }\n\n  public async ready() {\n    const {startedAt} = this;\n\n    await this.callHook(\"$onReady\");\n    await this.injector.emit(\"$onServerReady\");\n\n    this.log(`Started in ${new Date().getTime() - startedAt.getTime()} ms`);\n  }\n\n  async callHook(hook: string, ...args: any[]) {\n    const {injector, rootModule} = this;\n    log(hook);\n\n    if (!injector.settings.logger.disableBootstrapLog) {\n      injector.logger.info(`\\x1B[1mCall hook ${hook}\\x1B[22m`);\n    }\n\n    // call hook for the Server\n    if (hook in rootModule) {\n      await rootModule[hook](...args);\n    }\n\n    // Load middlewares for the given hook\n    this.loadMiddlewaresFor(hook);\n\n    // call hooks added by providers\n    if (!SKIP_HOOKS.includes(hook)) {\n      await injector.emit(hook);\n    }\n  }\n\n  async loadStatics(): Promise<void> {\n    const {settings} = this;\n\n    if (settings.statics) {\n      Object.entries(settings.statics).forEach(([path, items]) => {\n        [].concat(items as any).forEach((options) => {\n          const opts =\n            typeof options === \"string\"\n              ? {\n                  root: options\n                }\n              : options;\n\n          this.platform.app.statics(path, opts);\n        });\n      });\n    }\n  }\n\n  useProvider(token: Type<any>, settings?: Partial<IProvider>) {\n    this.locals.addProvider(token, settings);\n\n    return this;\n  }\n\n  protected async importProviders() {\n    this.injector.logger.debug(\"Scan components\");\n\n    const providers = await importProviders(this.injector.settings, [\"imports\", \"mount\", \"componentsScan\"]);\n    const routes = providers.filter((provider) => !!provider.route).map(({route, token}) => ({route, token}));\n\n    this.settings.set(\"routes\", routes);\n  }\n\n  protected createRequest(req: any): PlatformRequest {\n    const Klass = this.#providers.get(PlatformRequest)!.useClass!;\n\n    return new Klass(req);\n  }\n\n  protected createResponse(res: any): PlatformResponse {\n    const Klass = this.#providers.get(PlatformResponse)!.useClass!;\n    const response = new Klass(res);\n    response.platformViews = this.injector.get<PlatformViews>(PlatformViews)!;\n\n    return response;\n  }\n\n  /**\n   * Load middlewares from configuration for the given hook\n   * @param hook\n   * @protected\n   */\n  protected loadMiddlewaresFor(hook: string): void {\n    return getMiddlewaresForHook(hook, this.settings, \"$beforeRoutesInit\").forEach(({use}) => {\n      this.app.use(use);\n    });\n  }\n\n  protected useRouter(): this {\n    return this;\n  }\n\n  protected useContext(): this {\n    return this;\n  }\n\n  protected async bootstrap(module: Type<any>, settings: Partial<TsED.Configuration> = {}) {\n    // istanbul ignore next\n    if (settings.logger?.perf) {\n      start();\n      bind(this);\n      settings.logger = {\n        ...settings.logger,\n        level: \"off\"\n      };\n    }\n\n    this.createInjector(module, {\n      ...settings,\n      PLATFORM_NAME: this.name\n    });\n    this.createRootModule(module);\n\n    await this.runLifecycle();\n\n    return this;\n  }\n\n  protected async listenServers(): Promise<void> {\n    await Promise.all([listenHttpServer(this.injector), listenHttpsServer(this.injector)]);\n  }\n\n  protected async logRoutes() {\n    const {logger, platform} = this;\n\n    if (!this.settings.logger.disableRoutesSummary && !this.disableBootstrapLog) {\n      logger.info(\"Routes mounted :\");\n      logger.info(printRoutes(await this.injector.alterAsync(\"$logRoutes\", platform.getRoutes())));\n    }\n  }\n\n  protected async loadRoutes() {\n    // istanbul ignore next\n    if (this.settings.logger.level !== \"off\") {\n      this.app.use(PlatformLogMiddleware);\n    }\n\n    if (this.settings.acceptMimes?.length) {\n      this.app.use(GlobalAcceptMimesMiddleware);\n    }\n\n    this.log(\"Load routes\");\n    await this.callHook(\"$beforeRoutesInit\");\n\n    await this.callHook(\"$$loadRoutes\");\n\n    await this.callHook(\"$onRoutesInit\");\n\n    await this.loadStatics();\n\n    await this.callHook(\"$afterRoutesInit\");\n  }\n\n  protected createInjector(module: Type<any>, settings: any) {\n    const configuration = getConfiguration(module, settings);\n\n    this.#injector = createInjector(configuration);\n\n    // configure locals providers\n    this.locals.forEach((provider) => {\n      this.injector.addProvider(provider.token, provider);\n    });\n\n    createPlatformApplication(this.injector);\n    createHttpsServer(this.injector);\n    createHttpServer(this.injector);\n  }\n\n  protected createRootModule(module: Type<any>) {\n    this.#rootModule = this.injector.invoke(module);\n\n    this.injector.delete(constructorOf(this.#rootModule));\n    this.injector.delete(classOf(this.#rootModule));\n  }\n}\n","import {StoreMerge} from \"@tsed/core\";\nimport {PlatformMulterSettings} from \"../../config/interfaces/PlatformMulterSettings\";\nimport {PlatformMulterMiddleware} from \"../../middlewares/PlatformMulterMiddleware\";\n\n/**\n * Define multer option for all MultipartFile\n *\n * ```typescript\n * import {Controller, Post, PlatformMulterFile, MultipartFile, MulterOptions} from \"@tsed/common\";\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file')\n *   private uploadFile(@MultipartFile(\"file1\") file: PlatformMulterFile) {\n *\n *   }\n *\n *   @Post('/file')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: PlatformMulterFile) {\n *\n *   }\n *\n *   @Post('/file2')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: PlatformMulterFile, @MultipartFile(\"file2\") file2: PlatformMulterFile) {\n *\n *   }\n *\n *   @Post('/files')\n *   private uploadFile(@MultipartFile(\"file1\") files: PlatformMulterFile[]) {\n *\n *   }\n * }\n * ```\n *\n * See the tutorial on the [multer configuration](/tutorials/multer.md).\n *\n * @param {multer.Options} options\n * @returns {(target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor}\n * @decorator\n * @multer\n */\nexport function MulterOptions(options: PlatformMulterSettings): MethodDecorator {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    StoreMerge(PlatformMulterMiddleware, {options})(target, propertyKey, descriptor);\n\n    return descriptor;\n  };\n}\n","import {MulterOptions} from \"./multerOptions\";\n\n/**\n * Define file size limit.\n *\n * ```typescript\n * import {Controller, Post} from \"@tsed/common\";\n * import {MulterOptions, MultipartFile} from \"@tsed/common\";\n * import {Multer} from \"@types/multer\";\n *\n * type MulterFile = Express.Multer.File;\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file2')\n *   @MulterFileSize(1024) // (Ko). Applied for all fields\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile, @MultipartFile(\"file2\") file2: MulterFile) {\n *\n *   }\n * }\n * ```\n *\n * > See the tutorial on the [multer configuration](/tutorials/multer.md).\n * @param fileSize\n * @returns {(target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor}\n * @decorator\n * @multer\n */\nexport function MulterFileSize(fileSize: number): MethodDecorator {\n  return MulterOptions({limits: {fileSize}});\n}\n","import {DecoratorParameters, Metadata, StoreMerge, useDecorators, useMethodDecorators} from \"@tsed/core\";\nimport {ParamTypes, UseParam} from \"@tsed/platform-params\";\nimport {Consumes, Returns} from \"@tsed/schema\";\nimport {PlatformMulterFile} from \"../../config/interfaces/PlatformMulterSettings\";\nimport {MulterInputOptions, PlatformMulterMiddleware} from \"../../middlewares/PlatformMulterMiddleware\";\n\nfunction mapOptions(name: string, maxCount: number | undefined): MulterInputOptions {\n  return {\n    fields: [\n      {\n        name,\n        maxCount\n      }\n    ]\n  };\n}\n\n/**\n * Define a parameter as Multipart file.\n *\n * ```typescript\n * import {Controller, Post} from \"@tsed/common\";\n * import {MulterOptions, MultipartFile} from \"@tsed/common\";\n * import {Multer} from \"@types/multer\";\n *\n * type MulterFile = Express.Multer.File;\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file')\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file2')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile, @MultipartFile(\"file2\") file2: MulterFile) {\n *\n *   }\n *\n *   @Post('/files')\n *   private uploadFile(@MultipartFile(\"file1\") files: MulterFile[]) {\n *\n *   }\n * }\n * ```\n *\n * > See the tutorial on the [multer configuration](/tutorials/multer.md).\n *\n * @param name\n * @param maxCount\n * @returns Function\n * @decorator\n * @input\n */\nexport function MultipartFile(name: string, maxCount?: number): ParameterDecorator {\n  return (...args: DecoratorParameters): void => {\n    const [target, propertyKey, index] = args;\n    const multiple = Metadata.getParamTypes(target, propertyKey)[index as number] === Array;\n\n    name = (typeof name === \"object\" ? undefined : name)!;\n\n    const expression = [name, !multiple && \"0\"].filter(Boolean).join(\".\");\n\n    const decorators = useDecorators(\n      useMethodDecorators(\n        Returns(400).Description(\n          `<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName] Example: File too long file1`\n        ),\n        Consumes(\"multipart/form-data\"),\n        StoreMerge(PlatformMulterMiddleware, mapOptions(name, maxCount))\n      ),\n      UseParam({\n        paramType: ParamTypes.FILES,\n        dataPath: \"$ctx.request.files\",\n        expression,\n        useValidation: true\n      })\n    );\n\n    decorators(...args);\n  };\n}\n\nexport type MultipartFile = PlatformMulterFile;\n","import {Use} from \"@tsed/platform-middlewares\";\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function All(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"all\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Get(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"get\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Post(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"post\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Put(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"put\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Delete(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"delete\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Head(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"head\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Patch(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"patch\", path].concat(args));\n}\n\n/**\n * This method is just like the `router.METHOD()` methods, except that it matches all HTTP methods (verbs).\n *\n * This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches.\n * For example, if you placed the following route at the top of all other route definitions, it would require that\n * all routes from that point on would require authentication, and automatically load a user.\n * Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next()\n * to continue matching subsequent routes.\n * @param path\n * @param args\n * @returns {Function}\n * @decorator\n * @operation\n * @httpMethod\n */\nexport function Options(path: string | RegExp | any = \"/\", ...args: any[]): Function {\n  return Use(...[\"options\", path].concat(args));\n}\n","import {DecoratorParameters} from \"@tsed/core\";\nimport {JsonEntityFn} from \"@tsed/schema\";\nimport {EndpointMetadata} from \"../../domain\";\n\n/**\n *\n * @param fn\n * @decorator\n */\nexport function EndpointFn(fn: (endpoint: EndpointMetadata, parameters: DecoratorParameters) => void): MethodDecorator {\n  return JsonEntityFn<EndpointMetadata>(fn) as any;\n}\n","import {useDecorators} from \"@tsed/core\";\nimport {Produces} from \"@tsed/schema\";\nimport {EndpointFn} from \"./endpointFn\";\n\n/**\n * Set a mime list which are acceptable and checks if the specified content types are acceptable, based on the request’s Accept HTTP header field.\n *\n * ```typescript\n *  @Controller('/mypath')\n *  export class MyCtrl {\n *\n *    @Get('/')\n *    @AcceptMime('application/json')\n *    public getResource(){}\n *  }\n * ```\n *\n * @param mimes\n * @decorator\n * @operation\n * @response\n */\nexport function AcceptMime(...mimes: string[]): Function {\n  return useDecorators(\n    Produces(...mimes),\n    EndpointFn((endpoint) => {\n      endpoint.acceptMimes = mimes;\n    })\n  );\n}\n","import {EndpointFn} from \"./endpointFn\";\n\n/**\n * Sets the response Location HTTP header to the specified path parameter.\n *\n * ```typescript\n *  @Location('/foo/bar')\n *  @Location('http://example.com')\n *  @Location('back')\n *  private myMethod() {\n *\n *  }\n * ```\n *\n * A path value of “back” has a special meaning, it refers to the URL specified in the `Referer` header of the request. If the `Referer` header was not specified, it refers to “/”.\n *\n * @param location\n * @returns {Function}\n * @decorator\n * @operation\n */\nexport function Location(location: string): Function {\n  return EndpointFn((endpoint) => {\n    endpoint.location = location;\n  });\n}\n","import {useDecorators} from \"@tsed/core\";\nimport {Status} from \"@tsed/schema\";\nimport {EndpointFn} from \"./endpointFn\";\n\n/**\n * Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an HTTP status code . If not specified, status defaults to “302 “Found”.\n *\n * ```typescript\n *  @Redirect('/foo/bar')\n *  @Redirect(301, 'http://example.com')\n *  private myMethod() {}\n * ```\n * Redirects can be a fully-qualified URL for redirecting to a different site:\n *\n * ```typescript\n *  @Redirect('http://google.com');\n *  private myMethod() {}\n * ```\n *\n * Redirects can be relative to the root of the host name. For example, if the application is on http://example.com/admin/post/new, the following would redirect to the URL http://example.com/admin:\n *\n * ```typescript\n *  @Redirect('/admin');\n * ```\n * Redirects can be relative to the current URL. For example, from http://example.com/blog/admin/ (notice the trailing slash), the following would redirect to the URL http://example.com/blog/admin/post/new.\n *\n * ```typescript\n *  @Redirect('post/new');\n * ```\n *\n * Redirecting to post/new from http://example.com/blog/admin (no trailing slash), will redirect to http://example.com/blog/post/new.\n *\n * If you found the above behavior confusing, think of path segments as directories (with trailing slashes) and files, it will start to make sense.\n *\n * Path-relative redirects are also possible. If you were on http://example.com/admin/post/new, the following would redirect to http//example.com/admin/post:\n *\n * ```typescript\n *  @Redirect('..');\n * ``\n *\n * A back redirection redirects the request back to the referer, defaulting to / when the referer is missing.\n *\n * ```typescript\n *  @Redirect('back');\n * ```\n *\n * @param url\n * @decorator\n * @operation\n * @response\n * @headers\n */\nexport function Redirect(url: string): Function;\nexport function Redirect(status: number, url: string): Function;\nexport function Redirect(status: string | number, url?: string): Function {\n  url = (!url ? status : url) as string;\n  status = typeof status === \"number\" ? status : 302;\n\n  return useDecorators(\n    Status(status),\n    EndpointFn((endpoint) => {\n      endpoint.redirect = {status: +status, url: url!};\n    })\n  );\n}\n","import {isArrayOrArrayClass, Store, Type} from \"@tsed/core\";\nimport {IProvider, registerController} from \"@tsed/di\";\nimport {PathType} from \"../../interfaces\";\n\nexport interface ControllerMiddlewares {\n  useBefore: any[];\n  use: any[];\n  useAfter: any[];\n}\n\nexport interface ControllerOptions extends Partial<IProvider<any>> {\n  path?: PathType;\n  children?: Type<any>[];\n  routerOptions?: any;\n  middlewares?: Partial<ControllerMiddlewares>;\n}\n\nfunction mapOptions(options: any): ControllerOptions {\n  if (typeof options === \"string\" || options instanceof RegExp || isArrayOrArrayClass(options)) {\n    return {\n      path: options\n    };\n  }\n\n  return options;\n}\n\n/**\n * Declare a new controller with his Rest path. His methods annotated will be collected to build the routing list.\n * This routing listing will be built with the `express.Router` object.\n *\n * ::: tip\n * See [Controllers](/docs/controllers.md) section for more details\n * :::\n *\n * ```typescript\n *  @Controller(\"/calendars\")\n *  export provide CalendarCtrl {\n *\n *    @Get(\"/:id\")\n *    public get(\n *      @Req() request: Req,\n *      @Res() response: Res,\n *      @Next() next: Next\n *    ): void {\n *\n *    }\n *  }\n * ```\n *\n * @param options\n * @controller\n * @decorator\n * @classDecorator\n */\nexport function Controller(options: PathType | ControllerOptions): ClassDecorator {\n  const {children = [], ...opts} = mapOptions(options);\n\n  return (target) => {\n    registerController({\n      provide: target,\n      ...opts\n    });\n\n    Store.from(target).set(\"childrenControllers\", children);\n\n    children.forEach((childToken) => {\n      Store.from(childToken).set(\"parentController\", target);\n    });\n  };\n}\n","import {ParamTypes} from \"@tsed/platform-params\";\nimport {UseParam} from \"@tsed/platform-params\";\n\n/**\n * Return the current response data. Prefer the @@Context@@ decorator to get or set data.\n *\n * @decorator\n * @operation\n * @input\n * @deprecated Use `@Context() $ctx: Context` then $ctx.data.\n */\nexport function ResponseData(): ParameterDecorator {\n  return UseParam({\n    paramType: ParamTypes.$CTX,\n    dataPath: \"$ctx.data\"\n  });\n}\n","import {isClass, Metadata, nameOf} from \"@tsed/core\";\nimport {ParamTypes, UseParam} from \"@tsed/platform-params\";\nimport {ServerResponse} from \"http\";\n\nfunction getParamType(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n  const type = Metadata.getOwnParamTypes(target, propertyKey)[parameterIndex];\n\n  if (isClass(type)) {\n    if (nameOf(type) === \"PlatformResponse\") {\n      return {paramType: ParamTypes.PLATFORM_RESPONSE, dataPath: \"$ctx.response\"};\n    }\n\n    if (type === ServerResponse) {\n      return {paramType: ParamTypes.NODE_RESPONSE, dataPath: \"$ctx.response.res\"};\n    }\n  }\n\n  return {paramType: ParamTypes.RESPONSE, dataPath: \"$ctx.response.response\"};\n}\n\n/**\n * Response service.\n *\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport function Response(): ParameterDecorator;\nexport function Response(): ParameterDecorator {\n  return Res();\n}\n\n/**\n * Request service.\n *\n * @alias Response\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport function Res(): ParameterDecorator;\nexport function Res(): ParameterDecorator {\n  return (target, propertyKey, parameterIndex) => {\n    const {paramType, dataPath} = getParamType(target, propertyKey, parameterIndex);\n    UseParam({\n      paramType,\n      dataPath\n    })(target, propertyKey, parameterIndex);\n  };\n}\n\n/**\n * Response service.\n *\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport interface Response extends TsED.Response {}\n\n/**\n * Response service.\n *\n * @alias Response\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport interface Res extends Response {}\n","import {isClass, Metadata, nameOf, Type} from \"@tsed/core\";\nimport {IncomingMessage} from \"http\";\nimport {mapParamsOptions, ParamOptions, ParamTypes, UseParam} from \"@tsed/platform-params\";\n\nfunction getParamType(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n  const type = Metadata.getOwnParamTypes(target, propertyKey)[parameterIndex];\n\n  if (isClass(type)) {\n    if (nameOf(type) === \"PlatformRequest\") {\n      return {paramType: ParamTypes.PLATFORM_REQUEST, dataPath: \"$ctx.request\"};\n    }\n\n    if (type === IncomingMessage) {\n      return {paramType: ParamTypes.NODE_REQUEST, dataPath: \"$ctx.request.req\"};\n    }\n  }\n\n  return {paramType: ParamTypes.REQUEST, dataPath: \"$ctx.request.request\"};\n}\n\n/**\n * Request service.\n *\n * @decorator\n * @operation\n * @input\n */\nexport function Request(expression: string, useType: Type<any>): ParameterDecorator;\nexport function Request(expression: string): ParameterDecorator;\nexport function Request(useType: Type<any>): ParameterDecorator;\nexport function Request(options: ParamOptions<any>): ParameterDecorator;\nexport function Request(): ParameterDecorator;\nexport function Request(...args: any[]): ParameterDecorator {\n  // @ts-ignore\n  return Req(...args);\n}\n\n/**\n * Request service.\n *\n * @alias Request\n * @decorator\n * @operation\n * @input\n */\nexport function Req(expression: string, useType: Type<any>): ParameterDecorator;\nexport function Req(expression: string): ParameterDecorator;\nexport function Req(useType: Type<any>): ParameterDecorator;\nexport function Req(options: Partial<ParamOptions>): ParameterDecorator;\nexport function Req(): ParameterDecorator;\nexport function Req(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = false, useValidation = false} = mapParamsOptions(args);\n\n  return (target, propertyKey, parameterIndex) => {\n    const {paramType, dataPath} = getParamType(target, propertyKey, parameterIndex);\n\n    UseParam({\n      paramType,\n      dataPath,\n      expression,\n      useType,\n      useConverter,\n      useValidation\n    })(target, propertyKey, parameterIndex);\n  };\n}\n\n/**\n * Request service.\n *\n * @decorator\n * @operation\n * @input\n */\nexport interface Request extends TsED.Request {}\n\n/**\n * Request service.\n *\n * @alias Request\n * @decorator\n * @operation\n * @input\n */\nexport interface Req extends Request {}\n","import {ParamTypes, UseParam} from \"@tsed/platform-params\";\n\n/**\n * Get the Next function (for express application and middleware).\n *\n * @decorator\n * @operation\n * @input\n */\nexport function Next(): ParameterDecorator {\n  return UseParam({\n    paramType: ParamTypes.NEXT_FN,\n    dataPath: \"next\",\n    useConverter: false,\n    useValidation: false\n  });\n}\n\ndeclare global {\n  namespace TsED {\n    export interface NextFunction extends Function {}\n  }\n}\n/**\n * Get the Next function (for express application and middleware).\n *\n * @decorator\n * @operation\n * @input\n */\nexport type Next = TsED.NextFunction;\n","import {ParamTypes, UseParam} from \"@tsed/platform-params\";\n\n/**\n * @returns {Function}\n * @decorator\n * @operation\n * @input\n */\nexport function Err(): Function {\n  return UseParam({\n    paramType: ParamTypes.ERR,\n    dataPath: \"err\",\n    useValidation: false,\n    useConverter: false\n  });\n}\n","import {ParamTypes, UseParam} from \"@tsed/platform-params\";\nimport {EndpointMetadata} from \"../../domain/EndpointMetadata\";\n\nexport type EndpointInfo = EndpointMetadata;\n\n/**\n * Get the current endpoint metadata.\n * @decorator\n * @operation\n * @input\n * @deprecated Use `@Context() $ctx: Context` then `$ctx.endpoint` instead.\n */\nexport function EndpointInfo(): Function {\n  return UseParam({\n    paramType: ParamTypes.$CTX,\n    dataPath: \"$ctx.endpoint\",\n    useConverter: false,\n    useValidation: false\n  });\n}\n","/**\n * @ignore\n */\nexport function mapReturnedResponse({use, collection, ...options}: any): any {\n  return {\n    ...options,\n    type: options.type || use,\n    collectionType: options.collectionType || collection\n  };\n}\n","import {Type} from \"@tsed/core\";\nimport {createContainer, DITest, InjectorService} from \"@tsed/di\";\nimport {PlatformBuilder, PlatformType} from \"../builder/PlatformBuilder\";\nimport {PlatformContext, PlatformContextOptions} from \"../domain/PlatformContext\";\nimport {PlatformModule} from \"../PlatformModule\";\nimport {createInjector} from \"../utils/createInjector\";\nimport {PlatformApplication} from \"./PlatformApplication\";\nimport {PlatformRequest} from \"./PlatformRequest\";\nimport {PlatformResponse} from \"./PlatformResponse\";\n\n/**\n * @platform\n */\nexport class PlatformTest extends DITest {\n  public static platformBuilder: Type<PlatformBuilder>;\n\n  static async create(options: Partial<TsED.Configuration> = {}) {\n    DITest.injector = PlatformTest.createInjector(options);\n    const container = createContainer();\n\n    await DITest.injector.load(container, PlatformModule);\n  }\n\n  /**\n   * Create a new injector with the right default services\n   */\n  static createInjector(settings: any = {}): InjectorService {\n    return createInjector(DITest.configure(settings));\n  }\n\n  /**\n   * Load the server silently without listening port and configure it on test profile.\n   * @decorator\n   * @param mod\n   * @param settings\n   * @returns {Promise<void>}\n   */\n  static bootstrap(mod: any, settings: Partial<TsED.Configuration & {listen: boolean}> = {}): () => Promise<void> {\n    return async function before(): Promise<void> {\n      let instance: any;\n      const platform: PlatformType = settings.platform || PlatformTest.platformBuilder;\n\n      /* istanbul ignore next */\n      if (!platform) {\n        throw new Error(\n          \"Platform type is not specified. Have you added at least `import @tsed/platform-express` (or equivalent) on your Server.ts ?\"\n        );\n      }\n\n      // @ts-ignore\n      instance = await PlatformBuilder.build(platform).bootstrap(mod, DITest.configure(settings));\n\n      if (!settings.listen) {\n        await instance.callHook(\"$beforeListen\");\n        await instance.callHook(\"$afterListen\");\n        await instance.ready();\n      } else {\n        await instance.listen();\n      }\n\n      // used by inject method\n      DITest.injector = instance.injector;\n    };\n  }\n\n  /**\n   * It injects services into the test function where you can alter, spy on, and manipulate them.\n   *\n   * The inject function has two parameters\n   *\n   * * an array of Service dependency injection tokens,\n   * * a test function whose parameters correspond exactly to each item in the injection token array.\n   *\n   * @param targets\n   * @param func\n   */\n  static inject<T>(targets: any[], func: (...args: any[]) => Promise<T> | T): () => Promise<T> {\n    return async (): Promise<T> => {\n      if (!DITest.hasInjector()) {\n        await PlatformTest.create();\n      }\n\n      const injector: InjectorService = DITest.injector;\n      const deps = [];\n\n      for (const target of targets) {\n        deps.push(injector.has(target) ? injector.get(target) : await injector.invoke(target));\n      }\n\n      return await func(...deps);\n    };\n  }\n\n  /**\n   * Return the raw application (express or koa).\n   * Use this callback with SuperTest.\n   *\n   * ```typescript\n   * let request: SuperTest.SuperTest<SuperTest.Test>;\n   * beforeEach(PlatformTest.bootstrap(Server, {\n   *   mount: {\n   *     \"/rest\": [ProductsController]\n   *   }\n   * }));\n   * beforeEach(() => {\n   *   request = SuperTest(PlatformTest.callback());\n   * });\n   * ```\n   */\n  static callback() {\n    return DITest.injector.get<PlatformApplication>(PlatformApplication)?.callback();\n  }\n\n  static createRequestContext(options: Partial<PlatformContextOptions> = {}) {\n    options.request = options.request || new PlatformRequest({} as any);\n    options.response = options.response || new PlatformResponse({} as any);\n\n    return new PlatformContext({\n      id: \"id\",\n      injector: DITest.injector,\n      logger: DITest.injector.logger,\n      url: \"/\",\n      ...options\n    });\n  }\n}\n","import {GlobalProviders, ProviderType} from \"@tsed/di\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\n\nGlobalProviders.createRegistry(ProviderType.CONTROLLER, ControllerProvider, {\n  injectable: false,\n\n  onInvoke(provider: ControllerProvider, locals: any) {\n    locals.set(PlatformRouter, provider.getRouter());\n  }\n});\n"],"names":["rootDir","process","cwd","PlatformConfiguration","DIConfiguration","constructor","env","NODE_ENV","Env","DEV","httpPort","httpsPort","scopes","ProviderType","CONTROLLER","ProviderScope","SINGLETON","logger","debug","level","logRequest","jsonIndentation","PROD","errors","headerName","mount","exclude","componentsScan","version","getRaw","v","setRaw","value","port","httpsOptions","get","resolve","statics","acceptMimes","converter","options","format","$log","appenders","set","type","levels","layout","pattern","buildAddressAndPort","addressPort","address","indexOf","split","getHttpPort","PlatformConfiguration_1","setHttpPort","settings","getHttpsPort","setHttpsPort","Injectable","scope","global","bindEndpointMiddleware","endpoint","ctx","PlatformLogMiddleware","injector","requestFields","PlatformLogMiddleware_1","DEFAULT_FIELDS","$onResponse","onLogEnd","bind","use","configureRequest","onLogStart","logStart","event","info","logEnd","status","response","statusCode","data","flush","minimalRequestPicker","obj","completeRequestPicker","requestToObject","request","method","url","headers","body","query","params","reduce","acc","key","__decorate","__param","Context","Middleware","InjectorService","createFakeRawDriver","FakeRawDriver","all","patch","post","put","head","delete","isResponse","statusText","HandlerContextStatus","HandlerContext","$ctx","err","metadata","args","PENDING","Promise","reject","next","getRequest","getResponse","isDone","isAborted","destroy","RESOLVED","handler","has","token","invoke","instance","propertyKey","container","callHandler","handle","er","REJECTED","undefined","error","cancel","CANCELED","hasNextFunction","isObservable","toPromise","setHeaders","isStream","Buffer","isBuffer","isPromise","then","result","catch","HandlerType","HandlerMetadata","RAW_FN","target","routeOptions","prototype","hasParamType","ParamTypes","NEXT_FN","ERR","ERR_MIDDLEWARE","injectable","ParamMetadata","getParams","length","RAW_ERR_FN","hasErrorParam","parameters","paramType","findIndex","p","isFinal","toString","nameOf","filter","Boolean","join","EndpointMetadata","JsonEntityStore","store","Store","fromMethod","descriptor","descriptorOf","beforeMiddlewares","middlewares","afterMiddlewares","after","before","targetName","Array","from","children","values","operation","_operation","operationPaths","view","location","mimes","redirect","getEndpoints","operations","getOperationsStores","map","clone","classOf","prototypeOf","addOperationPath","path","ctrlValue","deepMerge","concat","isFunction","EndpointMetadata_1","collectionType","_type","_schema","Enumerable","JsonEntityComponent","DecoratorTypes","METHOD","isMetadata","input","createHandlerMetadata","provider","getProvider","useClass","ENDPOINT","MIDDLEWARE","toHeaders","Object","entries","item","String","example","setResponseHeaders","hasStatus","getStatus","getHeadersOf","ConverterService","injectorService","configuration","serialize","useAlias","additionalProperties","deserialize","Configuration","shouldBeSent","isBoolean","isNumber","isString","shouldBeSerialized","PlatformHandler","createHandler","buildPipe","createRawHandler","createCustomHandler","provide","CUSTOM","render","getResponseOptions","responseFilter","PlatformResponseFilter","transform","onCtxRequest","requestOptions","onRequest","h","runInContext","getArgs","onSuccess","onError","isHeadersSent","callReturnedMiddleware","middleware","renderView","forEach","param","build","PlatformParams","PLATFORM_ROUTER_OPTIONS","Symbol","for","PlatformRouter","platformHandler","rawRouter","raw","PlatformRouter_1","createRawRouter","create","routerOptions","locals","Map","callback","getRouter","handlers","mapHandlers","addRoute","multer","m","require","makePromise","name","fn","apply","Reflect","req","res","promisify","list","index","Inject","INSTANCE","PlatformApplication","rawApp","PlatformApplication_1","createRawApp","getApp","PlatformMulterMiddleware","fields","PlatformMulterMiddleware_1","storage","dest","app","getFields","code","Exception","message","field","trim","conf","maxCount","Constant","GlobalAcceptMimesMiddleware","PlatformAcceptMimesMiddleware","uniq","accepts","NotAcceptable","AcceptMimesMiddleware","useCtxHandler","CTX_FN","formatMethod","OperationMethods","toLowerCase","PlatformControllerBuilder","useBefore","buildMiddlewares","buildEndpoints","buildChildrenCtrls","endpoints","getKey","updateFinalRouteState","setFinalRoute","operationPath","ALL","buildEndpoint","mldwrs","useAfter","router","hasFiles","find","FILES","size","child","Error","o","PlatformRequest","secure","host","protocol","originalUrl","rawBody","cookies","session","files","getReq","mime","aborted","Scope","Opts","onFinished","PlatformResponse","getRes","cb","getHeaders","setHeader","contentType","contentLength","getContentLength","parseInt","getContentType","attachment","filename","stream","pipe","platformViews","send","json","getBody","onEnd","PlatformResponse_1","writableEnded","writableFinished","headersSent","PlatformViews","PlatformContext","DIContext","ignoreUrlPatterns","ignoreLog","reg","match","RegExp","PlatformRouteDetails","RAW_BODY","methodClassName","className","toJSON","ROUTER_OPTIONS","ControllerProvider","Provider","entity","parent","assign","mdlwrs","a","b","keys","hasChildren","hasParent","setRouter","NotEnumerable","PropertyMetadata","getProperties","PROP","getControllerPath","basePath","replace","Platform","platformApplication","routes","addRoutes","routeSettings","route","hasProvider","buildRoutes","push","getRoutes","getMountedControllers","endpointUrl","ctrl","PlatformModule","platform","createRoutersFromControllers","getProviders","$$loadRoutes","Module","imports","createInjector","createSettingsService","setLoggerLevel","GlobalProviders","addProvider","createPlatformApplication","forkProvider","HttpServer","targetKey","listenServer","http","promise","on","listen","createHttpServer","registerProvider","deps","useFactory","Http","createServer","listenHttpServer","server","HttpsServer","createHttpsServer","Https","listenHttpsServer","loadInjector","createContainer","bootstrap","load","printRoutes","mapColor","GET","POST","PUT","DELETE","PATCH","toUpperCase","colorize","str","drawTable","padding","header","uuidv4","v4","defaultReqIdBuilder","createContext","maxStackSize","reqIdBuilder","id","emit","SKIP_HOOKS","start","end","log","PerfLogger","PlatformBuilder","providers","Date","toMap","Container","useProvider","rootModule","disableBootstrapLog","platformBuildClass","addComponents","classes","addControllers","controllers","runLifecycle","importProviders","useContext","useRouter","loadRoutes","logRoutes","callHook","constructorOf","listenServers","ready","stop","startedAt","getTime","hook","loadMiddlewaresFor","includes","loadStatics","items","opts","root","createRequest","Klass","createResponse","getMiddlewaresForHook","module","perf","PLATFORM_NAME","createRootModule","disableRoutesSummary","alterAsync","getConfiguration","MulterOptions","StoreMerge","MulterFileSize","fileSize","limits","mapOptions","MultipartFile","multiple","Metadata","getParamTypes","expression","decorators","useDecorators","useMethodDecorators","Returns","Description","Consumes","UseParam","dataPath","useValidation","All","Use","Get","Post","Put","Delete","Head","Patch","Options","EndpointFn","JsonEntityFn","AcceptMime","Produces","Location","Redirect","Status","isArrayOrArrayClass","Controller","registerController","childToken","ResponseData","$CTX","getParamType","parameterIndex","getOwnParamTypes","isClass","PLATFORM_RESPONSE","ServerResponse","NODE_RESPONSE","RESPONSE","Response","Res","PLATFORM_REQUEST","IncomingMessage","NODE_REQUEST","REQUEST","Request","Req","useType","useConverter","mapParamsOptions","Next","Err","EndpointInfo","mapReturnedResponse","collection","PlatformTest","DITest","configure","mod","platformBuilder","inject","targets","func","hasInjector","createRequestContext","createRegistry","onInvoke"],"mappings":"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"}