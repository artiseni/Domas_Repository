{"version":3,"file":"index.modern.js","sources":["../src/domain/ExceptionFiltersContainer.ts","../src/decorators/catch.ts","../src/components/StringErrorFilter.ts","../src/components/ErrorFilter.ts","../src/components/ExceptionFilter.ts","../src/components/MongooseErrorFilter.ts","../src/domain/ExceptionSchema.ts","../src/errors/ResourceNotFound.ts","../src/services/PlatformExceptions.ts"],"sourcesContent":["import {Type} from \"@tsed/core\";\nimport type {ExceptionFilterMethods} from \"../interfaces/ExceptionFilterMethods\";\n/**\n * @ignore\n */\nexport type ExceptionFilterKey = Type<any> | Symbol | string;\n/**\n * @ignore\n */\n// tslint:disable-next-line:variable-name\nexport const ExceptionFiltersContainer = new Map<ExceptionFilterKey, Type<ExceptionFilterMethods>>();\n/**\n * @ignore\n */\nexport function registerExceptionType(type: ExceptionFilterKey, token: Type<ExceptionFilterMethods>) {\n  ExceptionFiltersContainer.set(type, token);\n}\n","import {Type} from \"@tsed/core\";\nimport {registerProvider} from \"@tsed/di\";\nimport {registerExceptionType} from \"../domain/ExceptionFiltersContainer\";\n\n/**\n * Register a new class to handle an specific exception.\n * @decorator\n * @param types\n */\nexport function Catch(...types: (Type<Error | any> | string)[]) {\n  return (target: any) => {\n    types.forEach((type) => {\n      registerExceptionType(type, target as any);\n    });\n    registerProvider({\n      provide: target,\n      useClass: target\n    });\n  };\n}\n","import type {BaseContext} from \"@tsed/di\";\nimport type {ExceptionFilterMethods} from \"../interfaces/ExceptionFilterMethods\";\nimport {Catch} from \"../decorators/catch\";\n\nconst toHTML = (message = \"\") => message.replace(/\\n/gi, \"<br />\");\n\n@Catch(String)\nexport class StringErrorFilter implements ExceptionFilterMethods {\n  catch(error: string, ctx: BaseContext): void {\n    ctx.response.status(404).body(toHTML(error));\n  }\n}\n","import {Env} from \"@tsed/core\";\nimport type {BaseContext} from \"@tsed/di\";\nimport {Catch} from \"../decorators/catch\";\nimport type {ExceptionFilterMethods} from \"../interfaces/ExceptionFilterMethods\";\n\n@Catch(Error)\nexport class ErrorFilter implements ExceptionFilterMethods {\n  catch(error: any, ctx: BaseContext): void {\n    const {response, logger, env} = ctx;\n    const err = this.mapError(error, env);\n\n    logger.error({\n      error: {...err, stack: error.stack}\n    });\n\n    response\n      .onEnd(() => {\n        env === \"development\" && ctx.injector.logger.error(error);\n      })\n      .setHeaders(this.getHeaders(error))\n      .status(err.status)\n      .contentType(\"application/json\")\n      .body(env === Env.PROD ? \"InternalServerError\" : err);\n  }\n\n  mapError(error: any, env?: Env) {\n    return {\n      name: error.origin?.name || error.name,\n      message: error.message,\n      status: error.status || 500,\n      errors: this.getErrors(error),\n      stack: env === Env.DEV ? error.stack : undefined\n    };\n  }\n\n  protected getErrors(error: any) {\n    return [error, error.origin].filter(Boolean).reduce((errs, {errors}: any) => {\n      return errs.concat(errors).filter(Boolean);\n    }, []);\n  }\n\n  protected getHeaders(error: any) {\n    return [error, error.origin].filter(Boolean).reduce((obj, {headers}: any) => {\n      return {\n        ...obj,\n        ...(headers || {})\n      };\n    }, {});\n  }\n}\n","import type {BaseContext} from \"@tsed/di\";\nimport {Exception} from \"@tsed/exceptions\";\nimport {Catch} from \"../decorators/catch\";\nimport {ErrorFilter} from \"./ErrorFilter\";\n\n@Catch(Exception)\nexport class ExceptionFilter extends ErrorFilter {\n  catch(error: Exception, ctx: BaseContext) {\n    const {response, logger, env} = ctx;\n    const err = this.mapError(error, env);\n    logger.error({\n      error: err,\n      stack: error.stack\n    });\n\n    response.setHeaders(this.getHeaders(error)).contentType(\"application/json\").status(error.status).body(err);\n  }\n}\n","import type {BaseContext} from \"@tsed/di\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {Catch} from \"../decorators/catch\";\nimport {ErrorFilter} from \"./ErrorFilter\";\n\n@Catch(\"MongooseError\", \"MongoError\")\nexport class MongooseErrorFilter extends ErrorFilter {\n  catch(error: Error, ctx: BaseContext) {\n    return super.catch(new BadRequest(error.message, error), ctx);\n  }\n}\n","import * as Exceptions from \"@tsed/exceptions\";\nimport {Exception} from \"@tsed/exceptions\";\nimport {array, defineStatusModel, from, number, object, string} from \"@tsed/schema\";\n\n/**\n * @ignore\n */\nconst ErrorSchema = object({\n  name: string().required().description(\"The error name\"),\n  message: string().required().description(\"An error message\")\n})\n  .label(\"GenericError\")\n  .unknown();\n\nfrom(Exception).properties({\n  name: string().required().description(\"The error name\"),\n  message: string().required().description(\"An error message\"),\n  status: number().required().description(\"The status code of the exception\"),\n  errors: array().items(ErrorSchema).description(\"A list of related errors\"),\n  stack: string().description(\"The stack trace (only in development mode)\")\n});\n\n// Auto load models for all Exceptions\nObject.values(Exceptions).forEach((target) => {\n  if (target !== Exception && target.STATUS) {\n    const instance = new target(\"message\");\n    from(target).properties({\n      name: string().required().example(instance.name).default(instance.name).description(\"The error name\"),\n      status: number().required().example(instance.status).default(instance.status).description(\"The status code of the exception\")\n    });\n\n    defineStatusModel(target.STATUS, target);\n  }\n});\n","import {NotFound} from \"@tsed/exceptions\";\n\nexport class ResourceNotFound extends NotFound {\n  readonly url: string;\n\n  constructor(url: string) {\n    super(`Resource \"${url}\" not found`);\n\n    this.url = url;\n  }\n}\n","import {ancestorsOf, classOf, nameOf} from \"@tsed/core\";\nimport {BaseContext, Inject, Injectable, InjectorService} from \"@tsed/di\";\nimport \"../components/ErrorFilter\";\nimport \"../components/ExceptionFilter\";\nimport \"../components/MongooseErrorFilter\";\nimport \"../components/StringErrorFilter\";\nimport {ExceptionFilterKey, ExceptionFiltersContainer} from \"../domain/ExceptionFiltersContainer\";\nimport {ResourceNotFound} from \"../errors/ResourceNotFound\";\nimport {ExceptionFilterMethods} from \"../interfaces/ExceptionFilterMethods\";\n\n/**\n * Catch all errors and return the json error with the right status code when it's possible.\n *\n * @platform\n */\n@Injectable()\nexport class PlatformExceptions {\n  types: Map<ExceptionFilterKey, ExceptionFilterMethods> = new Map();\n\n  @Inject()\n  injector: InjectorService;\n\n  $onInit() {\n    ExceptionFiltersContainer.forEach((token, type) => {\n      this.types.set(type, this.injector.get(token)!);\n    });\n  }\n\n  catch(error: unknown, ctx: TsED.Context) {\n    const name = nameOf(classOf(error));\n\n    if (name && this.types.has(name)) {\n      return this.types.get(name)!.catch(error, ctx);\n    }\n\n    const target = ancestorsOf(error)\n      .reverse()\n      .find((target) => this.types.has(target));\n\n    if (target) {\n      return this.types.get(target)!.catch(error, ctx);\n    }\n\n    // default\n    return this.types.get(Error)!.catch(error, ctx);\n  }\n\n  resourceNotFound(ctx: BaseContext) {\n    return this.catch(new ResourceNotFound(ctx.request.url), ctx);\n  }\n}\n"],"names":["ExceptionFiltersContainer","Map","registerExceptionType","type","token","set","Catch","types","target","forEach","registerProvider","provide","useClass","toHTML","message","replace","StringErrorFilter","catch","error","ctx","response","status","body","String","ErrorFilter","logger","env","err","mapError","stack","onEnd","injector","setHeaders","getHeaders","contentType","Env","PROD","name","origin","errors","getErrors","DEV","undefined","filter","Boolean","reduce","errs","concat","obj","headers","Error","ExceptionFilter","Exception","MongooseErrorFilter","BadRequest","ErrorSchema","object","string","required","description","label","unknown","from","properties","number","array","items","Object","values","Exceptions","STATUS","instance","example","default","defineStatusModel","ResourceNotFound","NotFound","constructor","url","PlatformExceptions","$onInit","get","nameOf","classOf","has","ancestorsOf","reverse","find","resourceNotFound","request","__decorate","Inject","InjectorService","Injectable"],"mappings":"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"}